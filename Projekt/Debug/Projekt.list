
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abc4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001df0  0800ad78  0800ad78  0001ad78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb68  0800cb68  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb68  0800cb68  0001cb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb70  0800cb70  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb70  0800cb70  0001cb70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb74  0800cb74  0001cb74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800cb78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000224  0800cd9c  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  0800cd9c  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019132  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031e1  00000000  00000000  00039386  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001758  00000000  00000000  0003c568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015e0  00000000  00000000  0003dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000253cb  00000000  00000000  0003f2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000120d9  00000000  00000000  0006466b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e41c3  00000000  00000000  00076744  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015a907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000704c  00000000  00000000  0015a984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000224 	.word	0x20000224
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ad5c 	.word	0x0800ad5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000228 	.word	0x20000228
 80001ec:	0800ad5c 	.word	0x0800ad5c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000fac:	f000 fa5c 	bl	8001468 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000fb0:	20ca      	movs	r0, #202	; 0xca
 8000fb2:	f000 f95d 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000fb6:	20c3      	movs	r0, #195	; 0xc3
 8000fb8:	f000 f967 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000fbc:	2008      	movs	r0, #8
 8000fbe:	f000 f964 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000fc2:	2050      	movs	r0, #80	; 0x50
 8000fc4:	f000 f961 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000fc8:	20cf      	movs	r0, #207	; 0xcf
 8000fca:	f000 f951 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f95b 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000fd4:	20c1      	movs	r0, #193	; 0xc1
 8000fd6:	f000 f958 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000fda:	2030      	movs	r0, #48	; 0x30
 8000fdc:	f000 f955 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000fe0:	20ed      	movs	r0, #237	; 0xed
 8000fe2:	f000 f945 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000fe6:	2064      	movs	r0, #100	; 0x64
 8000fe8:	f000 f94f 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f94c 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000ff2:	2012      	movs	r0, #18
 8000ff4:	f000 f949 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000ff8:	2081      	movs	r0, #129	; 0x81
 8000ffa:	f000 f946 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000ffe:	20e8      	movs	r0, #232	; 0xe8
 8001000:	f000 f936 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001004:	2085      	movs	r0, #133	; 0x85
 8001006:	f000 f940 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f93d 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001010:	2078      	movs	r0, #120	; 0x78
 8001012:	f000 f93a 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001016:	20cb      	movs	r0, #203	; 0xcb
 8001018:	f000 f92a 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800101c:	2039      	movs	r0, #57	; 0x39
 800101e:	f000 f934 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001022:	202c      	movs	r0, #44	; 0x2c
 8001024:	f000 f931 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001028:	2000      	movs	r0, #0
 800102a:	f000 f92e 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800102e:	2034      	movs	r0, #52	; 0x34
 8001030:	f000 f92b 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001034:	2002      	movs	r0, #2
 8001036:	f000 f928 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800103a:	20f7      	movs	r0, #247	; 0xf7
 800103c:	f000 f918 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001040:	2020      	movs	r0, #32
 8001042:	f000 f922 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001046:	20ea      	movs	r0, #234	; 0xea
 8001048:	f000 f912 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800104c:	2000      	movs	r0, #0
 800104e:	f000 f91c 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f919 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001058:	20b1      	movs	r0, #177	; 0xb1
 800105a:	f000 f909 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800105e:	2000      	movs	r0, #0
 8001060:	f000 f913 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001064:	201b      	movs	r0, #27
 8001066:	f000 f910 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800106a:	20b6      	movs	r0, #182	; 0xb6
 800106c:	f000 f900 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001070:	200a      	movs	r0, #10
 8001072:	f000 f90a 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001076:	20a2      	movs	r0, #162	; 0xa2
 8001078:	f000 f907 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800107c:	20c0      	movs	r0, #192	; 0xc0
 800107e:	f000 f8f7 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001082:	2010      	movs	r0, #16
 8001084:	f000 f901 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001088:	20c1      	movs	r0, #193	; 0xc1
 800108a:	f000 f8f1 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800108e:	2010      	movs	r0, #16
 8001090:	f000 f8fb 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001094:	20c5      	movs	r0, #197	; 0xc5
 8001096:	f000 f8eb 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800109a:	2045      	movs	r0, #69	; 0x45
 800109c:	f000 f8f5 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80010a0:	2015      	movs	r0, #21
 80010a2:	f000 f8f2 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80010a6:	20c7      	movs	r0, #199	; 0xc7
 80010a8:	f000 f8e2 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80010ac:	2090      	movs	r0, #144	; 0x90
 80010ae:	f000 f8ec 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80010b2:	2036      	movs	r0, #54	; 0x36
 80010b4:	f000 f8dc 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80010b8:	20c8      	movs	r0, #200	; 0xc8
 80010ba:	f000 f8e6 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80010be:	20f2      	movs	r0, #242	; 0xf2
 80010c0:	f000 f8d6 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f8e0 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80010ca:	20b0      	movs	r0, #176	; 0xb0
 80010cc:	f000 f8d0 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80010d0:	20c2      	movs	r0, #194	; 0xc2
 80010d2:	f000 f8da 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80010d6:	20b6      	movs	r0, #182	; 0xb6
 80010d8:	f000 f8ca 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80010dc:	200a      	movs	r0, #10
 80010de:	f000 f8d4 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80010e2:	20a7      	movs	r0, #167	; 0xa7
 80010e4:	f000 f8d1 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80010e8:	2027      	movs	r0, #39	; 0x27
 80010ea:	f000 f8ce 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80010ee:	2004      	movs	r0, #4
 80010f0:	f000 f8cb 	bl	800128a <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80010f4:	202a      	movs	r0, #42	; 0x2a
 80010f6:	f000 f8bb 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f8c5 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f000 f8c2 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001106:	2000      	movs	r0, #0
 8001108:	f000 f8bf 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800110c:	20ef      	movs	r0, #239	; 0xef
 800110e:	f000 f8bc 	bl	800128a <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001112:	202b      	movs	r0, #43	; 0x2b
 8001114:	f000 f8ac 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001118:	2000      	movs	r0, #0
 800111a:	f000 f8b6 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f8b3 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001124:	2001      	movs	r0, #1
 8001126:	f000 f8b0 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800112a:	203f      	movs	r0, #63	; 0x3f
 800112c:	f000 f8ad 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001130:	20f6      	movs	r0, #246	; 0xf6
 8001132:	f000 f89d 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001136:	2001      	movs	r0, #1
 8001138:	f000 f8a7 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800113c:	2000      	movs	r0, #0
 800113e:	f000 f8a4 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001142:	2006      	movs	r0, #6
 8001144:	f000 f8a1 	bl	800128a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001148:	202c      	movs	r0, #44	; 0x2c
 800114a:	f000 f891 	bl	8001270 <ili9341_WriteReg>
  LCD_Delay(200);
 800114e:	20c8      	movs	r0, #200	; 0xc8
 8001150:	f000 fa78 	bl	8001644 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001154:	2026      	movs	r0, #38	; 0x26
 8001156:	f000 f88b 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800115a:	2001      	movs	r0, #1
 800115c:	f000 f895 	bl	800128a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001160:	20e0      	movs	r0, #224	; 0xe0
 8001162:	f000 f885 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001166:	200f      	movs	r0, #15
 8001168:	f000 f88f 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800116c:	2029      	movs	r0, #41	; 0x29
 800116e:	f000 f88c 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001172:	2024      	movs	r0, #36	; 0x24
 8001174:	f000 f889 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001178:	200c      	movs	r0, #12
 800117a:	f000 f886 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800117e:	200e      	movs	r0, #14
 8001180:	f000 f883 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001184:	2009      	movs	r0, #9
 8001186:	f000 f880 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800118a:	204e      	movs	r0, #78	; 0x4e
 800118c:	f000 f87d 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001190:	2078      	movs	r0, #120	; 0x78
 8001192:	f000 f87a 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001196:	203c      	movs	r0, #60	; 0x3c
 8001198:	f000 f877 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800119c:	2009      	movs	r0, #9
 800119e:	f000 f874 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80011a2:	2013      	movs	r0, #19
 80011a4:	f000 f871 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80011a8:	2005      	movs	r0, #5
 80011aa:	f000 f86e 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80011ae:	2017      	movs	r0, #23
 80011b0:	f000 f86b 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80011b4:	2011      	movs	r0, #17
 80011b6:	f000 f868 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 f865 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80011c0:	20e1      	movs	r0, #225	; 0xe1
 80011c2:	f000 f855 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f85f 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80011cc:	2016      	movs	r0, #22
 80011ce:	f000 f85c 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80011d2:	201b      	movs	r0, #27
 80011d4:	f000 f859 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80011d8:	2004      	movs	r0, #4
 80011da:	f000 f856 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80011de:	2011      	movs	r0, #17
 80011e0:	f000 f853 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80011e4:	2007      	movs	r0, #7
 80011e6:	f000 f850 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80011ea:	2031      	movs	r0, #49	; 0x31
 80011ec:	f000 f84d 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80011f0:	2033      	movs	r0, #51	; 0x33
 80011f2:	f000 f84a 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80011f6:	2042      	movs	r0, #66	; 0x42
 80011f8:	f000 f847 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80011fc:	2005      	movs	r0, #5
 80011fe:	f000 f844 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001202:	200c      	movs	r0, #12
 8001204:	f000 f841 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001208:	200a      	movs	r0, #10
 800120a:	f000 f83e 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800120e:	2028      	movs	r0, #40	; 0x28
 8001210:	f000 f83b 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001214:	202f      	movs	r0, #47	; 0x2f
 8001216:	f000 f838 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800121a:	200f      	movs	r0, #15
 800121c:	f000 f835 	bl	800128a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001220:	2011      	movs	r0, #17
 8001222:	f000 f825 	bl	8001270 <ili9341_WriteReg>
  LCD_Delay(200);
 8001226:	20c8      	movs	r0, #200	; 0xc8
 8001228:	f000 fa0c 	bl	8001644 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800122c:	2029      	movs	r0, #41	; 0x29
 800122e:	f000 f81f 	bl	8001270 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001232:	202c      	movs	r0, #44	; 0x2c
 8001234:	f000 f81c 	bl	8001270 <ili9341_WriteReg>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001240:	f000 f912 	bl	8001468 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001244:	2103      	movs	r1, #3
 8001246:	20d3      	movs	r0, #211	; 0xd3
 8001248:	f000 f82c 	bl	80012a4 <ili9341_ReadData>
 800124c:	4603      	mov	r3, r0
 800124e:	b29b      	uxth	r3, r3
}
 8001250:	4618      	mov	r0, r3
 8001252:	bd80      	pop	{r7, pc}

08001254 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001258:	2029      	movs	r0, #41	; 0x29
 800125a:	f000 f809 	bl	8001270 <ili9341_WriteReg>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}

08001262 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001266:	2028      	movs	r0, #40	; 0x28
 8001268:	f000 f802 	bl	8001270 <ili9341_WriteReg>
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f98d 	bl	800159c <LCD_IO_WriteReg>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f95e 	bl	8001558 <LCD_IO_WriteData>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	460a      	mov	r2, r1
 80012ae:	80fb      	strh	r3, [r7, #6]
 80012b0:	4613      	mov	r3, r2
 80012b2:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80012b4:	797a      	ldrb	r2, [r7, #5]
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f990 	bl	80015e0 <LCD_IO_ReadData>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80012ce:	23f0      	movs	r3, #240	; 0xf0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80012de:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80012f0:	4819      	ldr	r0, [pc, #100]	; (8001358 <SPIx_Init+0x6c>)
 80012f2:	f004 f9a3 	bl	800563c <HAL_SPI_GetState>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d12b      	bne.n	8001354 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <SPIx_Init+0x6c>)
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <SPIx_Init+0x70>)
 8001300:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <SPIx_Init+0x6c>)
 8001304:	2218      	movs	r2, #24
 8001306:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <SPIx_Init+0x6c>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <SPIx_Init+0x6c>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <SPIx_Init+0x6c>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <SPIx_Init+0x6c>)
 800131c:	2200      	movs	r2, #0
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <SPIx_Init+0x6c>)
 8001322:	2207      	movs	r2, #7
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <SPIx_Init+0x6c>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <SPIx_Init+0x6c>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <SPIx_Init+0x6c>)
 8001334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001338:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <SPIx_Init+0x6c>)
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <SPIx_Init+0x6c>)
 8001342:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001346:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <SPIx_Init+0x6c>)
 800134a:	f000 f853 	bl	80013f4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800134e:	4802      	ldr	r0, [pc, #8]	; (8001358 <SPIx_Init+0x6c>)
 8001350:	f003 fd09 	bl	8004d66 <HAL_SPI_Init>
  } 
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000240 	.word	0x20000240
 800135c:	40015000 	.word	0x40015000

08001360 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <SPIx_Read+0x38>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f107 0108 	add.w	r1, r7, #8
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <SPIx_Read+0x3c>)
 800137c:	f003 feb3 	bl	80050e6 <HAL_SPI_Receive>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800138a:	f000 f827 	bl	80013dc <SPIx_Error>
  }
  
  return readvalue;
 800138e:	68bb      	ldr	r3, [r7, #8]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000038 	.word	0x20000038
 800139c:	20000240 	.word	0x20000240

080013a0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <SPIx_Write+0x34>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	1db9      	adds	r1, r7, #6
 80013b4:	2201      	movs	r2, #1
 80013b6:	4808      	ldr	r0, [pc, #32]	; (80013d8 <SPIx_Write+0x38>)
 80013b8:	f003 fd61 	bl	8004e7e <HAL_SPI_Transmit>
 80013bc:	4603      	mov	r3, r0
 80013be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80013c6:	f000 f809 	bl	80013dc <SPIx_Error>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000038 	.word	0x20000038
 80013d8:	20000240 	.word	0x20000240

080013dc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <SPIx_Error+0x14>)
 80013e2:	f003 fd24 	bl	8004e2e <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80013e6:	f7ff ff81 	bl	80012ec <SPIx_Init>
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000240 	.word	0x20000240

080013f4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <SPIx_MspInit+0x6c>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	4a16      	ldr	r2, [pc, #88]	; (8001460 <SPIx_MspInit+0x6c>)
 8001406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800140a:	6453      	str	r3, [r2, #68]	; 0x44
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <SPIx_MspInit+0x6c>)
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <SPIx_MspInit+0x6c>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <SPIx_MspInit+0x6c>)
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	6313      	str	r3, [r2, #48]	; 0x30
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <SPIx_MspInit+0x6c>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	f003 0320 	and.w	r3, r3, #32
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001434:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800143e:	2302      	movs	r3, #2
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001442:	2301      	movs	r3, #1
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001446:	2305      	movs	r3, #5
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <SPIx_MspInit+0x70>)
 8001452:	f001 fe9f 	bl	8003194 <HAL_GPIO_Init>
}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40021400 	.word	0x40021400

08001468 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800146e:	4b36      	ldr	r3, [pc, #216]	; (8001548 <LCD_IO_Init+0xe0>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d164      	bne.n	8001540 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <LCD_IO_Init+0xe0>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <LCD_IO_Init+0xe4>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	4a31      	ldr	r2, [pc, #196]	; (800154c <LCD_IO_Init+0xe4>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6313      	str	r3, [r2, #48]	; 0x30
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <LCD_IO_Init+0xe4>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	4619      	mov	r1, r3
 80014b0:	4827      	ldr	r0, [pc, #156]	; (8001550 <LCD_IO_Init+0xe8>)
 80014b2:	f001 fe6f 	bl	8003194 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <LCD_IO_Init+0xe4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a23      	ldr	r2, [pc, #140]	; (800154c <LCD_IO_Init+0xe4>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <LCD_IO_Init+0xe4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80014d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	4819      	ldr	r0, [pc, #100]	; (8001550 <LCD_IO_Init+0xe8>)
 80014ec:	f001 fe52 	bl	8003194 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <LCD_IO_Init+0xe4>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <LCD_IO_Init+0xe4>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <LCD_IO_Init+0xe4>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800150c:	2304      	movs	r3, #4
 800150e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001518:	2302      	movs	r3, #2
 800151a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	480c      	ldr	r0, [pc, #48]	; (8001554 <LCD_IO_Init+0xec>)
 8001524:	f001 fe36 	bl	8003194 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001528:	2200      	movs	r2, #0
 800152a:	2104      	movs	r1, #4
 800152c:	4809      	ldr	r0, [pc, #36]	; (8001554 <LCD_IO_Init+0xec>)
 800152e:	f002 f8fd 	bl	800372c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001532:	2201      	movs	r2, #1
 8001534:	2104      	movs	r1, #4
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <LCD_IO_Init+0xec>)
 8001538:	f002 f8f8 	bl	800372c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800153c:	f7ff fed6 	bl	80012ec <SPIx_Init>
  }
}
 8001540:	bf00      	nop
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000298 	.word	0x20000298
 800154c:	40023800 	.word	0x40023800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40020800 	.word	0x40020800

08001558 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001562:	2201      	movs	r2, #1
 8001564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001568:	480a      	ldr	r0, [pc, #40]	; (8001594 <LCD_IO_WriteData+0x3c>)
 800156a:	f002 f8df 	bl	800372c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800156e:	2200      	movs	r2, #0
 8001570:	2104      	movs	r1, #4
 8001572:	4809      	ldr	r0, [pc, #36]	; (8001598 <LCD_IO_WriteData+0x40>)
 8001574:	f002 f8da 	bl	800372c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff10 	bl	80013a0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001580:	2201      	movs	r2, #1
 8001582:	2104      	movs	r1, #4
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <LCD_IO_WriteData+0x40>)
 8001586:	f002 f8d1 	bl	800372c <HAL_GPIO_WritePin>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40020800 	.word	0x40020800

0800159c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ac:	480a      	ldr	r0, [pc, #40]	; (80015d8 <LCD_IO_WriteReg+0x3c>)
 80015ae:	f002 f8bd 	bl	800372c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80015b2:	2200      	movs	r2, #0
 80015b4:	2104      	movs	r1, #4
 80015b6:	4809      	ldr	r0, [pc, #36]	; (80015dc <LCD_IO_WriteReg+0x40>)
 80015b8:	f002 f8b8 	bl	800372c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff feed 	bl	80013a0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80015c6:	2201      	movs	r2, #1
 80015c8:	2104      	movs	r1, #4
 80015ca:	4804      	ldr	r0, [pc, #16]	; (80015dc <LCD_IO_WriteReg+0x40>)
 80015cc:	f002 f8ae 	bl	800372c <HAL_GPIO_WritePin>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	40020800 	.word	0x40020800

080015e0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	460a      	mov	r2, r1
 80015ea:	80fb      	strh	r3, [r7, #6]
 80015ec:	4613      	mov	r3, r2
 80015ee:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80015f4:	2200      	movs	r2, #0
 80015f6:	2104      	movs	r1, #4
 80015f8:	4810      	ldr	r0, [pc, #64]	; (800163c <LCD_IO_ReadData+0x5c>)
 80015fa:	f002 f897 	bl	800372c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001604:	480e      	ldr	r0, [pc, #56]	; (8001640 <LCD_IO_ReadData+0x60>)
 8001606:	f002 f891 	bl	800372c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fec7 	bl	80013a0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001612:	797b      	ldrb	r3, [r7, #5]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fea3 	bl	8001360 <SPIx_Read>
 800161a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001622:	4807      	ldr	r0, [pc, #28]	; (8001640 <LCD_IO_ReadData+0x60>)
 8001624:	f002 f882 	bl	800372c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001628:	2201      	movs	r2, #1
 800162a:	2104      	movs	r1, #4
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <LCD_IO_ReadData+0x5c>)
 800162e:	f002 f87d 	bl	800372c <HAL_GPIO_WritePin>
  
  return readvalue;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00

08001644 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f001 f825 	bl	800269c <HAL_Delay>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001662:	4a2e      	ldr	r2, [pc, #184]	; (800171c <BSP_LCD_Init+0xc0>)
 8001664:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001666:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001668:	2209      	movs	r2, #9
 800166a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <BSP_LCD_Init+0xbc>)
 800166e:	2201      	movs	r2, #1
 8001670:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001672:	4b29      	ldr	r3, [pc, #164]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001674:	221d      	movs	r2, #29
 8001676:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <BSP_LCD_Init+0xbc>)
 800167a:	2203      	movs	r2, #3
 800167c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001680:	f240 120d 	movw	r2, #269	; 0x10d
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001686:	4b24      	ldr	r3, [pc, #144]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001688:	f240 1243 	movw	r2, #323	; 0x143
 800168c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001690:	f240 1217 	movw	r2, #279	; 0x117
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001698:	f240 1247 	movw	r2, #327	; 0x147
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <BSP_LCD_Init+0xc4>)
 80016b8:	2208      	movs	r2, #8
 80016ba:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <BSP_LCD_Init+0xc4>)
 80016be:	22c0      	movs	r2, #192	; 0xc0
 80016c0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <BSP_LCD_Init+0xc4>)
 80016c4:	2204      	movs	r2, #4
 80016c6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <BSP_LCD_Init+0xc4>)
 80016ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80016d0:	4813      	ldr	r0, [pc, #76]	; (8001720 <BSP_LCD_Init+0xc4>)
 80016d2:	f003 f925 	bl	8004920 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80016ee:	f000 fbab 	bl	8001e48 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80016f2:	4809      	ldr	r0, [pc, #36]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016f4:	f002 f9d8 	bl	8003aa8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <BSP_LCD_Init+0xc8>)
 80016fa:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <BSP_LCD_Init+0xcc>)
 80016fc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <BSP_LCD_Init+0xc8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001706:	f000 fd8d 	bl	8002224 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800170a:	4808      	ldr	r0, [pc, #32]	; (800172c <BSP_LCD_Init+0xd0>)
 800170c:	f000 f8be 	bl	800188c <BSP_LCD_SetFont>

  return LCD_OK;
 8001710:	2300      	movs	r3, #0
}  
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000404 	.word	0x20000404
 800171c:	40016800 	.word	0x40016800
 8001720:	200002dc 	.word	0x200002dc
 8001724:	200004ac 	.word	0x200004ac
 8001728:	20000000 	.word	0x20000000
 800172c:	2000003c 	.word	0x2000003c

08001730 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <BSP_LCD_GetXSize+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	4798      	blx	r3
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200004ac 	.word	0x200004ac

08001748 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <BSP_LCD_GetYSize+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	4798      	blx	r3
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200004ac 	.word	0x200004ac

08001760 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001760:	b580      	push	{r7, lr}
 8001762:	b090      	sub	sp, #64	; 0x40
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001770:	f7ff ffde 	bl	8001730 <BSP_LCD_GetXSize>
 8001774:	4603      	mov	r3, r0
 8001776:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800177c:	f7ff ffe4 	bl	8001748 <BSP_LCD_GetYSize>
 8001780:	4603      	mov	r3, r0
 8001782:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800178c:	23ff      	movs	r3, #255	; 0xff
 800178e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80017a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80017ac:	2307      	movs	r3, #7
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80017b0:	f7ff ffbe 	bl	8001730 <BSP_LCD_GetXSize>
 80017b4:	4603      	mov	r3, r0
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80017b8:	f7ff ffc6 	bl	8001748 <BSP_LCD_GetYSize>
 80017bc:	4603      	mov	r3, r0
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	4619      	mov	r1, r3
 80017c8:	4814      	ldr	r0, [pc, #80]	; (800181c <BSP_LCD_LayerDefaultInit+0xbc>)
 80017ca:	f002 fa3d 	bl	8003c48 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80017ce:	88fa      	ldrh	r2, [r7, #6]
 80017d0:	4913      	ldr	r1, [pc, #76]	; (8001820 <BSP_LCD_LayerDefaultInit+0xc0>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	3304      	adds	r3, #4
 80017de:	f04f 32ff 	mov.w	r2, #4294967295
 80017e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80017e4:	88fa      	ldrh	r2, [r7, #6]
 80017e6:	490e      	ldr	r1, [pc, #56]	; (8001820 <BSP_LCD_LayerDefaultInit+0xc0>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	3308      	adds	r3, #8
 80017f4:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <BSP_LCD_LayerDefaultInit+0xc4>)
 80017f6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80017f8:	88fa      	ldrh	r2, [r7, #6]
 80017fa:	4909      	ldr	r1, [pc, #36]	; (8001820 <BSP_LCD_LayerDefaultInit+0xc0>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800180a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <BSP_LCD_LayerDefaultInit+0xbc>)
 800180e:	f002 fa59 	bl	8003cc4 <HAL_LTDC_EnableDither>
}
 8001812:	bf00      	nop
 8001814:	3740      	adds	r7, #64	; 0x40
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000404 	.word	0x20000404
 8001820:	20000310 	.word	0x20000310
 8001824:	2000003c 	.word	0x2000003c

08001828 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <BSP_LCD_SetTextColor+0x28>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <BSP_LCD_SetTextColor+0x2c>)
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	2000030c 	.word	0x2000030c
 8001854:	20000310 	.word	0x20000310

08001858 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <BSP_LCD_SetBackColor+0x2c>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4908      	ldr	r1, [pc, #32]	; (8001888 <BSP_LCD_SetBackColor+0x30>)
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	3304      	adds	r3, #4
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	601a      	str	r2, [r3, #0]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	2000030c 	.word	0x2000030c
 8001888:	20000310 	.word	0x20000310

0800188c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <BSP_LCD_SetFont+0x2c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4908      	ldr	r1, [pc, #32]	; (80018bc <BSP_LCD_SetFont+0x30>)
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	3308      	adds	r3, #8
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2000030c 	.word	0x2000030c
 80018bc:	20000310 	.word	0x20000310

080018c0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <BSP_LCD_GetFont+0x24>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <BSP_LCD_GetFont+0x28>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3308      	adds	r3, #8
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	2000030c 	.word	0x2000030c
 80018e8:	20000310 	.word	0x20000310

080018ec <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <BSP_LCD_Clear+0x48>)
 80018f6:	681c      	ldr	r4, [r3, #0]
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <BSP_LCD_Clear+0x48>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <BSP_LCD_Clear+0x4c>)
 80018fe:	2134      	movs	r1, #52	; 0x34
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	335c      	adds	r3, #92	; 0x5c
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461d      	mov	r5, r3
 800190c:	f7ff ff10 	bl	8001730 <BSP_LCD_GetXSize>
 8001910:	4606      	mov	r6, r0
 8001912:	f7ff ff19 	bl	8001748 <BSP_LCD_GetYSize>
 8001916:	4602      	mov	r2, r0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2300      	movs	r3, #0
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	4613      	mov	r3, r2
 8001922:	4632      	mov	r2, r6
 8001924:	4629      	mov	r1, r5
 8001926:	4620      	mov	r0, r4
 8001928:	f000 fc44 	bl	80021b4 <FillBuffer>
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001934:	2000030c 	.word	0x2000030c
 8001938:	20000404 	.word	0x20000404

0800193c <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line.
  * @param  Line: the line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <BSP_LCD_ClearStringLine+0xc0>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	492d      	ldr	r1, [pc, #180]	; (8001a00 <BSP_LCD_ClearStringLine+0xc4>)
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <BSP_LCD_ClearStringLine+0xc0>)
 800195a:	6819      	ldr	r1, [r3, #0]
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <BSP_LCD_ClearStringLine+0xc0>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4827      	ldr	r0, [pc, #156]	; (8001a00 <BSP_LCD_ClearStringLine+0xc4>)
 8001962:	460b      	mov	r3, r1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	440b      	add	r3, r1
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4403      	add	r3, r0
 800196c:	3304      	adds	r3, #4
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	4823      	ldr	r0, [pc, #140]	; (8001a00 <BSP_LCD_ClearStringLine+0xc4>)
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4403      	add	r3, r0
 800197c:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <BSP_LCD_ClearStringLine+0xc0>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	491f      	ldr	r1, [pc, #124]	; (8001a00 <BSP_LCD_ClearStringLine+0xc4>)
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	3308      	adds	r3, #8
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	88da      	ldrh	r2, [r3, #6]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	b29b      	uxth	r3, r3
 8001998:	fb12 f303 	smulbb	r3, r2, r3
 800199c:	b29c      	uxth	r4, r3
 800199e:	f7ff fec7 	bl	8001730 <BSP_LCD_GetXSize>
 80019a2:	4603      	mov	r3, r0
 80019a4:	b298      	uxth	r0, r3
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <BSP_LCD_ClearStringLine+0xc0>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4915      	ldr	r1, [pc, #84]	; (8001a00 <BSP_LCD_ClearStringLine+0xc4>)
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	3308      	adds	r3, #8
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	88db      	ldrh	r3, [r3, #6]
 80019bc:	4602      	mov	r2, r0
 80019be:	4621      	mov	r1, r4
 80019c0:	2000      	movs	r0, #0
 80019c2:	f000 f9e7 	bl	8001d94 <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = colorbackup;
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <BSP_LCD_ClearStringLine+0xc0>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	490d      	ldr	r1, [pc, #52]	; (8001a00 <BSP_LCD_ClearStringLine+0xc4>)
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <BSP_LCD_ClearStringLine+0xc0>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <BSP_LCD_ClearStringLine+0xc4>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff1b 	bl	8001828 <BSP_LCD_SetTextColor>
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd90      	pop	{r4, r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000030c 	.word	0x2000030c
 8001a00:	20000310 	.word	0x20000310

08001a04 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	80bb      	strh	r3, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001a16:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <BSP_LCD_DisplayChar+0x80>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	491b      	ldr	r1, [pc, #108]	; (8001a88 <BSP_LCD_DisplayChar+0x84>)
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	3308      	adds	r3, #8
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <BSP_LCD_DisplayChar+0x80>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4c14      	ldr	r4, [pc, #80]	; (8001a88 <BSP_LCD_DisplayChar+0x84>)
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4423      	add	r3, r4
 8001a42:	3308      	adds	r3, #8
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001a48:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <BSP_LCD_DisplayChar+0x80>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4c0d      	ldr	r4, [pc, #52]	; (8001a88 <BSP_LCD_DisplayChar+0x84>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4423      	add	r3, r4
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	889b      	ldrh	r3, [r3, #4]
 8001a62:	3307      	adds	r3, #7
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da00      	bge.n	8001a6a <BSP_LCD_DisplayChar+0x66>
 8001a68:	3307      	adds	r3, #7
 8001a6a:	10db      	asrs	r3, r3, #3
 8001a6c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001a70:	18ca      	adds	r2, r1, r3
 8001a72:	88b9      	ldrh	r1, [r7, #4]
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fae2 	bl	8002040 <DrawChar>
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd90      	pop	{r4, r7, pc}
 8001a84:	2000030c 	.word	0x2000030c
 8001a88:	20000310 	.word	0x20000310

08001a8c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001a8c:	b5b0      	push	{r4, r5, r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60ba      	str	r2, [r7, #8]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4603      	mov	r3, r0
 8001a98:	81fb      	strh	r3, [r7, #14]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	81bb      	strh	r3, [r7, #12]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	83fb      	strh	r3, [r7, #30]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001ab6:	e002      	b.n	8001abe <BSP_LCD_DisplayStringAt+0x32>
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	3301      	adds	r3, #1
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	617a      	str	r2, [r7, #20]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f6      	bne.n	8001ab8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001aca:	f7ff fe31 	bl	8001730 <BSP_LCD_GetXSize>
 8001ace:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <BSP_LCD_DisplayStringAt+0x16c>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	494a      	ldr	r1, [pc, #296]	; (8001bfc <BSP_LCD_DisplayStringAt+0x170>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	3308      	adds	r3, #8
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	889b      	ldrh	r3, [r3, #4]
 8001ae4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae8:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d01c      	beq.n	8001b2a <BSP_LCD_DisplayStringAt+0x9e>
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d017      	beq.n	8001b24 <BSP_LCD_DisplayStringAt+0x98>
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d12e      	bne.n	8001b56 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	1ad1      	subs	r1, r2, r3
 8001afe:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <BSP_LCD_DisplayStringAt+0x16c>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	483e      	ldr	r0, [pc, #248]	; (8001bfc <BSP_LCD_DisplayStringAt+0x170>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4403      	add	r3, r0
 8001b0e:	3308      	adds	r3, #8
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	889b      	ldrh	r3, [r3, #4]
 8001b14:	fb03 f301 	mul.w	r3, r3, r1
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	4413      	add	r3, r2
 8001b20:	83fb      	strh	r3, [r7, #30]
      break;
 8001b22:	e01b      	b.n	8001b5c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8001b24:	89fb      	ldrh	r3, [r7, #14]
 8001b26:	83fb      	strh	r3, [r7, #30]
      break;
 8001b28:	e018      	b.n	8001b5c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	b299      	uxth	r1, r3
 8001b32:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <BSP_LCD_DisplayStringAt+0x16c>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4831      	ldr	r0, [pc, #196]	; (8001bfc <BSP_LCD_DisplayStringAt+0x170>)
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4403      	add	r3, r0
 8001b42:	3308      	adds	r3, #8
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	889b      	ldrh	r3, [r3, #4]
 8001b48:	fb11 f303 	smulbb	r3, r1, r3
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	4413      	add	r3, r2
 8001b52:	83fb      	strh	r3, [r7, #30]
      break;
 8001b54:	e002      	b.n	8001b5c <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8001b56:	89fb      	ldrh	r3, [r7, #14]
 8001b58:	83fb      	strh	r3, [r7, #30]
      break;
 8001b5a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001b5c:	e01a      	b.n	8001b94 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	89b9      	ldrh	r1, [r7, #12]
 8001b64:	8bfb      	ldrh	r3, [r7, #30]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff4c 	bl	8001a04 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001b6c:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <BSP_LCD_DisplayStringAt+0x16c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4922      	ldr	r1, [pc, #136]	; (8001bfc <BSP_LCD_DisplayStringAt+0x170>)
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	889a      	ldrh	r2, [r3, #4]
 8001b82:	8bfb      	ldrh	r3, [r7, #30]
 8001b84:	4413      	add	r3, r2
 8001b86:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	60bb      	str	r3, [r7, #8]
    i++;
 8001b8e:	8bbb      	ldrh	r3, [r7, #28]
 8001b90:	3301      	adds	r3, #1
 8001b92:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf14      	ite	ne
 8001b9c:	2301      	movne	r3, #1
 8001b9e:	2300      	moveq	r3, #0
 8001ba0:	b2dc      	uxtb	r4, r3
 8001ba2:	f7ff fdc5 	bl	8001730 <BSP_LCD_GetXSize>
 8001ba6:	4605      	mov	r5, r0
 8001ba8:	8bb9      	ldrh	r1, [r7, #28]
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <BSP_LCD_DisplayStringAt+0x16c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4813      	ldr	r0, [pc, #76]	; (8001bfc <BSP_LCD_DisplayStringAt+0x170>)
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4403      	add	r3, r0
 8001bba:	3308      	adds	r3, #8
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	889b      	ldrh	r3, [r3, #4]
 8001bc0:	fb03 f301 	mul.w	r3, r3, r1
 8001bc4:	1aeb      	subs	r3, r5, r3
 8001bc6:	b299      	uxth	r1, r3
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <BSP_LCD_DisplayStringAt+0x16c>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	480b      	ldr	r0, [pc, #44]	; (8001bfc <BSP_LCD_DisplayStringAt+0x170>)
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4403      	add	r3, r0
 8001bd8:	3308      	adds	r3, #8
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	889b      	ldrh	r3, [r3, #4]
 8001bde:	4299      	cmp	r1, r3
 8001be0:	bf2c      	ite	cs
 8001be2:	2301      	movcs	r3, #1
 8001be4:	2300      	movcc	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4023      	ands	r3, r4
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1b6      	bne.n	8001b5e <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf8:	2000030c 	.word	0x2000030c
 8001bfc:	20000310 	.word	0x20000310

08001c00 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001c0c:	f7ff fe58 	bl	80018c0 <BSP_LCD_GetFont>
 8001c10:	4603      	mov	r3, r0
 8001c12:	88db      	ldrh	r3, [r3, #6]
 8001c14:	88fa      	ldrh	r2, [r7, #6]
 8001c16:	fb12 f303 	smulbb	r3, r2, r3
 8001c1a:	b299      	uxth	r1, r3
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff ff33 	bl	8001a8c <BSP_LCD_DisplayStringAt>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	4603      	mov	r3, r0
 8001c38:	80fb      	strh	r3, [r7, #6]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	80bb      	strh	r3, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <BSP_LCD_DrawHLine+0x70>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <BSP_LCD_DrawHLine+0x74>)
 8001c4c:	2134      	movs	r1, #52	; 0x34
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	335c      	adds	r3, #92	; 0x5c
 8001c56:	681c      	ldr	r4, [r3, #0]
 8001c58:	f7ff fd6a 	bl	8001730 <BSP_LCD_GetXSize>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	88bb      	ldrh	r3, [r7, #4]
 8001c60:	fb03 f202 	mul.w	r2, r3, r2
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4423      	add	r3, r4
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <BSP_LCD_DrawHLine+0x70>)
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	68fc      	ldr	r4, [r7, #12]
 8001c74:	887d      	ldrh	r5, [r7, #2]
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <BSP_LCD_DrawHLine+0x70>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	490b      	ldr	r1, [pc, #44]	; (8001ca8 <BSP_LCD_DrawHLine+0x78>)
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	462a      	mov	r2, r5
 8001c92:	4621      	mov	r1, r4
 8001c94:	f000 fa8e 	bl	80021b4 <FillBuffer>
}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca0:	2000030c 	.word	0x2000030c
 8001ca4:	20000404 	.word	0x20000404
 8001ca8:	20000310 	.word	0x20000310

08001cac <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	80bb      	strh	r3, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <BSP_LCD_DrawVLine+0x78>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <BSP_LCD_DrawVLine+0x7c>)
 8001cc8:	2134      	movs	r1, #52	; 0x34
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	335c      	adds	r3, #92	; 0x5c
 8001cd2:	681c      	ldr	r4, [r3, #0]
 8001cd4:	f7ff fd2c 	bl	8001730 <BSP_LCD_GetXSize>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	88bb      	ldrh	r3, [r7, #4]
 8001cdc:	fb03 f202 	mul.w	r2, r3, r2
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4423      	add	r3, r4
 8001ce8:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <BSP_LCD_DrawVLine+0x78>)
 8001cec:	681c      	ldr	r4, [r3, #0]
 8001cee:	68fd      	ldr	r5, [r7, #12]
 8001cf0:	887e      	ldrh	r6, [r7, #2]
 8001cf2:	f7ff fd1d 	bl	8001730 <BSP_LCD_GetXSize>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	1e59      	subs	r1, r3, #1
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <BSP_LCD_DrawVLine+0x78>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	480b      	ldr	r0, [pc, #44]	; (8001d2c <BSP_LCD_DrawVLine+0x80>)
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4403      	add	r3, r0
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	9100      	str	r1, [sp, #0]
 8001d10:	4633      	mov	r3, r6
 8001d12:	2201      	movs	r2, #1
 8001d14:	4629      	mov	r1, r5
 8001d16:	4620      	mov	r0, r4
 8001d18:	f000 fa4c 	bl	80021b4 <FillBuffer>
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d24:	2000030c 	.word	0x2000030c
 8001d28:	20000404 	.word	0x20000404
 8001d2c:	20000310 	.word	0x20000310

08001d30 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4604      	mov	r4, r0
 8001d38:	4608      	mov	r0, r1
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4623      	mov	r3, r4
 8001d40:	80fb      	strh	r3, [r7, #6]
 8001d42:	4603      	mov	r3, r0
 8001d44:	80bb      	strh	r3, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	807b      	strh	r3, [r7, #2]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	88b9      	ldrh	r1, [r7, #4]
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff6b 	bl	8001c30 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001d5a:	88ba      	ldrh	r2, [r7, #4]
 8001d5c:	883b      	ldrh	r3, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	b299      	uxth	r1, r3
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff62 	bl	8001c30 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001d6c:	883a      	ldrh	r2, [r7, #0]
 8001d6e:	88b9      	ldrh	r1, [r7, #4]
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff9a 	bl	8001cac <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001d78:	88fa      	ldrh	r2, [r7, #6]
 8001d7a:	887b      	ldrh	r3, [r7, #2]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	883a      	ldrh	r2, [r7, #0]
 8001d82:	88b9      	ldrh	r1, [r7, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff91 	bl	8001cac <BSP_LCD_DrawVLine>
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd90      	pop	{r4, r7, pc}
	...

08001d94 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af02      	add	r7, sp, #8
 8001d9c:	4604      	mov	r4, r0
 8001d9e:	4608      	mov	r0, r1
 8001da0:	4611      	mov	r1, r2
 8001da2:	461a      	mov	r2, r3
 8001da4:	4623      	mov	r3, r4
 8001da6:	80fb      	strh	r3, [r7, #6]
 8001da8:	4603      	mov	r3, r0
 8001daa:	80bb      	strh	r3, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001db8:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <BSP_LCD_FillRect+0xa8>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4920      	ldr	r1, [pc, #128]	; (8001e40 <BSP_LCD_FillRect+0xac>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fd2c 	bl	8001828 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <BSP_LCD_FillRect+0xa8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <BSP_LCD_FillRect+0xb0>)
 8001dd6:	2134      	movs	r1, #52	; 0x34
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	335c      	adds	r3, #92	; 0x5c
 8001de0:	681c      	ldr	r4, [r3, #0]
 8001de2:	f7ff fca5 	bl	8001730 <BSP_LCD_GetXSize>
 8001de6:	4602      	mov	r2, r0
 8001de8:	88bb      	ldrh	r3, [r7, #4]
 8001dea:	fb03 f202 	mul.w	r2, r3, r2
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4423      	add	r3, r4
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <BSP_LCD_FillRect+0xa8>)
 8001dfa:	681c      	ldr	r4, [r3, #0]
 8001dfc:	68fd      	ldr	r5, [r7, #12]
 8001dfe:	887e      	ldrh	r6, [r7, #2]
 8001e00:	f8b7 8000 	ldrh.w	r8, [r7]
 8001e04:	f7ff fc94 	bl	8001730 <BSP_LCD_GetXSize>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	1ad1      	subs	r1, r2, r3
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <BSP_LCD_FillRect+0xa8>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	480b      	ldr	r0, [pc, #44]	; (8001e40 <BSP_LCD_FillRect+0xac>)
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4403      	add	r3, r0
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	9100      	str	r1, [sp, #0]
 8001e24:	4643      	mov	r3, r8
 8001e26:	4632      	mov	r2, r6
 8001e28:	4629      	mov	r1, r5
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f000 f9c2 	bl	80021b4 <FillBuffer>
}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000030c 	.word	0x2000030c
 8001e40:	20000310 	.word	0x20000310
 8001e44:	20000404 	.word	0x20000404

08001e48 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08e      	sub	sp, #56	; 0x38
 8001e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
 8001e52:	4b61      	ldr	r3, [pc, #388]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a60      	ldr	r2, [pc, #384]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001e58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b5e      	ldr	r3, [pc, #376]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	4b5a      	ldr	r3, [pc, #360]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a59      	ldr	r2, [pc, #356]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001e74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b57      	ldr	r3, [pc, #348]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a52      	ldr	r2, [pc, #328]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	4b4c      	ldr	r3, [pc, #304]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a4b      	ldr	r2, [pc, #300]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a44      	ldr	r2, [pc, #272]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b42      	ldr	r3, [pc, #264]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a3d      	ldr	r2, [pc, #244]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a36      	ldr	r2, [pc, #216]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001f00:	f043 0320 	orr.w	r3, r3, #32
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a2f      	ldr	r2, [pc, #188]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <BSP_LCD_MspInit+0x190>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001f2e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001f40:	230e      	movs	r3, #14
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4824      	ldr	r0, [pc, #144]	; (8001fdc <BSP_LCD_MspInit+0x194>)
 8001f4c:	f001 f922 	bl	8003194 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001f50:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4820      	ldr	r0, [pc, #128]	; (8001fe0 <BSP_LCD_MspInit+0x198>)
 8001f5e:	f001 f919 	bl	8003194 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001f62:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	481d      	ldr	r0, [pc, #116]	; (8001fe4 <BSP_LCD_MspInit+0x19c>)
 8001f70:	f001 f910 	bl	8003194 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001f74:	2348      	movs	r3, #72	; 0x48
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	481a      	ldr	r0, [pc, #104]	; (8001fe8 <BSP_LCD_MspInit+0x1a0>)
 8001f80:	f001 f908 	bl	8003194 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4816      	ldr	r0, [pc, #88]	; (8001fec <BSP_LCD_MspInit+0x1a4>)
 8001f92:	f001 f8ff 	bl	8003194 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001f96:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4813      	ldr	r0, [pc, #76]	; (8001ff0 <BSP_LCD_MspInit+0x1a8>)
 8001fa4:	f001 f8f6 	bl	8003194 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001fac:	2309      	movs	r3, #9
 8001fae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	480a      	ldr	r0, [pc, #40]	; (8001fe0 <BSP_LCD_MspInit+0x198>)
 8001fb8:	f001 f8ec 	bl	8003194 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001fbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4809      	ldr	r0, [pc, #36]	; (8001ff0 <BSP_LCD_MspInit+0x1a8>)
 8001fca:	f001 f8e3 	bl	8003194 <HAL_GPIO_Init>
}
 8001fce:	bf00      	nop
 8001fd0:	3738      	adds	r7, #56	; 0x38
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40020800 	.word	0x40020800
 8001fe8:	40020c00 	.word	0x40020c00
 8001fec:	40021400 	.word	0x40021400
 8001ff0:	40021800 	.word	0x40021800

08001ff4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	603a      	str	r2, [r7, #0]
 8001ffe:	80fb      	strh	r3, [r7, #6]
 8002000:	460b      	mov	r3, r1
 8002002:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <BSP_LCD_DrawPixel+0x44>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0c      	ldr	r2, [pc, #48]	; (800203c <BSP_LCD_DrawPixel+0x48>)
 800200a:	2134      	movs	r1, #52	; 0x34
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	335c      	adds	r3, #92	; 0x5c
 8002014:	681c      	ldr	r4, [r3, #0]
 8002016:	88bd      	ldrh	r5, [r7, #4]
 8002018:	f7ff fb8a 	bl	8001730 <BSP_LCD_GetXSize>
 800201c:	4603      	mov	r3, r0
 800201e:	fb03 f205 	mul.w	r2, r3, r5
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4423      	add	r3, r4
 800202a:	461a      	mov	r2, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bdb0      	pop	{r4, r5, r7, pc}
 8002038:	2000030c 	.word	0x2000030c
 800203c:	20000404 	.word	0x20000404

08002040 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	603a      	str	r2, [r7, #0]
 800204a:	80fb      	strh	r3, [r7, #6]
 800204c:	460b      	mov	r3, r1
 800204e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <DrawChar+0x16c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4953      	ldr	r1, [pc, #332]	; (80021b0 <DrawChar+0x170>)
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	3308      	adds	r3, #8
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	88db      	ldrh	r3, [r3, #6]
 8002072:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002074:	4b4d      	ldr	r3, [pc, #308]	; (80021ac <DrawChar+0x16c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	494d      	ldr	r1, [pc, #308]	; (80021b0 <DrawChar+0x170>)
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	3308      	adds	r3, #8
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	889b      	ldrh	r3, [r3, #4]
 800208a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800208c:	8a3b      	ldrh	r3, [r7, #16]
 800208e:	3307      	adds	r3, #7
 8002090:	2b00      	cmp	r3, #0
 8002092:	da00      	bge.n	8002096 <DrawChar+0x56>
 8002094:	3307      	adds	r3, #7
 8002096:	10db      	asrs	r3, r3, #3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	b2da      	uxtb	r2, r3
 800209e:	8a3b      	ldrh	r3, [r7, #16]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e076      	b.n	800219a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80020ac:	8a3b      	ldrh	r3, [r7, #16]
 80020ae:	3307      	adds	r3, #7
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	da00      	bge.n	80020b6 <DrawChar+0x76>
 80020b4:	3307      	adds	r3, #7
 80020b6:	10db      	asrs	r3, r3, #3
 80020b8:	461a      	mov	r2, r3
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fb03 f302 	mul.w	r3, r3, r2
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80020c6:	8a3b      	ldrh	r3, [r7, #16]
 80020c8:	3307      	adds	r3, #7
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	da00      	bge.n	80020d0 <DrawChar+0x90>
 80020ce:	3307      	adds	r3, #7
 80020d0:	10db      	asrs	r3, r3, #3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d002      	beq.n	80020dc <DrawChar+0x9c>
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d004      	beq.n	80020e4 <DrawChar+0xa4>
 80020da:	e00c      	b.n	80020f6 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	617b      	str	r3, [r7, #20]
      break;
 80020e2:	e016      	b.n	8002112 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	3201      	adds	r2, #1
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
      break;
 80020f4:	e00d      	b.n	8002112 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	041a      	lsls	r2, r3, #16
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	3301      	adds	r3, #1
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	4313      	orrs	r3, r2
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	3202      	adds	r2, #2
 800210a:	7812      	ldrb	r2, [r2, #0]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
      break;
 8002110:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	e036      	b.n	8002186 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002118:	8a3a      	ldrh	r2, [r7, #16]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	1ad2      	subs	r2, r2, r3
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	4413      	add	r3, r2
 8002122:	3b01      	subs	r3, #1
 8002124:	2201      	movs	r2, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	461a      	mov	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d012      	beq.n	800215a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	b29a      	uxth	r2, r3
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	4413      	add	r3, r2
 800213c:	b298      	uxth	r0, r3
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <DrawChar+0x16c>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	491b      	ldr	r1, [pc, #108]	; (80021b0 <DrawChar+0x170>)
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	88bb      	ldrh	r3, [r7, #4]
 8002152:	4619      	mov	r1, r3
 8002154:	f7ff ff4e 	bl	8001ff4 <BSP_LCD_DrawPixel>
 8002158:	e012      	b.n	8002180 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	b29a      	uxth	r2, r3
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	4413      	add	r3, r2
 8002162:	b298      	uxth	r0, r3
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <DrawChar+0x16c>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4911      	ldr	r1, [pc, #68]	; (80021b0 <DrawChar+0x170>)
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3304      	adds	r3, #4
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	88bb      	ldrh	r3, [r7, #4]
 800217a:	4619      	mov	r1, r3
 800217c:	f7ff ff3a 	bl	8001ff4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	3301      	adds	r3, #1
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	8a3b      	ldrh	r3, [r7, #16]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	429a      	cmp	r2, r3
 800218c:	d3c4      	bcc.n	8002118 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800218e:	88bb      	ldrh	r3, [r7, #4]
 8002190:	3301      	adds	r3, #1
 8002192:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3301      	adds	r3, #1
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	8a7b      	ldrh	r3, [r7, #18]
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d384      	bcc.n	80020ac <DrawChar+0x6c>
  }
}
 80021a2:	bf00      	nop
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2000030c 	.word	0x2000030c
 80021b0:	20000310 	.word	0x20000310

080021b4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <FillBuffer+0x68>)
 80021c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021c8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <FillBuffer+0x68>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80021d0:	4a12      	ldr	r2, [pc, #72]	; (800221c <FillBuffer+0x68>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <FillBuffer+0x68>)
 80021d8:	4a11      	ldr	r2, [pc, #68]	; (8002220 <FillBuffer+0x6c>)
 80021da:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80021dc:	480f      	ldr	r0, [pc, #60]	; (800221c <FillBuffer+0x68>)
 80021de:	f000 fd4d 	bl	8002c7c <HAL_DMA2D_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d115      	bne.n	8002214 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80021e8:	68f9      	ldr	r1, [r7, #12]
 80021ea:	480c      	ldr	r0, [pc, #48]	; (800221c <FillBuffer+0x68>)
 80021ec:	f000 fea4 	bl	8002f38 <HAL_DMA2D_ConfigLayer>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10e      	bne.n	8002214 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69f9      	ldr	r1, [r7, #28]
 8002200:	4806      	ldr	r0, [pc, #24]	; (800221c <FillBuffer+0x68>)
 8002202:	f000 fd84 	bl	8002d0e <HAL_DMA2D_Start>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d103      	bne.n	8002214 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800220c:	210a      	movs	r1, #10
 800220e:	4803      	ldr	r0, [pc, #12]	; (800221c <FillBuffer+0x68>)
 8002210:	f000 fda8 	bl	8002d64 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	2000029c 	.word	0x2000029c
 8002220:	4002b000 	.word	0x4002b000

08002224 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002228:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800222a:	4a2a      	ldr	r2, [pc, #168]	; (80022d4 <BSP_SDRAM_Init+0xb0>)
 800222c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002230:	2202      	movs	r2, #2
 8002232:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002236:	2207      	movs	r2, #7
 8002238:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800223a:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 800223c:	2204      	movs	r2, #4
 800223e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002242:	2207      	movs	r2, #7
 8002244:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002248:	2202      	movs	r2, #2
 800224a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 800224e:	2202      	movs	r2, #2
 8002250:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002252:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002254:	2202      	movs	r2, #2
 8002256:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800225a:	2201      	movs	r2, #1
 800225c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002266:	2204      	movs	r2, #4
 8002268:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800226c:	2210      	movs	r2, #16
 800226e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002278:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800227c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002280:	2200      	movs	r2, #0
 8002282:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800228a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800228e:	2200      	movs	r2, #0
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002294:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800229a:	2100      	movs	r1, #0
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800229e:	f000 f87f 	bl	80023a0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80022a2:	490d      	ldr	r1, [pc, #52]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 80022a4:	480a      	ldr	r0, [pc, #40]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 80022a6:	f002 fcdf 	bl	8004c68 <HAL_SDRAM_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <BSP_SDRAM_Init+0xb8>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e002      	b.n	80022be <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <BSP_SDRAM_Init+0xb8>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80022be:	f240 506a 	movw	r0, #1386	; 0x56a
 80022c2:	f000 f80d 	bl	80022e0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <BSP_SDRAM_Init+0xb8>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000328 	.word	0x20000328
 80022d4:	a0000140 	.word	0xa0000140
 80022d8:	2000035c 	.word	0x2000035c
 80022dc:	20000044 	.word	0x20000044

080022e0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80022f2:	4b29      	ldr	r3, [pc, #164]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f4:	2208      	movs	r2, #8
 80022f6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002308:	4923      	ldr	r1, [pc, #140]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800230a:	4824      	ldr	r0, [pc, #144]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800230c:	f002 fce0 	bl	8004cd0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002310:	2001      	movs	r0, #1
 8002312:	f000 f9c3 	bl	800269c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002318:	2202      	movs	r2, #2
 800231a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800231c:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800231e:	2208      	movs	r2, #8
 8002320:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002324:	2201      	movs	r2, #1
 8002326:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800232e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002332:	4919      	ldr	r1, [pc, #100]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002334:	4819      	ldr	r0, [pc, #100]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002336:	f002 fccb 	bl	8004cd0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800233c:	2203      	movs	r2, #3
 800233e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002342:	2208      	movs	r2, #8
 8002344:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002348:	2204      	movs	r2, #4
 800234a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002356:	4910      	ldr	r1, [pc, #64]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002358:	4810      	ldr	r0, [pc, #64]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800235a:	f002 fcb9 	bl	8004cd0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800235e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002362:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002366:	2204      	movs	r2, #4
 8002368:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800236c:	2208      	movs	r2, #8
 800236e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002372:	2201      	movs	r2, #1
 8002374:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800237a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800237c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002380:	4905      	ldr	r1, [pc, #20]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002382:	4806      	ldr	r0, [pc, #24]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002384:	f002 fca4 	bl	8004cd0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4804      	ldr	r0, [pc, #16]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800238c:	f002 fccb 	bl	8004d26 <HAL_SDRAM_ProgramRefreshRate>
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000378 	.word	0x20000378
 800239c:	20000328 	.word	0x20000328

080023a0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b090      	sub	sp, #64	; 0x40
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80ec 	beq.w	800258a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b6:	4b77      	ldr	r3, [pc, #476]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	4a76      	ldr	r2, [pc, #472]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6393      	str	r3, [r2, #56]	; 0x38
 80023c2:	4b74      	ldr	r3, [pc, #464]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
 80023d2:	4b70      	ldr	r3, [pc, #448]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a6f      	ldr	r2, [pc, #444]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b6d      	ldr	r3, [pc, #436]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
 80023ee:	4b69      	ldr	r3, [pc, #420]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a68      	ldr	r2, [pc, #416]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b66      	ldr	r3, [pc, #408]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	623b      	str	r3, [r7, #32]
 8002404:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	4b62      	ldr	r3, [pc, #392]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a61      	ldr	r2, [pc, #388]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b5f      	ldr	r3, [pc, #380]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a5a      	ldr	r2, [pc, #360]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b58      	ldr	r3, [pc, #352]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	4b54      	ldr	r3, [pc, #336]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a53      	ldr	r2, [pc, #332]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002448:	f043 0310 	orr.w	r3, r3, #16
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b51      	ldr	r3, [pc, #324]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b4d      	ldr	r3, [pc, #308]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a4c      	ldr	r2, [pc, #304]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002464:	f043 0320 	orr.w	r3, r3, #32
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b46      	ldr	r3, [pc, #280]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a45      	ldr	r2, [pc, #276]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b43      	ldr	r3, [pc, #268]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002496:	2302      	movs	r3, #2
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800249e:	230c      	movs	r3, #12
 80024a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80024a2:	2360      	movs	r3, #96	; 0x60
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80024a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024aa:	4619      	mov	r1, r3
 80024ac:	483a      	ldr	r0, [pc, #232]	; (8002598 <BSP_SDRAM_MspInit+0x1f8>)
 80024ae:	f000 fe71 	bl	8003194 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80024b2:	2301      	movs	r3, #1
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80024b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ba:	4619      	mov	r1, r3
 80024bc:	4837      	ldr	r0, [pc, #220]	; (800259c <BSP_SDRAM_MspInit+0x1fc>)
 80024be:	f000 fe69 	bl	8003194 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80024c2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80024c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024cc:	4619      	mov	r1, r3
 80024ce:	4834      	ldr	r0, [pc, #208]	; (80025a0 <BSP_SDRAM_MspInit+0x200>)
 80024d0:	f000 fe60 	bl	8003194 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80024d4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80024da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024de:	4619      	mov	r1, r3
 80024e0:	4830      	ldr	r0, [pc, #192]	; (80025a4 <BSP_SDRAM_MspInit+0x204>)
 80024e2:	f000 fe57 	bl	8003194 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80024e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80024ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f0:	4619      	mov	r1, r3
 80024f2:	482d      	ldr	r0, [pc, #180]	; (80025a8 <BSP_SDRAM_MspInit+0x208>)
 80024f4:	f000 fe4e 	bl	8003194 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80024f8:	f248 1333 	movw	r3, #33075	; 0x8133
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80024fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002502:	4619      	mov	r1, r3
 8002504:	4829      	ldr	r0, [pc, #164]	; (80025ac <BSP_SDRAM_MspInit+0x20c>)
 8002506:	f000 fe45 	bl	8003194 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 800250c:	2200      	movs	r2, #0
 800250e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800251e:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002524:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002528:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800252c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002530:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002534:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002538:	2200      	movs	r2, #0
 800253a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 800253e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002542:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 800254c:	2203      	movs	r2, #3
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002552:	2200      	movs	r2, #0
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <BSP_SDRAM_MspInit+0x214>)
 8002560:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
 8002568:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800256e:	4810      	ldr	r0, [pc, #64]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002570:	f000 fa76 	bl	8002a60 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002574:	480e      	ldr	r0, [pc, #56]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002576:	f000 f9c5 	bl	8002904 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	210f      	movs	r1, #15
 800257e:	2038      	movs	r0, #56	; 0x38
 8002580:	f000 f989 	bl	8002896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002584:	2038      	movs	r0, #56	; 0x38
 8002586:	f000 f9a2 	bl	80028ce <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800258a:	bf00      	nop
 800258c:	3740      	adds	r7, #64	; 0x40
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	40020400 	.word	0x40020400
 800259c:	40020800 	.word	0x40020800
 80025a0:	40020c00 	.word	0x40020c00
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40021400 	.word	0x40021400
 80025ac:	40021800 	.word	0x40021800
 80025b0:	20000388 	.word	0x20000388
 80025b4:	40026410 	.word	0x40026410

080025b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_Init+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <HAL_Init+0x40>)
 80025c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_Init+0x40>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_Init+0x40>)
 80025ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_Init+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <HAL_Init+0x40>)
 80025da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e0:	2003      	movs	r0, #3
 80025e2:	f000 f94d 	bl	8002880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f000 f808 	bl	80025fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ec:	f004 fa74 	bl	8006ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00

080025fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_InitTick+0x54>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_InitTick+0x58>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002612:	fbb3 f3f1 	udiv	r3, r3, r1
 8002616:	fbb2 f3f3 	udiv	r3, r2, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f965 	bl	80028ea <HAL_SYSTICK_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e00e      	b.n	8002648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b0f      	cmp	r3, #15
 800262e:	d80a      	bhi.n	8002646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002630:	2200      	movs	r2, #0
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	f04f 30ff 	mov.w	r0, #4294967295
 8002638:	f000 f92d 	bl	8002896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800263c:	4a06      	ldr	r2, [pc, #24]	; (8002658 <HAL_InitTick+0x5c>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000050 	.word	0x20000050
 8002654:	2000004c 	.word	0x2000004c
 8002658:	20000048 	.word	0x20000048

0800265c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_IncTick+0x20>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_IncTick+0x24>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4413      	add	r3, r2
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <HAL_IncTick+0x24>)
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	2000004c 	.word	0x2000004c
 8002680:	200004b0 	.word	0x200004b0

08002684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return uwTick;
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <HAL_GetTick+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	200004b0 	.word	0x200004b0

0800269c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff ffee 	bl	8002684 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d005      	beq.n	80026c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_Delay+0x40>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026c2:	bf00      	nop
 80026c4:	f7ff ffde 	bl	8002684 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d8f7      	bhi.n	80026c4 <HAL_Delay+0x28>
  {
  }
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	2000004c 	.word	0x2000004c

080026e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800270c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002712:	4a04      	ldr	r2, [pc, #16]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	60d3      	str	r3, [r2, #12]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <__NVIC_GetPriorityGrouping+0x18>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0307 	and.w	r3, r3, #7
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db0b      	blt.n	800276e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	4907      	ldr	r1, [pc, #28]	; (800277c <__NVIC_EnableIRQ+0x38>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2001      	movs	r0, #1
 8002766:	fa00 f202 	lsl.w	r2, r0, r2
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	490c      	ldr	r1, [pc, #48]	; (80027cc <__NVIC_SetPriority+0x4c>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4908      	ldr	r1, [pc, #32]	; (80027d0 <__NVIC_SetPriority+0x50>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3b04      	subs	r3, #4
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	401a      	ands	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43d9      	mvns	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	4313      	orrs	r3, r2
         );
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	; 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800284c:	d301      	bcc.n	8002852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284e:	2301      	movs	r3, #1
 8002850:	e00f      	b.n	8002872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <SysTick_Config+0x40>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285a:	210f      	movs	r1, #15
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f7ff ff8e 	bl	8002780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <SysTick_Config+0x40>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286a:	4b04      	ldr	r3, [pc, #16]	; (800287c <SysTick_Config+0x40>)
 800286c:	2207      	movs	r2, #7
 800286e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff29 	bl	80026e0 <__NVIC_SetPriorityGrouping>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a8:	f7ff ff3e 	bl	8002728 <__NVIC_GetPriorityGrouping>
 80028ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7ff ff8e 	bl	80027d4 <NVIC_EncodePriority>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff5d 	bl	8002780 <__NVIC_SetPriority>
}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff31 	bl	8002744 <__NVIC_EnableIRQ>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ffa2 	bl	800283c <SysTick_Config>
 80028f8:	4603      	mov	r3, r0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff feb8 	bl	8002684 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e099      	b.n	8002a54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002940:	e00f      	b.n	8002962 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002942:	f7ff fe9f 	bl	8002684 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b05      	cmp	r3, #5
 800294e:	d908      	bls.n	8002962 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2203      	movs	r2, #3
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e078      	b.n	8002a54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e8      	bne.n	8002942 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_DMA_Init+0x158>)
 800297c:	4013      	ands	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800298e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d107      	bne.n	80029cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	4313      	orrs	r3, r2
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f023 0307 	bic.w	r3, r3, #7
 80029e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d117      	bne.n	8002a26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00e      	beq.n	8002a26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f8bd 	bl	8002b88 <DMA_CheckFifoParam>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2240      	movs	r2, #64	; 0x40
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a22:	2301      	movs	r3, #1
 8002a24:	e016      	b.n	8002a54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f874 	bl	8002b1c <DMA_CalcBaseAndBitshift>
 8002a34:	4603      	mov	r3, r0
 8002a36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	223f      	movs	r2, #63	; 0x3f
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	f010803f 	.word	0xf010803f

08002a60 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e050      	b.n	8002b14 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d101      	bne.n	8002a82 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e048      	b.n	8002b14 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2221      	movs	r2, #33	; 0x21
 8002ac0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f82a 	bl	8002b1c <DMA_CalcBaseAndBitshift>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	223f      	movs	r2, #63	; 0x3f
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	3b10      	subs	r3, #16
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <DMA_CalcBaseAndBitshift+0x64>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b36:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <DMA_CalcBaseAndBitshift+0x68>)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d909      	bls.n	8002b5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	1d1a      	adds	r2, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b5c:	e007      	b.n	8002b6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	aaaaaaab 	.word	0xaaaaaaab
 8002b84:	0800c894 	.word	0x0800c894

08002b88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d11f      	bne.n	8002be2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d855      	bhi.n	8002c54 <DMA_CheckFifoParam+0xcc>
 8002ba8:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <DMA_CheckFifoParam+0x28>)
 8002baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bae:	bf00      	nop
 8002bb0:	08002bc1 	.word	0x08002bc1
 8002bb4:	08002bd3 	.word	0x08002bd3
 8002bb8:	08002bc1 	.word	0x08002bc1
 8002bbc:	08002c55 	.word	0x08002c55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d045      	beq.n	8002c58 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd0:	e042      	b.n	8002c58 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bda:	d13f      	bne.n	8002c5c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be0:	e03c      	b.n	8002c5c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bea:	d121      	bne.n	8002c30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d836      	bhi.n	8002c60 <DMA_CheckFifoParam+0xd8>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <DMA_CheckFifoParam+0x70>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c0f 	.word	0x08002c0f
 8002c00:	08002c09 	.word	0x08002c09
 8002c04:	08002c21 	.word	0x08002c21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0c:	e02f      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d024      	beq.n	8002c64 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1e:	e021      	b.n	8002c64 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c28:	d11e      	bne.n	8002c68 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c2e:	e01b      	b.n	8002c68 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d902      	bls.n	8002c3c <DMA_CheckFifoParam+0xb4>
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d003      	beq.n	8002c42 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c3a:	e018      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c40:	e015      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00e      	beq.n	8002c6c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
      break;
 8002c52:	e00b      	b.n	8002c6c <DMA_CheckFifoParam+0xe4>
      break;
 8002c54:	bf00      	nop
 8002c56:	e00a      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;
 8002c58:	bf00      	nop
 8002c5a:	e008      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;
 8002c5c:	bf00      	nop
 8002c5e:	e006      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;
 8002c60:	bf00      	nop
 8002c62:	e004      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;
 8002c64:	bf00      	nop
 8002c66:	e002      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;   
 8002c68:	bf00      	nop
 8002c6a:	e000      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;
 8002c6c:	bf00      	nop
    }
  } 
  
  return status; 
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e03b      	b.n	8002d06 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f003 ff40 	bl	8006b28 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ccc:	f023 0107 	bic.w	r1, r3, #7
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ce6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68d1      	ldr	r1, [r2, #12]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af02      	add	r7, sp, #8
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_DMA2D_Start+0x1c>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e018      	b.n	8002d5c <HAL_DMA2D_Start+0x4e>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f989 	bl	800305c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d056      	beq.n	8002e2e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002d80:	f7ff fc80 	bl	8002684 <HAL_GetTick>
 8002d84:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002d86:	e04b      	b.n	8002e20 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d023      	beq.n	8002de2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da8:	f043 0202 	orr.w	r2, r3, #2
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2221      	movs	r2, #33	; 0x21
 8002dcc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e0a5      	b.n	8002f2e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d01a      	beq.n	8002e20 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002dea:	f7ff fc4b 	bl	8002684 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <HAL_DMA2D_PollForTransfer+0x9c>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10f      	bne.n	8002e20 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2203      	movs	r2, #3
 8002e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e086      	b.n	8002f2e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0ac      	beq.n	8002d88 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d061      	beq.n	8002f14 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e50:	f7ff fc18 	bl	8002684 <HAL_GetTick>
 8002e54:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002e56:	e056      	b.n	8002f06 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02e      	beq.n	8002ec8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	f043 0202 	orr.w	r2, r3, #2
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea4:	f043 0201 	orr.w	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2229      	movs	r2, #41	; 0x29
 8002eb2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e032      	b.n	8002f2e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ece:	d01a      	beq.n	8002f06 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002ed0:	f7ff fbd8 	bl	8002684 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d302      	bcc.n	8002ee6 <HAL_DMA2D_PollForTransfer+0x182>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	f043 0220 	orr.w	r2, r3, #32
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e013      	b.n	8002f2e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0a1      	beq.n	8002e58 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2212      	movs	r2, #18
 8002f1a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_DMA2D_ConfigLayer+0x20>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e079      	b.n	800304c <HAL_DMA2D_ConfigLayer+0x114>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002f82:	4b35      	ldr	r3, [pc, #212]	; (8003058 <HAL_DMA2D_ConfigLayer+0x120>)
 8002f84:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b0a      	cmp	r3, #10
 8002f8c:	d003      	beq.n	8002f96 <HAL_DMA2D_ConfigLayer+0x5e>
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b09      	cmp	r3, #9
 8002f94:	d107      	bne.n	8002fa6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	e005      	b.n	8002fb2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	061b      	lsls	r3, r3, #24
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d120      	bne.n	8002ffa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	ea02 0103 	and.w	r1, r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b0a      	cmp	r3, #10
 8002fe0:	d003      	beq.n	8002fea <HAL_DMA2D_ConfigLayer+0xb2>
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b09      	cmp	r3, #9
 8002fe8:	d127      	bne.n	800303a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ff8:	e01f      	b.n	800303a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	43db      	mvns	r3, r3
 8003004:	ea02 0103 	and.w	r1, r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	430a      	orrs	r2, r1
 8003010:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b0a      	cmp	r3, #10
 8003022:	d003      	beq.n	800302c <HAL_DMA2D_ConfigLayer+0xf4>
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b09      	cmp	r3, #9
 800302a:	d106      	bne.n	800303a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003038:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	ff03000f 	.word	0xff03000f

0800305c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800305c:	b480      	push	{r7}
 800305e:	b08b      	sub	sp, #44	; 0x2c
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	041a      	lsls	r2, r3, #16
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	431a      	orrs	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003094:	d174      	bne.n	8003180 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800309c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030a4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80030ac:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d108      	bne.n	80030ce <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
 80030cc:	e053      	b.n	8003176 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d106      	bne.n	80030e4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	4313      	orrs	r3, r2
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
 80030e2:	e048      	b.n	8003176 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d111      	bne.n	8003110 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	0cdb      	lsrs	r3, r3, #19
 80030f0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	0a9b      	lsrs	r3, r3, #10
 80030f6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	08db      	lsrs	r3, r3, #3
 80030fc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	02db      	lsls	r3, r3, #11
 8003106:	4313      	orrs	r3, r2
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
 800310e:	e032      	b.n	8003176 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d117      	bne.n	8003148 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	0fdb      	lsrs	r3, r3, #31
 800311c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	0cdb      	lsrs	r3, r3, #19
 8003122:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	0adb      	lsrs	r3, r3, #11
 8003128:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	08db      	lsrs	r3, r3, #3
 800312e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	029b      	lsls	r3, r3, #10
 8003138:	431a      	orrs	r2, r3
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	03db      	lsls	r3, r3, #15
 800313e:	4313      	orrs	r3, r2
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
 8003146:	e016      	b.n	8003176 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	0f1b      	lsrs	r3, r3, #28
 800314c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	0d1b      	lsrs	r3, r3, #20
 8003152:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	0b1b      	lsrs	r3, r3, #12
 8003158:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	011a      	lsls	r2, r3, #4
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	431a      	orrs	r2, r3
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	031b      	lsls	r3, r3, #12
 800316e:	4313      	orrs	r3, r2
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800317e:	e003      	b.n	8003188 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	60da      	str	r2, [r3, #12]
}
 8003188:	bf00      	nop
 800318a:	372c      	adds	r7, #44	; 0x2c
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	e177      	b.n	80034a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031b0:	2201      	movs	r2, #1
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	f040 8166 	bne.w	800349a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x4a>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b12      	cmp	r3, #18
 80031dc:	d123      	bne.n	8003226 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	08da      	lsrs	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3208      	adds	r2, #8
 80031e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	220f      	movs	r2, #15
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	08da      	lsrs	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3208      	adds	r2, #8
 8003220:	69b9      	ldr	r1, [r7, #24]
 8003222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	2203      	movs	r2, #3
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0203 	and.w	r2, r3, #3
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d00b      	beq.n	800327a <HAL_GPIO_Init+0xe6>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d007      	beq.n	800327a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800326e:	2b11      	cmp	r3, #17
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b12      	cmp	r3, #18
 8003278:	d130      	bne.n	80032dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	2203      	movs	r2, #3
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032b0:	2201      	movs	r2, #1
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 0201 	and.w	r2, r3, #1
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80c0 	beq.w	800349a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	4b65      	ldr	r3, [pc, #404]	; (80034b4 <HAL_GPIO_Init+0x320>)
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	4a64      	ldr	r2, [pc, #400]	; (80034b4 <HAL_GPIO_Init+0x320>)
 8003324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003328:	6453      	str	r3, [r2, #68]	; 0x44
 800332a:	4b62      	ldr	r3, [pc, #392]	; (80034b4 <HAL_GPIO_Init+0x320>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003336:	4a60      	ldr	r2, [pc, #384]	; (80034b8 <HAL_GPIO_Init+0x324>)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	3302      	adds	r3, #2
 800333e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	220f      	movs	r2, #15
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a57      	ldr	r2, [pc, #348]	; (80034bc <HAL_GPIO_Init+0x328>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d037      	beq.n	80033d2 <HAL_GPIO_Init+0x23e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a56      	ldr	r2, [pc, #344]	; (80034c0 <HAL_GPIO_Init+0x32c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d031      	beq.n	80033ce <HAL_GPIO_Init+0x23a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a55      	ldr	r2, [pc, #340]	; (80034c4 <HAL_GPIO_Init+0x330>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d02b      	beq.n	80033ca <HAL_GPIO_Init+0x236>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a54      	ldr	r2, [pc, #336]	; (80034c8 <HAL_GPIO_Init+0x334>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d025      	beq.n	80033c6 <HAL_GPIO_Init+0x232>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a53      	ldr	r2, [pc, #332]	; (80034cc <HAL_GPIO_Init+0x338>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01f      	beq.n	80033c2 <HAL_GPIO_Init+0x22e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_GPIO_Init+0x33c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d019      	beq.n	80033be <HAL_GPIO_Init+0x22a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a51      	ldr	r2, [pc, #324]	; (80034d4 <HAL_GPIO_Init+0x340>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_GPIO_Init+0x226>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a50      	ldr	r2, [pc, #320]	; (80034d8 <HAL_GPIO_Init+0x344>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00d      	beq.n	80033b6 <HAL_GPIO_Init+0x222>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4f      	ldr	r2, [pc, #316]	; (80034dc <HAL_GPIO_Init+0x348>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d007      	beq.n	80033b2 <HAL_GPIO_Init+0x21e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4e      	ldr	r2, [pc, #312]	; (80034e0 <HAL_GPIO_Init+0x34c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <HAL_GPIO_Init+0x21a>
 80033aa:	2309      	movs	r3, #9
 80033ac:	e012      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033ae:	230a      	movs	r3, #10
 80033b0:	e010      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033b2:	2308      	movs	r3, #8
 80033b4:	e00e      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033b6:	2307      	movs	r3, #7
 80033b8:	e00c      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033ba:	2306      	movs	r3, #6
 80033bc:	e00a      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033be:	2305      	movs	r3, #5
 80033c0:	e008      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033c2:	2304      	movs	r3, #4
 80033c4:	e006      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033c6:	2303      	movs	r3, #3
 80033c8:	e004      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e002      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033d2:	2300      	movs	r3, #0
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	f002 0203 	and.w	r2, r2, #3
 80033da:	0092      	lsls	r2, r2, #2
 80033dc:	4093      	lsls	r3, r2
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e4:	4934      	ldr	r1, [pc, #208]	; (80034b8 <HAL_GPIO_Init+0x324>)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	089b      	lsrs	r3, r3, #2
 80033ea:	3302      	adds	r3, #2
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033f2:	4b3c      	ldr	r3, [pc, #240]	; (80034e4 <HAL_GPIO_Init+0x350>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003416:	4a33      	ldr	r2, [pc, #204]	; (80034e4 <HAL_GPIO_Init+0x350>)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800341c:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <HAL_GPIO_Init+0x350>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003440:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <HAL_GPIO_Init+0x350>)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003446:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <HAL_GPIO_Init+0x350>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800346a:	4a1e      	ldr	r2, [pc, #120]	; (80034e4 <HAL_GPIO_Init+0x350>)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003470:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <HAL_GPIO_Init+0x350>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003494:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <HAL_GPIO_Init+0x350>)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3301      	adds	r3, #1
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b0f      	cmp	r3, #15
 80034a4:	f67f ae84 	bls.w	80031b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a8:	bf00      	nop
 80034aa:	3724      	adds	r7, #36	; 0x24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40013800 	.word	0x40013800
 80034bc:	40020000 	.word	0x40020000
 80034c0:	40020400 	.word	0x40020400
 80034c4:	40020800 	.word	0x40020800
 80034c8:	40020c00 	.word	0x40020c00
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40021400 	.word	0x40021400
 80034d4:	40021800 	.word	0x40021800
 80034d8:	40021c00 	.word	0x40021c00
 80034dc:	40022000 	.word	0x40022000
 80034e0:	40022400 	.word	0x40022400
 80034e4:	40013c00 	.word	0x40013c00

080034e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	e0d9      	b.n	80036b8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003504:	2201      	movs	r2, #1
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	429a      	cmp	r2, r3
 800351c:	f040 80c9 	bne.w	80036b2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003520:	4a6a      	ldr	r2, [pc, #424]	; (80036cc <HAL_GPIO_DeInit+0x1e4>)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	3302      	adds	r3, #2
 8003528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	220f      	movs	r2, #15
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	4013      	ands	r3, r2
 8003540:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a62      	ldr	r2, [pc, #392]	; (80036d0 <HAL_GPIO_DeInit+0x1e8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d037      	beq.n	80035ba <HAL_GPIO_DeInit+0xd2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a61      	ldr	r2, [pc, #388]	; (80036d4 <HAL_GPIO_DeInit+0x1ec>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d031      	beq.n	80035b6 <HAL_GPIO_DeInit+0xce>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a60      	ldr	r2, [pc, #384]	; (80036d8 <HAL_GPIO_DeInit+0x1f0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d02b      	beq.n	80035b2 <HAL_GPIO_DeInit+0xca>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a5f      	ldr	r2, [pc, #380]	; (80036dc <HAL_GPIO_DeInit+0x1f4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d025      	beq.n	80035ae <HAL_GPIO_DeInit+0xc6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a5e      	ldr	r2, [pc, #376]	; (80036e0 <HAL_GPIO_DeInit+0x1f8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01f      	beq.n	80035aa <HAL_GPIO_DeInit+0xc2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a5d      	ldr	r2, [pc, #372]	; (80036e4 <HAL_GPIO_DeInit+0x1fc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d019      	beq.n	80035a6 <HAL_GPIO_DeInit+0xbe>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a5c      	ldr	r2, [pc, #368]	; (80036e8 <HAL_GPIO_DeInit+0x200>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_GPIO_DeInit+0xba>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a5b      	ldr	r2, [pc, #364]	; (80036ec <HAL_GPIO_DeInit+0x204>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00d      	beq.n	800359e <HAL_GPIO_DeInit+0xb6>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a5a      	ldr	r2, [pc, #360]	; (80036f0 <HAL_GPIO_DeInit+0x208>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <HAL_GPIO_DeInit+0xb2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a59      	ldr	r2, [pc, #356]	; (80036f4 <HAL_GPIO_DeInit+0x20c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_GPIO_DeInit+0xae>
 8003592:	2309      	movs	r3, #9
 8003594:	e012      	b.n	80035bc <HAL_GPIO_DeInit+0xd4>
 8003596:	230a      	movs	r3, #10
 8003598:	e010      	b.n	80035bc <HAL_GPIO_DeInit+0xd4>
 800359a:	2308      	movs	r3, #8
 800359c:	e00e      	b.n	80035bc <HAL_GPIO_DeInit+0xd4>
 800359e:	2307      	movs	r3, #7
 80035a0:	e00c      	b.n	80035bc <HAL_GPIO_DeInit+0xd4>
 80035a2:	2306      	movs	r3, #6
 80035a4:	e00a      	b.n	80035bc <HAL_GPIO_DeInit+0xd4>
 80035a6:	2305      	movs	r3, #5
 80035a8:	e008      	b.n	80035bc <HAL_GPIO_DeInit+0xd4>
 80035aa:	2304      	movs	r3, #4
 80035ac:	e006      	b.n	80035bc <HAL_GPIO_DeInit+0xd4>
 80035ae:	2303      	movs	r3, #3
 80035b0:	e004      	b.n	80035bc <HAL_GPIO_DeInit+0xd4>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e002      	b.n	80035bc <HAL_GPIO_DeInit+0xd4>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_GPIO_DeInit+0xd4>
 80035ba:	2300      	movs	r3, #0
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	f002 0203 	and.w	r2, r2, #3
 80035c2:	0092      	lsls	r2, r2, #2
 80035c4:	4093      	lsls	r3, r2
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d132      	bne.n	8003632 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	220f      	movs	r2, #15
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80035dc:	4a3b      	ldr	r2, [pc, #236]	; (80036cc <HAL_GPIO_DeInit+0x1e4>)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	089b      	lsrs	r3, r3, #2
 80035e2:	3302      	adds	r3, #2
 80035e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	43da      	mvns	r2, r3
 80035ec:	4837      	ldr	r0, [pc, #220]	; (80036cc <HAL_GPIO_DeInit+0x1e4>)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	400a      	ands	r2, r1
 80035f4:	3302      	adds	r3, #2
 80035f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80035fa:	4b3f      	ldr	r3, [pc, #252]	; (80036f8 <HAL_GPIO_DeInit+0x210>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	43db      	mvns	r3, r3
 8003602:	493d      	ldr	r1, [pc, #244]	; (80036f8 <HAL_GPIO_DeInit+0x210>)
 8003604:	4013      	ands	r3, r2
 8003606:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003608:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <HAL_GPIO_DeInit+0x210>)
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	43db      	mvns	r3, r3
 8003610:	4939      	ldr	r1, [pc, #228]	; (80036f8 <HAL_GPIO_DeInit+0x210>)
 8003612:	4013      	ands	r3, r2
 8003614:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003616:	4b38      	ldr	r3, [pc, #224]	; (80036f8 <HAL_GPIO_DeInit+0x210>)
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	43db      	mvns	r3, r3
 800361e:	4936      	ldr	r1, [pc, #216]	; (80036f8 <HAL_GPIO_DeInit+0x210>)
 8003620:	4013      	ands	r3, r2
 8003622:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003624:	4b34      	ldr	r3, [pc, #208]	; (80036f8 <HAL_GPIO_DeInit+0x210>)
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	43db      	mvns	r3, r3
 800362c:	4932      	ldr	r1, [pc, #200]	; (80036f8 <HAL_GPIO_DeInit+0x210>)
 800362e:	4013      	ands	r3, r2
 8003630:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2103      	movs	r1, #3
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	401a      	ands	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	08da      	lsrs	r2, r3, #3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3208      	adds	r2, #8
 8003650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	220f      	movs	r2, #15
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	08d2      	lsrs	r2, r2, #3
 8003668:	4019      	ands	r1, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3208      	adds	r2, #8
 800366e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2103      	movs	r1, #3
 800367c:	fa01 f303 	lsl.w	r3, r1, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	401a      	ands	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	2101      	movs	r1, #1
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	401a      	ands	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2103      	movs	r1, #3
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	401a      	ands	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	3301      	adds	r3, #1
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b0f      	cmp	r3, #15
 80036bc:	f67f af22 	bls.w	8003504 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80036c0:	bf00      	nop
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	40013800 	.word	0x40013800
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40020800 	.word	0x40020800
 80036dc:	40020c00 	.word	0x40020c00
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40021400 	.word	0x40021400
 80036e8:	40021800 	.word	0x40021800
 80036ec:	40021c00 	.word	0x40021c00
 80036f0:	40022000 	.word	0x40022000
 80036f4:	40022400 	.word	0x40022400
 80036f8:	40013c00 	.word	0x40013c00

080036fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	887b      	ldrh	r3, [r7, #2]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e001      	b.n	800371e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
 8003738:	4613      	mov	r3, r2
 800373a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800373c:	787b      	ldrb	r3, [r7, #1]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003742:	887a      	ldrh	r2, [r7, #2]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003748:	e003      	b.n	8003752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800374a:	887b      	ldrh	r3, [r7, #2]
 800374c:	041a      	lsls	r2, r3, #16
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	619a      	str	r2, [r3, #24]
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
	...

08003760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e10f      	b.n	8003992 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f003 f9f0 	bl	8006b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	; 0x24
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a4:	f001 f8a8 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 80037a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4a7b      	ldr	r2, [pc, #492]	; (800399c <HAL_I2C_Init+0x23c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d807      	bhi.n	80037c4 <HAL_I2C_Init+0x64>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a7a      	ldr	r2, [pc, #488]	; (80039a0 <HAL_I2C_Init+0x240>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	bf94      	ite	ls
 80037bc:	2301      	movls	r3, #1
 80037be:	2300      	movhi	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e006      	b.n	80037d2 <HAL_I2C_Init+0x72>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a77      	ldr	r2, [pc, #476]	; (80039a4 <HAL_I2C_Init+0x244>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	bf94      	ite	ls
 80037cc:	2301      	movls	r3, #1
 80037ce:	2300      	movhi	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0db      	b.n	8003992 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4a72      	ldr	r2, [pc, #456]	; (80039a8 <HAL_I2C_Init+0x248>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	0c9b      	lsrs	r3, r3, #18
 80037e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4a64      	ldr	r2, [pc, #400]	; (800399c <HAL_I2C_Init+0x23c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d802      	bhi.n	8003814 <HAL_I2C_Init+0xb4>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3301      	adds	r3, #1
 8003812:	e009      	b.n	8003828 <HAL_I2C_Init+0xc8>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	4a63      	ldr	r2, [pc, #396]	; (80039ac <HAL_I2C_Init+0x24c>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	099b      	lsrs	r3, r3, #6
 8003826:	3301      	adds	r3, #1
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	430b      	orrs	r3, r1
 800382e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800383a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4956      	ldr	r1, [pc, #344]	; (800399c <HAL_I2C_Init+0x23c>)
 8003844:	428b      	cmp	r3, r1
 8003846:	d80d      	bhi.n	8003864 <HAL_I2C_Init+0x104>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1e59      	subs	r1, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fbb1 f3f3 	udiv	r3, r1, r3
 8003856:	3301      	adds	r3, #1
 8003858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385c:	2b04      	cmp	r3, #4
 800385e:	bf38      	it	cc
 8003860:	2304      	movcc	r3, #4
 8003862:	e04f      	b.n	8003904 <HAL_I2C_Init+0x1a4>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d111      	bne.n	8003890 <HAL_I2C_Init+0x130>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1e58      	subs	r0, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6859      	ldr	r1, [r3, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	440b      	add	r3, r1
 800387a:	fbb0 f3f3 	udiv	r3, r0, r3
 800387e:	3301      	adds	r3, #1
 8003880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	e012      	b.n	80038b6 <HAL_I2C_Init+0x156>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1e58      	subs	r0, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6859      	ldr	r1, [r3, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	0099      	lsls	r1, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a6:	3301      	adds	r3, #1
 80038a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_I2C_Init+0x15e>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e022      	b.n	8003904 <HAL_I2C_Init+0x1a4>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10e      	bne.n	80038e4 <HAL_I2C_Init+0x184>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1e58      	subs	r0, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6859      	ldr	r1, [r3, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	440b      	add	r3, r1
 80038d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d8:	3301      	adds	r3, #1
 80038da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038e2:	e00f      	b.n	8003904 <HAL_I2C_Init+0x1a4>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	1e58      	subs	r0, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6859      	ldr	r1, [r3, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	0099      	lsls	r1, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fa:	3301      	adds	r3, #1
 80038fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	6809      	ldr	r1, [r1, #0]
 8003908:	4313      	orrs	r3, r2
 800390a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003932:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6911      	ldr	r1, [r2, #16]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68d2      	ldr	r2, [r2, #12]
 800393e:	4311      	orrs	r1, r2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	430b      	orrs	r3, r1
 8003946:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	000186a0 	.word	0x000186a0
 80039a0:	001e847f 	.word	0x001e847f
 80039a4:	003d08ff 	.word	0x003d08ff
 80039a8:	431bde83 	.word	0x431bde83
 80039ac:	10624dd3 	.word	0x10624dd3

080039b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d129      	bne.n	8003a1a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2224      	movs	r2, #36	; 0x24
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0210 	bic.w	r2, r2, #16
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003a1a:	2302      	movs	r3, #2
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d12a      	bne.n	8003a98 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2224      	movs	r2, #36	; 0x24
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003a62:	89fb      	ldrh	r3, [r7, #14]
 8003a64:	f023 030f 	bic.w	r3, r3, #15
 8003a68:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	89fb      	ldrh	r3, [r7, #14]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	89fa      	ldrh	r2, [r7, #14]
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e0bf      	b.n	8003c3a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f003 f8b6 	bl	8006c40 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003aea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6999      	ldr	r1, [r3, #24]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b00:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6899      	ldr	r1, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	4b4a      	ldr	r3, [pc, #296]	; (8003c44 <HAL_LTDC_Init+0x19c>)
 8003b1c:	400b      	ands	r3, r1
 8003b1e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	041b      	lsls	r3, r3, #16
 8003b26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6899      	ldr	r1, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68d9      	ldr	r1, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <HAL_LTDC_Init+0x19c>)
 8003b4a:	400b      	ands	r3, r1
 8003b4c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68d9      	ldr	r1, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1a      	ldr	r2, [r3, #32]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6919      	ldr	r1, [r3, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b33      	ldr	r3, [pc, #204]	; (8003c44 <HAL_LTDC_Init+0x19c>)
 8003b78:	400b      	ands	r3, r1
 8003b7a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	041b      	lsls	r3, r3, #16
 8003b82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6919      	ldr	r1, [r3, #16]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6959      	ldr	r1, [r3, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b27      	ldr	r3, [pc, #156]	; (8003c44 <HAL_LTDC_Init+0x19c>)
 8003ba6:	400b      	ands	r3, r1
 8003ba8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	041b      	lsls	r3, r3, #16
 8003bb0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6959      	ldr	r1, [r3, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0206 	orr.w	r2, r2, #6
 8003c16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	f000f800 	.word	0xf000f800

08003c48 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003c48:	b5b0      	push	{r4, r5, r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_LTDC_ConfigLayer+0x1a>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e02c      	b.n	8003cbc <HAL_LTDC_ConfigLayer+0x74>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2134      	movs	r1, #52	; 0x34
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4614      	mov	r4, r2
 8003c86:	461d      	mov	r5, r3
 8003c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f83b 	bl	8003d18 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bdb0      	pop	{r4, r5, r7, pc}

08003cc4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_LTDC_EnableDither+0x16>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e016      	b.n	8003d08 <HAL_LTDC_EnableDither+0x44>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003cea:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <HAL_LTDC_EnableDither+0x50>)
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <HAL_LTDC_EnableDither+0x50>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40016800 	.word	0x40016800

08003d18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	0c1b      	lsrs	r3, r3, #16
 8003d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d34:	4413      	add	r3, r2
 8003d36:	041b      	lsls	r3, r3, #16
 8003d38:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	01db      	lsls	r3, r3, #7
 8003d44:	4413      	add	r3, r2
 8003d46:	3384      	adds	r3, #132	; 0x84
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	4611      	mov	r1, r2
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	01d2      	lsls	r2, r2, #7
 8003d54:	440a      	add	r2, r1
 8003d56:	3284      	adds	r2, #132	; 0x84
 8003d58:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003d5c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6e:	4413      	add	r3, r2
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4619      	mov	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	01db      	lsls	r3, r3, #7
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3384      	adds	r3, #132	; 0x84
 8003d80:	4619      	mov	r1, r3
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d96:	4413      	add	r3, r2
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	01db      	lsls	r3, r3, #7
 8003da6:	4413      	add	r3, r2
 8003da8:	3384      	adds	r3, #132	; 0x84
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	4611      	mov	r1, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	01d2      	lsls	r2, r2, #7
 8003db6:	440a      	add	r2, r1
 8003db8:	3284      	adds	r2, #132	; 0x84
 8003dba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003dbe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dce:	4413      	add	r3, r2
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	01db      	lsls	r3, r3, #7
 8003ddc:	440b      	add	r3, r1
 8003dde:	3384      	adds	r3, #132	; 0x84
 8003de0:	4619      	mov	r1, r3
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	01db      	lsls	r3, r3, #7
 8003df2:	4413      	add	r3, r2
 8003df4:	3384      	adds	r3, #132	; 0x84
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	01d2      	lsls	r2, r2, #7
 8003e02:	440a      	add	r2, r1
 8003e04:	3284      	adds	r2, #132	; 0x84
 8003e06:	f023 0307 	bic.w	r3, r3, #7
 8003e0a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	01db      	lsls	r3, r3, #7
 8003e16:	4413      	add	r3, r2
 8003e18:	3384      	adds	r3, #132	; 0x84
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e32:	041b      	lsls	r3, r3, #16
 8003e34:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	061b      	lsls	r3, r3, #24
 8003e3c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	01db      	lsls	r3, r3, #7
 8003e48:	4413      	add	r3, r2
 8003e4a:	3384      	adds	r3, #132	; 0x84
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	01db      	lsls	r3, r3, #7
 8003e58:	4413      	add	r3, r2
 8003e5a:	3384      	adds	r3, #132	; 0x84
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2300      	movs	r3, #0
 8003e60:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e68:	461a      	mov	r2, r3
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4619      	mov	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	01db      	lsls	r3, r3, #7
 8003e7c:	440b      	add	r3, r1
 8003e7e:	3384      	adds	r3, #132	; 0x84
 8003e80:	4619      	mov	r1, r3
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	01db      	lsls	r3, r3, #7
 8003e92:	4413      	add	r3, r2
 8003e94:	3384      	adds	r3, #132	; 0x84
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	01d2      	lsls	r2, r2, #7
 8003ea2:	440a      	add	r2, r1
 8003ea4:	3284      	adds	r2, #132	; 0x84
 8003ea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eaa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	01db      	lsls	r3, r3, #7
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3384      	adds	r3, #132	; 0x84
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	01db      	lsls	r3, r3, #7
 8003ecc:	4413      	add	r3, r2
 8003ece:	3384      	adds	r3, #132	; 0x84
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	01d2      	lsls	r2, r2, #7
 8003edc:	440a      	add	r2, r1
 8003ede:	3284      	adds	r2, #132	; 0x84
 8003ee0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ee4:	f023 0307 	bic.w	r3, r3, #7
 8003ee8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	68f9      	ldr	r1, [r7, #12]
 8003ef4:	6809      	ldr	r1, [r1, #0]
 8003ef6:	4608      	mov	r0, r1
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	01c9      	lsls	r1, r1, #7
 8003efc:	4401      	add	r1, r0
 8003efe:	3184      	adds	r1, #132	; 0x84
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	01db      	lsls	r3, r3, #7
 8003f0e:	4413      	add	r3, r2
 8003f10:	3384      	adds	r3, #132	; 0x84
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	01db      	lsls	r3, r3, #7
 8003f1e:	4413      	add	r3, r2
 8003f20:	3384      	adds	r3, #132	; 0x84
 8003f22:	461a      	mov	r2, r3
 8003f24:	2300      	movs	r3, #0
 8003f26:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	01db      	lsls	r3, r3, #7
 8003f32:	4413      	add	r3, r2
 8003f34:	3384      	adds	r3, #132	; 0x84
 8003f36:	461a      	mov	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d102      	bne.n	8003f4c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003f46:	2304      	movs	r3, #4
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	e01b      	b.n	8003f84 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d102      	bne.n	8003f5a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003f54:	2303      	movs	r3, #3
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	e014      	b.n	8003f84 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d00b      	beq.n	8003f7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d007      	beq.n	8003f7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d003      	beq.n	8003f7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f76:	2b07      	cmp	r3, #7
 8003f78:	d102      	bne.n	8003f80 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	e001      	b.n	8003f84 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003f80:	2301      	movs	r3, #1
 8003f82:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	01db      	lsls	r3, r3, #7
 8003f8e:	4413      	add	r3, r2
 8003f90:	3384      	adds	r3, #132	; 0x84
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	4611      	mov	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	01d2      	lsls	r2, r2, #7
 8003f9e:	440a      	add	r2, r1
 8003fa0:	3284      	adds	r2, #132	; 0x84
 8003fa2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	041a      	lsls	r2, r3, #16
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	1acb      	subs	r3, r1, r3
 8003fbe:	69f9      	ldr	r1, [r7, #28]
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	3303      	adds	r3, #3
 8003fc6:	68f9      	ldr	r1, [r7, #12]
 8003fc8:	6809      	ldr	r1, [r1, #0]
 8003fca:	4608      	mov	r0, r1
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	01c9      	lsls	r1, r1, #7
 8003fd0:	4401      	add	r1, r0
 8003fd2:	3184      	adds	r1, #132	; 0x84
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	01db      	lsls	r3, r3, #7
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3384      	adds	r3, #132	; 0x84
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	4611      	mov	r1, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	01d2      	lsls	r2, r2, #7
 8003ff2:	440a      	add	r2, r1
 8003ff4:	3284      	adds	r2, #132	; 0x84
 8003ff6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ffa:	f023 0307 	bic.w	r3, r3, #7
 8003ffe:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	01db      	lsls	r3, r3, #7
 800400a:	4413      	add	r3, r2
 800400c:	3384      	adds	r3, #132	; 0x84
 800400e:	461a      	mov	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	01db      	lsls	r3, r3, #7
 8004020:	4413      	add	r3, r2
 8004022:	3384      	adds	r3, #132	; 0x84
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	4611      	mov	r1, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	01d2      	lsls	r2, r2, #7
 8004030:	440a      	add	r2, r1
 8004032:	3284      	adds	r2, #132	; 0x84
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	6013      	str	r3, [r2, #0]
}
 800403a:	bf00      	nop
 800403c:	3724      	adds	r7, #36	; 0x24
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
	...

08004048 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a1f      	ldr	r2, [pc, #124]	; (80040d8 <HAL_PWREx_EnableOverDrive+0x90>)
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004060:	6413      	str	r3, [r2, #64]	; 0x40
 8004062:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800406e:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <HAL_PWREx_EnableOverDrive+0x94>)
 8004070:	2201      	movs	r2, #1
 8004072:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004074:	f7fe fb06 	bl	8002684 <HAL_GetTick>
 8004078:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800407a:	e009      	b.n	8004090 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800407c:	f7fe fb02 	bl	8002684 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800408a:	d901      	bls.n	8004090 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e01f      	b.n	80040d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004090:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409c:	d1ee      	bne.n	800407c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800409e:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040a4:	f7fe faee 	bl	8002684 <HAL_GetTick>
 80040a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040aa:	e009      	b.n	80040c0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040ac:	f7fe faea 	bl	8002684 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ba:	d901      	bls.n	80040c0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e007      	b.n	80040d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <HAL_PWREx_EnableOverDrive+0x98>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040cc:	d1ee      	bne.n	80040ac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40023800 	.word	0x40023800
 80040dc:	420e0040 	.word	0x420e0040
 80040e0:	40007000 	.word	0x40007000
 80040e4:	420e0044 	.word	0x420e0044

080040e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e22d      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d075      	beq.n	80041f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004106:	4ba3      	ldr	r3, [pc, #652]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b04      	cmp	r3, #4
 8004110:	d00c      	beq.n	800412c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004112:	4ba0      	ldr	r3, [pc, #640]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800411a:	2b08      	cmp	r3, #8
 800411c:	d112      	bne.n	8004144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800411e:	4b9d      	ldr	r3, [pc, #628]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800412a:	d10b      	bne.n	8004144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412c:	4b99      	ldr	r3, [pc, #612]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d05b      	beq.n	80041f0 <HAL_RCC_OscConfig+0x108>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d157      	bne.n	80041f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e208      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414c:	d106      	bne.n	800415c <HAL_RCC_OscConfig+0x74>
 800414e:	4b91      	ldr	r3, [pc, #580]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a90      	ldr	r2, [pc, #576]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e01d      	b.n	8004198 <HAL_RCC_OscConfig+0xb0>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004164:	d10c      	bne.n	8004180 <HAL_RCC_OscConfig+0x98>
 8004166:	4b8b      	ldr	r3, [pc, #556]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a8a      	ldr	r2, [pc, #552]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	4b88      	ldr	r3, [pc, #544]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a87      	ldr	r2, [pc, #540]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	e00b      	b.n	8004198 <HAL_RCC_OscConfig+0xb0>
 8004180:	4b84      	ldr	r3, [pc, #528]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a83      	ldr	r2, [pc, #524]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	4b81      	ldr	r3, [pc, #516]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a80      	ldr	r2, [pc, #512]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d013      	beq.n	80041c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7fe fa70 	bl	8002684 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041a8:	f7fe fa6c 	bl	8002684 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b64      	cmp	r3, #100	; 0x64
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e1cd      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ba:	4b76      	ldr	r3, [pc, #472]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0xc0>
 80041c6:	e014      	b.n	80041f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c8:	f7fe fa5c 	bl	8002684 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d0:	f7fe fa58 	bl	8002684 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b64      	cmp	r3, #100	; 0x64
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e1b9      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e2:	4b6c      	ldr	r3, [pc, #432]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0xe8>
 80041ee:	e000      	b.n	80041f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d063      	beq.n	80042c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041fe:	4b65      	ldr	r3, [pc, #404]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420a:	4b62      	ldr	r3, [pc, #392]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004212:	2b08      	cmp	r3, #8
 8004214:	d11c      	bne.n	8004250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004216:	4b5f      	ldr	r3, [pc, #380]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d116      	bne.n	8004250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004222:	4b5c      	ldr	r3, [pc, #368]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_RCC_OscConfig+0x152>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d001      	beq.n	800423a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e18d      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423a:	4b56      	ldr	r3, [pc, #344]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4952      	ldr	r1, [pc, #328]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424e:	e03a      	b.n	80042c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d020      	beq.n	800429a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004258:	4b4f      	ldr	r3, [pc, #316]	; (8004398 <HAL_RCC_OscConfig+0x2b0>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7fe fa11 	bl	8002684 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004266:	f7fe fa0d 	bl	8002684 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e16e      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004278:	4b46      	ldr	r3, [pc, #280]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004284:	4b43      	ldr	r3, [pc, #268]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4940      	ldr	r1, [pc, #256]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004294:	4313      	orrs	r3, r2
 8004296:	600b      	str	r3, [r1, #0]
 8004298:	e015      	b.n	80042c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429a:	4b3f      	ldr	r3, [pc, #252]	; (8004398 <HAL_RCC_OscConfig+0x2b0>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fe f9f0 	bl	8002684 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042a8:	f7fe f9ec 	bl	8002684 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e14d      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ba:	4b36      	ldr	r3, [pc, #216]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d030      	beq.n	8004334 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d016      	beq.n	8004308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042da:	4b30      	ldr	r3, [pc, #192]	; (800439c <HAL_RCC_OscConfig+0x2b4>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e0:	f7fe f9d0 	bl	8002684 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042e8:	f7fe f9cc 	bl	8002684 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e12d      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fa:	4b26      	ldr	r3, [pc, #152]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x200>
 8004306:	e015      	b.n	8004334 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004308:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_RCC_OscConfig+0x2b4>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800430e:	f7fe f9b9 	bl	8002684 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004316:	f7fe f9b5 	bl	8002684 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e116      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004328:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 800432a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f0      	bne.n	8004316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 80a0 	beq.w	8004482 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004342:	2300      	movs	r3, #0
 8004344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004346:	4b13      	ldr	r3, [pc, #76]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10f      	bne.n	8004372 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	4a0e      	ldr	r2, [pc, #56]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004360:	6413      	str	r3, [r2, #64]	; 0x40
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800436e:	2301      	movs	r3, #1
 8004370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004372:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCC_OscConfig+0x2b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d121      	bne.n	80043c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800437e:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <HAL_RCC_OscConfig+0x2b8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <HAL_RCC_OscConfig+0x2b8>)
 8004384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800438a:	f7fe f97b 	bl	8002684 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004390:	e011      	b.n	80043b6 <HAL_RCC_OscConfig+0x2ce>
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800
 8004398:	42470000 	.word	0x42470000
 800439c:	42470e80 	.word	0x42470e80
 80043a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a4:	f7fe f96e 	bl	8002684 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e0cf      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	4b6a      	ldr	r3, [pc, #424]	; (8004560 <HAL_RCC_OscConfig+0x478>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d106      	bne.n	80043d8 <HAL_RCC_OscConfig+0x2f0>
 80043ca:	4b66      	ldr	r3, [pc, #408]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	4a65      	ldr	r2, [pc, #404]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	6713      	str	r3, [r2, #112]	; 0x70
 80043d6:	e01c      	b.n	8004412 <HAL_RCC_OscConfig+0x32a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b05      	cmp	r3, #5
 80043de:	d10c      	bne.n	80043fa <HAL_RCC_OscConfig+0x312>
 80043e0:	4b60      	ldr	r3, [pc, #384]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	4a5f      	ldr	r2, [pc, #380]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 80043e6:	f043 0304 	orr.w	r3, r3, #4
 80043ea:	6713      	str	r3, [r2, #112]	; 0x70
 80043ec:	4b5d      	ldr	r3, [pc, #372]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f0:	4a5c      	ldr	r2, [pc, #368]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	6713      	str	r3, [r2, #112]	; 0x70
 80043f8:	e00b      	b.n	8004412 <HAL_RCC_OscConfig+0x32a>
 80043fa:	4b5a      	ldr	r3, [pc, #360]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	4a59      	ldr	r2, [pc, #356]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	6713      	str	r3, [r2, #112]	; 0x70
 8004406:	4b57      	ldr	r3, [pc, #348]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	4a56      	ldr	r2, [pc, #344]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 800440c:	f023 0304 	bic.w	r3, r3, #4
 8004410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d015      	beq.n	8004446 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441a:	f7fe f933 	bl	8002684 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	e00a      	b.n	8004438 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004422:	f7fe f92f 	bl	8002684 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e08e      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004438:	4b4a      	ldr	r3, [pc, #296]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ee      	beq.n	8004422 <HAL_RCC_OscConfig+0x33a>
 8004444:	e014      	b.n	8004470 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004446:	f7fe f91d 	bl	8002684 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fe f919 	bl	8002684 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e078      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004464:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ee      	bne.n	800444e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004470:	7dfb      	ldrb	r3, [r7, #23]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d105      	bne.n	8004482 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004476:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	4a3a      	ldr	r2, [pc, #232]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 800447c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d064      	beq.n	8004554 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b08      	cmp	r3, #8
 8004494:	d05c      	beq.n	8004550 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d141      	bne.n	8004522 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449e:	4b32      	ldr	r3, [pc, #200]	; (8004568 <HAL_RCC_OscConfig+0x480>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7fe f8ee 	bl	8002684 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ac:	f7fe f8ea 	bl	8002684 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e04b      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044be:	4b29      	ldr	r3, [pc, #164]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	019b      	lsls	r3, r3, #6
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	085b      	lsrs	r3, r3, #1
 80044e2:	3b01      	subs	r3, #1
 80044e4:	041b      	lsls	r3, r3, #16
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	061b      	lsls	r3, r3, #24
 80044ee:	491d      	ldr	r1, [pc, #116]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f4:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <HAL_RCC_OscConfig+0x480>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fa:	f7fe f8c3 	bl	8002684 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004502:	f7fe f8bf 	bl	8002684 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e020      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004514:	4b13      	ldr	r3, [pc, #76]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x41a>
 8004520:	e018      	b.n	8004554 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004522:	4b11      	ldr	r3, [pc, #68]	; (8004568 <HAL_RCC_OscConfig+0x480>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fe f8ac 	bl	8002684 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004530:	f7fe f8a8 	bl	8002684 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e009      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	4b08      	ldr	r3, [pc, #32]	; (8004564 <HAL_RCC_OscConfig+0x47c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x448>
 800454e:	e001      	b.n	8004554 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40007000 	.word	0x40007000
 8004564:	40023800 	.word	0x40023800
 8004568:	42470060 	.word	0x42470060

0800456c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0ca      	b.n	8004716 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004580:	4b67      	ldr	r3, [pc, #412]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d90c      	bls.n	80045a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458e:	4b64      	ldr	r3, [pc, #400]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b62      	ldr	r3, [pc, #392]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0b6      	b.n	8004716 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d020      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c0:	4b58      	ldr	r3, [pc, #352]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4a57      	ldr	r2, [pc, #348]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80045c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d8:	4b52      	ldr	r3, [pc, #328]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a51      	ldr	r2, [pc, #324]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80045de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e4:	4b4f      	ldr	r3, [pc, #316]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	494c      	ldr	r1, [pc, #304]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d044      	beq.n	800468c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	4b46      	ldr	r3, [pc, #280]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d119      	bne.n	800464a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e07d      	b.n	8004716 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d003      	beq.n	800462a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004626:	2b03      	cmp	r3, #3
 8004628:	d107      	bne.n	800463a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462a:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e06d      	b.n	8004716 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463a:	4b3a      	ldr	r3, [pc, #232]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e065      	b.n	8004716 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464a:	4b36      	ldr	r3, [pc, #216]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f023 0203 	bic.w	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4933      	ldr	r1, [pc, #204]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	4313      	orrs	r3, r2
 800465a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800465c:	f7fe f812 	bl	8002684 <HAL_GetTick>
 8004660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004662:	e00a      	b.n	800467a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004664:	f7fe f80e 	bl	8002684 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e04d      	b.n	8004716 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467a:	4b2a      	ldr	r3, [pc, #168]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 020c 	and.w	r2, r3, #12
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	429a      	cmp	r2, r3
 800468a:	d1eb      	bne.n	8004664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800468c:	4b24      	ldr	r3, [pc, #144]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d20c      	bcs.n	80046b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469a:	4b21      	ldr	r3, [pc, #132]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a2:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e030      	b.n	8004716 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c0:	4b18      	ldr	r3, [pc, #96]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4915      	ldr	r1, [pc, #84]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	490d      	ldr	r1, [pc, #52]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046f2:	f000 f81d 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 80046f6:	4601      	mov	r1, r0
 80046f8:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	4a09      	ldr	r2, [pc, #36]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	5cd3      	ldrb	r3, [r2, r3]
 8004706:	fa21 f303 	lsr.w	r3, r1, r3
 800470a:	4a08      	ldr	r2, [pc, #32]	; (800472c <HAL_RCC_ClockConfig+0x1c0>)
 800470c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800470e:	2000      	movs	r0, #0
 8004710:	f7fd ff74 	bl	80025fc <HAL_InitTick>

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40023c00 	.word	0x40023c00
 8004724:	40023800 	.word	0x40023800
 8004728:	0800c89c 	.word	0x0800c89c
 800472c:	20000050 	.word	0x20000050

08004730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	2300      	movs	r3, #0
 8004740:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004746:	4b63      	ldr	r3, [pc, #396]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b04      	cmp	r3, #4
 8004750:	d007      	beq.n	8004762 <HAL_RCC_GetSysClockFreq+0x32>
 8004752:	2b08      	cmp	r3, #8
 8004754:	d008      	beq.n	8004768 <HAL_RCC_GetSysClockFreq+0x38>
 8004756:	2b00      	cmp	r3, #0
 8004758:	f040 80b4 	bne.w	80048c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800475c:	4b5e      	ldr	r3, [pc, #376]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800475e:	60bb      	str	r3, [r7, #8]
       break;
 8004760:	e0b3      	b.n	80048ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004762:	4b5e      	ldr	r3, [pc, #376]	; (80048dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004764:	60bb      	str	r3, [r7, #8]
      break;
 8004766:	e0b0      	b.n	80048ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004768:	4b5a      	ldr	r3, [pc, #360]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004770:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004772:	4b58      	ldr	r3, [pc, #352]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d04a      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477e:	4b55      	ldr	r3, [pc, #340]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	099b      	lsrs	r3, r3, #6
 8004784:	f04f 0400 	mov.w	r4, #0
 8004788:	f240 11ff 	movw	r1, #511	; 0x1ff
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	ea03 0501 	and.w	r5, r3, r1
 8004794:	ea04 0602 	and.w	r6, r4, r2
 8004798:	4629      	mov	r1, r5
 800479a:	4632      	mov	r2, r6
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	f04f 0400 	mov.w	r4, #0
 80047a4:	0154      	lsls	r4, r2, #5
 80047a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047aa:	014b      	lsls	r3, r1, #5
 80047ac:	4619      	mov	r1, r3
 80047ae:	4622      	mov	r2, r4
 80047b0:	1b49      	subs	r1, r1, r5
 80047b2:	eb62 0206 	sbc.w	r2, r2, r6
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	f04f 0400 	mov.w	r4, #0
 80047be:	0194      	lsls	r4, r2, #6
 80047c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047c4:	018b      	lsls	r3, r1, #6
 80047c6:	1a5b      	subs	r3, r3, r1
 80047c8:	eb64 0402 	sbc.w	r4, r4, r2
 80047cc:	f04f 0100 	mov.w	r1, #0
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	00e2      	lsls	r2, r4, #3
 80047d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047da:	00d9      	lsls	r1, r3, #3
 80047dc:	460b      	mov	r3, r1
 80047de:	4614      	mov	r4, r2
 80047e0:	195b      	adds	r3, r3, r5
 80047e2:	eb44 0406 	adc.w	r4, r4, r6
 80047e6:	f04f 0100 	mov.w	r1, #0
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	0262      	lsls	r2, r4, #9
 80047f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80047f4:	0259      	lsls	r1, r3, #9
 80047f6:	460b      	mov	r3, r1
 80047f8:	4614      	mov	r4, r2
 80047fa:	4618      	mov	r0, r3
 80047fc:	4621      	mov	r1, r4
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f04f 0400 	mov.w	r4, #0
 8004804:	461a      	mov	r2, r3
 8004806:	4623      	mov	r3, r4
 8004808:	f7fc fa4e 	bl	8000ca8 <__aeabi_uldivmod>
 800480c:	4603      	mov	r3, r0
 800480e:	460c      	mov	r4, r1
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e049      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004814:	4b2f      	ldr	r3, [pc, #188]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	f04f 0400 	mov.w	r4, #0
 800481e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	ea03 0501 	and.w	r5, r3, r1
 800482a:	ea04 0602 	and.w	r6, r4, r2
 800482e:	4629      	mov	r1, r5
 8004830:	4632      	mov	r2, r6
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	f04f 0400 	mov.w	r4, #0
 800483a:	0154      	lsls	r4, r2, #5
 800483c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004840:	014b      	lsls	r3, r1, #5
 8004842:	4619      	mov	r1, r3
 8004844:	4622      	mov	r2, r4
 8004846:	1b49      	subs	r1, r1, r5
 8004848:	eb62 0206 	sbc.w	r2, r2, r6
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	f04f 0400 	mov.w	r4, #0
 8004854:	0194      	lsls	r4, r2, #6
 8004856:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800485a:	018b      	lsls	r3, r1, #6
 800485c:	1a5b      	subs	r3, r3, r1
 800485e:	eb64 0402 	sbc.w	r4, r4, r2
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	00e2      	lsls	r2, r4, #3
 800486c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004870:	00d9      	lsls	r1, r3, #3
 8004872:	460b      	mov	r3, r1
 8004874:	4614      	mov	r4, r2
 8004876:	195b      	adds	r3, r3, r5
 8004878:	eb44 0406 	adc.w	r4, r4, r6
 800487c:	f04f 0100 	mov.w	r1, #0
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	02a2      	lsls	r2, r4, #10
 8004886:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800488a:	0299      	lsls	r1, r3, #10
 800488c:	460b      	mov	r3, r1
 800488e:	4614      	mov	r4, r2
 8004890:	4618      	mov	r0, r3
 8004892:	4621      	mov	r1, r4
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f04f 0400 	mov.w	r4, #0
 800489a:	461a      	mov	r2, r3
 800489c:	4623      	mov	r3, r4
 800489e:	f7fc fa03 	bl	8000ca8 <__aeabi_uldivmod>
 80048a2:	4603      	mov	r3, r0
 80048a4:	460c      	mov	r4, r1
 80048a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048a8:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	0c1b      	lsrs	r3, r3, #16
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	3301      	adds	r3, #1
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	60bb      	str	r3, [r7, #8]
      break;
 80048c2:	e002      	b.n	80048ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048c4:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048c6:	60bb      	str	r3, [r7, #8]
      break;
 80048c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ca:	68bb      	ldr	r3, [r7, #8]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d4:	40023800 	.word	0x40023800
 80048d8:	00f42400 	.word	0x00f42400
 80048dc:	007a1200 	.word	0x007a1200

080048e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e4:	4b03      	ldr	r3, [pc, #12]	; (80048f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048e6:	681b      	ldr	r3, [r3, #0]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000050 	.word	0x20000050

080048f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048fc:	f7ff fff0 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8004900:	4601      	mov	r1, r0
 8004902:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	0a9b      	lsrs	r3, r3, #10
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	4a03      	ldr	r2, [pc, #12]	; (800491c <HAL_RCC_GetPCLK1Freq+0x24>)
 800490e:	5cd3      	ldrb	r3, [r2, r3]
 8004910:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004914:	4618      	mov	r0, r3
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40023800 	.word	0x40023800
 800491c:	0800c8ac 	.word	0x0800c8ac

08004920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d105      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004944:	2b00      	cmp	r3, #0
 8004946:	d061      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004948:	4ba3      	ldr	r3, [pc, #652]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800494e:	f7fd fe99 	bl	8002684 <HAL_GetTick>
 8004952:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004954:	e008      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004956:	f7fd fe95 	bl	8002684 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e177      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004968:	4b9c      	ldr	r3, [pc, #624]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f0      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d009      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	019a      	lsls	r2, r3, #6
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	071b      	lsls	r3, r3, #28
 800498c:	4993      	ldr	r1, [pc, #588]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01f      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049a0:	4b8e      	ldr	r3, [pc, #568]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a6:	0f1b      	lsrs	r3, r3, #28
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	019a      	lsls	r2, r3, #6
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	431a      	orrs	r2, r3
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	071b      	lsls	r3, r3, #28
 80049c0:	4986      	ldr	r1, [pc, #536]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049c8:	4b84      	ldr	r3, [pc, #528]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ce:	f023 021f 	bic.w	r2, r3, #31
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	4980      	ldr	r1, [pc, #512]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049e0:	4b7d      	ldr	r3, [pc, #500]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049e6:	f7fd fe4d 	bl	8002684 <HAL_GetTick>
 80049ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049ec:	e008      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049ee:	f7fd fe49 	bl	8002684 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e12b      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a00:	4b76      	ldr	r3, [pc, #472]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f0      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d105      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d079      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a24:	4b6e      	ldr	r3, [pc, #440]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a2a:	f7fd fe2b 	bl	8002684 <HAL_GetTick>
 8004a2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004a32:	f7fd fe27 	bl	8002684 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e109      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a44:	4b65      	ldr	r3, [pc, #404]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a50:	d0ef      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d020      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a5e:	4b5f      	ldr	r3, [pc, #380]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a64:	0f1b      	lsrs	r3, r3, #28
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	019a      	lsls	r2, r3, #6
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	061b      	lsls	r3, r3, #24
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	071b      	lsls	r3, r3, #28
 8004a7e:	4957      	ldr	r1, [pc, #348]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a86:	4b55      	ldr	r3, [pc, #340]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	4950      	ldr	r1, [pc, #320]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01e      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004aac:	4b4b      	ldr	r3, [pc, #300]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	0e1b      	lsrs	r3, r3, #24
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	019a      	lsls	r2, r3, #6
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	061b      	lsls	r3, r3, #24
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	071b      	lsls	r3, r3, #28
 8004acc:	4943      	ldr	r1, [pc, #268]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ad4:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ada:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	493e      	ldr	r1, [pc, #248]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004aea:	4b3d      	ldr	r3, [pc, #244]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004af0:	f7fd fdc8 	bl	8002684 <HAL_GetTick>
 8004af4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004af8:	f7fd fdc4 	bl	8002684 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e0a6      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b0a:	4b34      	ldr	r3, [pc, #208]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b16:	d1ef      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 808d 	beq.w	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	4b2c      	ldr	r3, [pc, #176]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	4a2b      	ldr	r2, [pc, #172]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b34:	6413      	str	r3, [r2, #64]	; 0x40
 8004b36:	4b29      	ldr	r3, [pc, #164]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b42:	4b28      	ldr	r3, [pc, #160]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a27      	ldr	r2, [pc, #156]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b4e:	f7fd fd99 	bl	8002684 <HAL_GetTick>
 8004b52:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b54:	e008      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b56:	f7fd fd95 	bl	8002684 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e077      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b68:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b74:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d039      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d032      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b92:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b9c:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ba2:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ba8:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bae:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d11e      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bba:	f7fd fd63 	bl	8002684 <HAL_GetTick>
 8004bbe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc0:	e014      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc2:	f7fd fd5f 	bl	8002684 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d90b      	bls.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e03f      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8004bd8:	42470068 	.word	0x42470068
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	42470070 	.word	0x42470070
 8004be4:	40007000 	.word	0x40007000
 8004be8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bec:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0e4      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c04:	d10d      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8004c06:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1a:	4911      	ldr	r1, [pc, #68]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]
 8004c20:	e005      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8004c22:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	4a0e      	ldr	r2, [pc, #56]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c2c:	6093      	str	r3, [r2, #8]
 8004c2e:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c3a:	4909      	ldr	r1, [pc, #36]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d004      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004c52:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c54:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40023800 	.word	0x40023800
 8004c64:	424711e0 	.word	0x424711e0

08004c68 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e025      	b.n	8004cc8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d106      	bne.n	8004c96 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f002 fa03 	bl	800709c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f001 f86a 	bl	8005d82 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	6839      	ldr	r1, [r7, #0]
 8004cba:	f001 f8d5 	bl	8005e68 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d101      	bne.n	8004cec <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e018      	b.n	8004d1e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 f932 	bl	8005f66 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d104      	bne.n	8004d14 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2205      	movs	r2, #5
 8004d0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004d12:	e003      	b.n	8004d1c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d101      	bne.n	8004d40 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e00e      	b.n	8004d5e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6839      	ldr	r1, [r7, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 f945 	bl	8005fde <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e056      	b.n	8004e26 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f002 f862 	bl	8006e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	ea42 0103 	orr.w	r1, r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	f003 0104 	and.w	r1, r3, #4
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e01a      	b.n	8004e76 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e56:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f002 f847 	bl	8006eec <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b088      	sub	sp, #32
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	603b      	str	r3, [r7, #0]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_SPI_Transmit+0x22>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e11e      	b.n	80050de <HAL_SPI_Transmit+0x260>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ea8:	f7fd fbec 	bl	8002684 <HAL_GetTick>
 8004eac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d002      	beq.n	8004ec4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ec2:	e103      	b.n	80050cc <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <HAL_SPI_Transmit+0x52>
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d102      	bne.n	8004ed6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ed4:	e0fa      	b.n	80050cc <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2203      	movs	r2, #3
 8004eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	88fa      	ldrh	r2, [r7, #6]
 8004eee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1c:	d107      	bne.n	8004f2e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d007      	beq.n	8004f4c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f54:	d14b      	bne.n	8004fee <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <HAL_SPI_Transmit+0xe6>
 8004f5e:	8afb      	ldrh	r3, [r7, #22]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d13e      	bne.n	8004fe2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	881a      	ldrh	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	1c9a      	adds	r2, r3, #2
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f88:	e02b      	b.n	8004fe2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d112      	bne.n	8004fbe <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	881a      	ldrh	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	1c9a      	adds	r2, r3, #2
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fbc:	e011      	b.n	8004fe2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fbe:	f7fd fb61 	bl	8002684 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d803      	bhi.n	8004fd6 <HAL_SPI_Transmit+0x158>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd4:	d102      	bne.n	8004fdc <HAL_SPI_Transmit+0x15e>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fe0:	e074      	b.n	80050cc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1ce      	bne.n	8004f8a <HAL_SPI_Transmit+0x10c>
 8004fec:	e04c      	b.n	8005088 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <HAL_SPI_Transmit+0x17e>
 8004ff6:	8afb      	ldrh	r3, [r7, #22]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d140      	bne.n	800507e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	7812      	ldrb	r2, [r2, #0]
 8005008:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005022:	e02c      	b.n	800507e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b02      	cmp	r3, #2
 8005030:	d113      	bne.n	800505a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	330c      	adds	r3, #12
 800503c:	7812      	ldrb	r2, [r2, #0]
 800503e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	86da      	strh	r2, [r3, #54]	; 0x36
 8005058:	e011      	b.n	800507e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800505a:	f7fd fb13 	bl	8002684 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d803      	bhi.n	8005072 <HAL_SPI_Transmit+0x1f4>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005070:	d102      	bne.n	8005078 <HAL_SPI_Transmit+0x1fa>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800507c:	e026      	b.n	80050cc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1cd      	bne.n	8005024 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fbb3 	bl	80057f8 <SPI_EndRxTxTransaction>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050a6:	2300      	movs	r3, #0
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e000      	b.n	80050cc <HAL_SPI_Transmit+0x24e>
  }

error:
 80050ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b088      	sub	sp, #32
 80050ea:	af02      	add	r7, sp, #8
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	603b      	str	r3, [r7, #0]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005102:	d112      	bne.n	800512a <HAL_SPI_Receive+0x44>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10e      	bne.n	800512a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2204      	movs	r2, #4
 8005110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005114:	88fa      	ldrh	r2, [r7, #6]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	4613      	mov	r3, r2
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f8e9 	bl	80052f8 <HAL_SPI_TransmitReceive>
 8005126:	4603      	mov	r3, r0
 8005128:	e0e2      	b.n	80052f0 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_SPI_Receive+0x52>
 8005134:	2302      	movs	r3, #2
 8005136:	e0db      	b.n	80052f0 <HAL_SPI_Receive+0x20a>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005140:	f7fd faa0 	bl	8002684 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	d002      	beq.n	8005158 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005152:	2302      	movs	r3, #2
 8005154:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005156:	e0c2      	b.n	80052de <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_SPI_Receive+0x7e>
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d102      	bne.n	800516a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005168:	e0b9      	b.n	80052de <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2204      	movs	r2, #4
 800516e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	88fa      	ldrh	r2, [r7, #6]
 8005182:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	88fa      	ldrh	r2, [r7, #6]
 8005188:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b0:	d107      	bne.n	80051c2 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051c0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051cc:	2b40      	cmp	r3, #64	; 0x40
 80051ce:	d007      	beq.n	80051e0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d162      	bne.n	80052ae <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051e8:	e02e      	b.n	8005248 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d115      	bne.n	8005224 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f103 020c 	add.w	r2, r3, #12
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	7812      	ldrb	r2, [r2, #0]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005222:	e011      	b.n	8005248 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005224:	f7fd fa2e 	bl	8002684 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d803      	bhi.n	800523c <HAL_SPI_Receive+0x156>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d102      	bne.n	8005242 <HAL_SPI_Receive+0x15c>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005246:	e04a      	b.n	80052de <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1cb      	bne.n	80051ea <HAL_SPI_Receive+0x104>
 8005252:	e031      	b.n	80052b8 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b01      	cmp	r3, #1
 8005260:	d113      	bne.n	800528a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	b292      	uxth	r2, r2
 800526e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	1c9a      	adds	r2, r3, #2
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005288:	e011      	b.n	80052ae <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800528a:	f7fd f9fb 	bl	8002684 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d803      	bhi.n	80052a2 <HAL_SPI_Receive+0x1bc>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d102      	bne.n	80052a8 <HAL_SPI_Receive+0x1c2>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d102      	bne.n	80052ae <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80052ac:	e017      	b.n	80052de <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1cd      	bne.n	8005254 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	6839      	ldr	r1, [r7, #0]
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fa35 	bl	800572c <SPI_EndRxTransaction>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	75fb      	strb	r3, [r7, #23]
 80052da:	e000      	b.n	80052de <HAL_SPI_Receive+0x1f8>
  }

error :
 80052dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08c      	sub	sp, #48	; 0x30
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005306:	2301      	movs	r3, #1
 8005308:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_SPI_TransmitReceive+0x26>
 800531a:	2302      	movs	r3, #2
 800531c:	e18a      	b.n	8005634 <HAL_SPI_TransmitReceive+0x33c>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005326:	f7fd f9ad 	bl	8002684 <HAL_GetTick>
 800532a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800533c:	887b      	ldrh	r3, [r7, #2]
 800533e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005340:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005344:	2b01      	cmp	r3, #1
 8005346:	d00f      	beq.n	8005368 <HAL_SPI_TransmitReceive+0x70>
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534e:	d107      	bne.n	8005360 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d103      	bne.n	8005360 <HAL_SPI_TransmitReceive+0x68>
 8005358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800535c:	2b04      	cmp	r3, #4
 800535e:	d003      	beq.n	8005368 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005360:	2302      	movs	r3, #2
 8005362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005366:	e15b      	b.n	8005620 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <HAL_SPI_TransmitReceive+0x82>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_SPI_TransmitReceive+0x82>
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d103      	bne.n	8005382 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005380:	e14e      	b.n	8005620 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b04      	cmp	r3, #4
 800538c:	d003      	beq.n	8005396 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2205      	movs	r2, #5
 8005392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	887a      	ldrh	r2, [r7, #2]
 80053a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	887a      	ldrh	r2, [r7, #2]
 80053ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	887a      	ldrh	r2, [r7, #2]
 80053b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	887a      	ldrh	r2, [r7, #2]
 80053be:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d6:	2b40      	cmp	r3, #64	; 0x40
 80053d8:	d007      	beq.n	80053ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f2:	d178      	bne.n	80054e6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <HAL_SPI_TransmitReceive+0x10a>
 80053fc:	8b7b      	ldrh	r3, [r7, #26]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d166      	bne.n	80054d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	881a      	ldrh	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	1c9a      	adds	r2, r3, #2
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005426:	e053      	b.n	80054d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b02      	cmp	r3, #2
 8005434:	d11b      	bne.n	800546e <HAL_SPI_TransmitReceive+0x176>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d016      	beq.n	800546e <HAL_SPI_TransmitReceive+0x176>
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005442:	2b01      	cmp	r3, #1
 8005444:	d113      	bne.n	800546e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	881a      	ldrh	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	1c9a      	adds	r2, r3, #2
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b01      	cmp	r3, #1
 800547a:	d119      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x1b8>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d014      	beq.n	80054b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	b292      	uxth	r2, r2
 8005492:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	1c9a      	adds	r2, r3, #2
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054ac:	2301      	movs	r3, #1
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054b0:	f7fd f8e8 	bl	8002684 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054bc:	429a      	cmp	r2, r3
 80054be:	d807      	bhi.n	80054d0 <HAL_SPI_TransmitReceive+0x1d8>
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d003      	beq.n	80054d0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054ce:	e0a7      	b.n	8005620 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1a6      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x130>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1a1      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x130>
 80054e4:	e07c      	b.n	80055e0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_SPI_TransmitReceive+0x1fc>
 80054ee:	8b7b      	ldrh	r3, [r7, #26]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d16b      	bne.n	80055cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	330c      	adds	r3, #12
 80054fe:	7812      	ldrb	r2, [r2, #0]
 8005500:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800551a:	e057      	b.n	80055cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b02      	cmp	r3, #2
 8005528:	d11c      	bne.n	8005564 <HAL_SPI_TransmitReceive+0x26c>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800552e:	b29b      	uxth	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d017      	beq.n	8005564 <HAL_SPI_TransmitReceive+0x26c>
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d114      	bne.n	8005564 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	330c      	adds	r3, #12
 8005544:	7812      	ldrb	r2, [r2, #0]
 8005546:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b01      	cmp	r3, #1
 8005570:	d119      	bne.n	80055a6 <HAL_SPI_TransmitReceive+0x2ae>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d014      	beq.n	80055a6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055a2:	2301      	movs	r3, #1
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055a6:	f7fd f86d 	bl	8002684 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d803      	bhi.n	80055be <HAL_SPI_TransmitReceive+0x2c6>
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055bc:	d102      	bne.n	80055c4 <HAL_SPI_TransmitReceive+0x2cc>
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d103      	bne.n	80055cc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055ca:	e029      	b.n	8005620 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1a2      	bne.n	800551c <HAL_SPI_TransmitReceive+0x224>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d19d      	bne.n	800551c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f907 	bl	80057f8 <SPI_EndRxTxTransaction>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d006      	beq.n	80055fe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80055fc:	e010      	b.n	8005620 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10b      	bne.n	800561e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	e000      	b.n	8005620 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800561e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005630:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005634:	4618      	mov	r0, r3
 8005636:	3730      	adds	r7, #48	; 0x30
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800564a:	b2db      	uxtb	r3, r3
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005668:	e04c      	b.n	8005704 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d048      	beq.n	8005704 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005672:	f7fd f807 	bl	8002684 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d902      	bls.n	8005688 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d13d      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005696:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a0:	d111      	bne.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056aa:	d004      	beq.n	80056b6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b4:	d107      	bne.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ce:	d10f      	bne.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e00f      	b.n	8005724 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	4013      	ands	r3, r2
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	429a      	cmp	r2, r3
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	429a      	cmp	r2, r3
 8005720:	d1a3      	bne.n	800566a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af02      	add	r7, sp, #8
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005740:	d111      	bne.n	8005766 <SPI_EndRxTransaction+0x3a>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800574a:	d004      	beq.n	8005756 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005754:	d107      	bne.n	8005766 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005764:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800576e:	d12a      	bne.n	80057c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005778:	d012      	beq.n	80057a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2200      	movs	r2, #0
 8005782:	2180      	movs	r1, #128	; 0x80
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f7ff ff67 	bl	8005658 <SPI_WaitFlagStateUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d02d      	beq.n	80057ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005794:	f043 0220 	orr.w	r2, r3, #32
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e026      	b.n	80057ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2200      	movs	r2, #0
 80057a8:	2101      	movs	r1, #1
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f7ff ff54 	bl	8005658 <SPI_WaitFlagStateUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01a      	beq.n	80057ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	f043 0220 	orr.w	r2, r3, #32
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e013      	b.n	80057ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2200      	movs	r2, #0
 80057ce:	2101      	movs	r1, #1
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f7ff ff41 	bl	8005658 <SPI_WaitFlagStateUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d007      	beq.n	80057ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e0:	f043 0220 	orr.w	r2, r3, #32
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e000      	b.n	80057ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005804:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <SPI_EndRxTxTransaction+0x7c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <SPI_EndRxTxTransaction+0x80>)
 800580a:	fba2 2303 	umull	r2, r3, r2, r3
 800580e:	0d5b      	lsrs	r3, r3, #21
 8005810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005814:	fb02 f303 	mul.w	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005822:	d112      	bne.n	800584a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2200      	movs	r2, #0
 800582c:	2180      	movs	r1, #128	; 0x80
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f7ff ff12 	bl	8005658 <SPI_WaitFlagStateUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d016      	beq.n	8005868 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	f043 0220 	orr.w	r2, r3, #32
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e00f      	b.n	800586a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	3b01      	subs	r3, #1
 8005854:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005860:	2b80      	cmp	r3, #128	; 0x80
 8005862:	d0f2      	beq.n	800584a <SPI_EndRxTxTransaction+0x52>
 8005864:	e000      	b.n	8005868 <SPI_EndRxTxTransaction+0x70>
        break;
 8005866:	bf00      	nop
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000050 	.word	0x20000050
 8005878:	165e9f81 	.word	0x165e9f81

0800587c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e01d      	b.n	80058ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f001 fb40 	bl	8006f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f000 f968 	bl	8005b90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b085      	sub	sp, #20
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b06      	cmp	r3, #6
 80058fa:	d007      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b082      	sub	sp, #8
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b02      	cmp	r3, #2
 800592e:	d122      	bne.n	8005976 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b02      	cmp	r3, #2
 800593c:	d11b      	bne.n	8005976 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f06f 0202 	mvn.w	r2, #2
 8005946:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f8f8 	bl	8005b52 <HAL_TIM_IC_CaptureCallback>
 8005962:	e005      	b.n	8005970 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f8ea 	bl	8005b3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8fb 	bl	8005b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b04      	cmp	r3, #4
 8005982:	d122      	bne.n	80059ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b04      	cmp	r3, #4
 8005990:	d11b      	bne.n	80059ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f06f 0204 	mvn.w	r2, #4
 800599a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f8ce 	bl	8005b52 <HAL_TIM_IC_CaptureCallback>
 80059b6:	e005      	b.n	80059c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f8c0 	bl	8005b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f8d1 	bl	8005b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d122      	bne.n	8005a1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	d11b      	bne.n	8005a1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f06f 0208 	mvn.w	r2, #8
 80059ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2204      	movs	r2, #4
 80059f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	f003 0303 	and.w	r3, r3, #3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f8a4 	bl	8005b52 <HAL_TIM_IC_CaptureCallback>
 8005a0a:	e005      	b.n	8005a18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f896 	bl	8005b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f8a7 	bl	8005b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	2b10      	cmp	r3, #16
 8005a2a:	d122      	bne.n	8005a72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f003 0310 	and.w	r3, r3, #16
 8005a36:	2b10      	cmp	r3, #16
 8005a38:	d11b      	bne.n	8005a72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f06f 0210 	mvn.w	r2, #16
 8005a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2208      	movs	r2, #8
 8005a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f87a 	bl	8005b52 <HAL_TIM_IC_CaptureCallback>
 8005a5e:	e005      	b.n	8005a6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f86c 	bl	8005b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f87d 	bl	8005b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d10e      	bne.n	8005a9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d107      	bne.n	8005a9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f06f 0201 	mvn.w	r2, #1
 8005a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f846 	bl	8005b2a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa8:	2b80      	cmp	r3, #128	; 0x80
 8005aaa:	d10e      	bne.n	8005aca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab6:	2b80      	cmp	r3, #128	; 0x80
 8005ab8:	d107      	bne.n	8005aca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f952 	bl	8005d6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d10e      	bne.n	8005af6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	d107      	bne.n	8005af6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f842 	bl	8005b7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d10e      	bne.n	8005b22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d107      	bne.n	8005b22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f06f 0220 	mvn.w	r2, #32
 8005b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f91c 	bl	8005d5a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b22:	bf00      	nop
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a40      	ldr	r2, [pc, #256]	; (8005ca4 <TIM_Base_SetConfig+0x114>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d013      	beq.n	8005bd0 <TIM_Base_SetConfig+0x40>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bae:	d00f      	beq.n	8005bd0 <TIM_Base_SetConfig+0x40>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a3d      	ldr	r2, [pc, #244]	; (8005ca8 <TIM_Base_SetConfig+0x118>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00b      	beq.n	8005bd0 <TIM_Base_SetConfig+0x40>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a3c      	ldr	r2, [pc, #240]	; (8005cac <TIM_Base_SetConfig+0x11c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d007      	beq.n	8005bd0 <TIM_Base_SetConfig+0x40>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a3b      	ldr	r2, [pc, #236]	; (8005cb0 <TIM_Base_SetConfig+0x120>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d003      	beq.n	8005bd0 <TIM_Base_SetConfig+0x40>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a3a      	ldr	r2, [pc, #232]	; (8005cb4 <TIM_Base_SetConfig+0x124>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d108      	bne.n	8005be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a2f      	ldr	r2, [pc, #188]	; (8005ca4 <TIM_Base_SetConfig+0x114>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d02b      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf0:	d027      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a2c      	ldr	r2, [pc, #176]	; (8005ca8 <TIM_Base_SetConfig+0x118>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d023      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a2b      	ldr	r2, [pc, #172]	; (8005cac <TIM_Base_SetConfig+0x11c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d01f      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a2a      	ldr	r2, [pc, #168]	; (8005cb0 <TIM_Base_SetConfig+0x120>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d01b      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a29      	ldr	r2, [pc, #164]	; (8005cb4 <TIM_Base_SetConfig+0x124>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d017      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a28      	ldr	r2, [pc, #160]	; (8005cb8 <TIM_Base_SetConfig+0x128>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a27      	ldr	r2, [pc, #156]	; (8005cbc <TIM_Base_SetConfig+0x12c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00f      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a26      	ldr	r2, [pc, #152]	; (8005cc0 <TIM_Base_SetConfig+0x130>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00b      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a25      	ldr	r2, [pc, #148]	; (8005cc4 <TIM_Base_SetConfig+0x134>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d007      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a24      	ldr	r2, [pc, #144]	; (8005cc8 <TIM_Base_SetConfig+0x138>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a23      	ldr	r2, [pc, #140]	; (8005ccc <TIM_Base_SetConfig+0x13c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d108      	bne.n	8005c54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ca4 <TIM_Base_SetConfig+0x114>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d003      	beq.n	8005c88 <TIM_Base_SetConfig+0xf8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a0c      	ldr	r2, [pc, #48]	; (8005cb4 <TIM_Base_SetConfig+0x124>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d103      	bne.n	8005c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	615a      	str	r2, [r3, #20]
}
 8005c96:	bf00      	nop
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40010000 	.word	0x40010000
 8005ca8:	40000400 	.word	0x40000400
 8005cac:	40000800 	.word	0x40000800
 8005cb0:	40000c00 	.word	0x40000c00
 8005cb4:	40010400 	.word	0x40010400
 8005cb8:	40014000 	.word	0x40014000
 8005cbc:	40014400 	.word	0x40014400
 8005cc0:	40014800 	.word	0x40014800
 8005cc4:	40001800 	.word	0x40001800
 8005cc8:	40001c00 	.word	0x40001c00
 8005ccc:	40002000 	.word	0x40002000

08005cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e032      	b.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d20:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d029      	beq.n	8005df0 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005da8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dac:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005db6:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8005dbc:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8005dc2:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8005dc8:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8005dce:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8005dd4:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8005dda:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8005de0:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e034      	b.n	8005e5a <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dfc:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e06:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005e0c:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005e20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e24:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e2e:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005e34:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005e3a:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8005e40:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005e46:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d02e      	beq.n	8005ee0 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005e8e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005e9e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005ea8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005eb2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005ebc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005ec6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	609a      	str	r2, [r3, #8]
 8005ede:	e03b      	b.n	8005f58 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ef0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005f02:	4313      	orrs	r3, r2
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f16:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005f26:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005f30:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005f3a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005f44:	4313      	orrs	r3, r2
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b086      	sub	sp, #24
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005f82:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8005f8c:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005f9e:	f7fc fb71 	bl	8002684 <HAL_GetTick>
 8005fa2:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005fa4:	e010      	b.n	8005fc8 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d00c      	beq.n	8005fc8 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <FMC_SDRAM_SendCommand+0x5e>
 8005fb4:	f7fc fb66 	bl	8002684 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d201      	bcs.n	8005fc8 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e006      	b.n	8005fd6 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f003 0320 	and.w	r3, r3, #32
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d0e8      	beq.n	8005fa6 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	695a      	ldr	r2, [r3, #20]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	0000      	movs	r0, r0
	...

08006008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006008:	b590      	push	{r4, r7, lr}
 800600a:	b0ef      	sub	sp, #444	; 0x1bc
 800600c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800600e:	f7fc fad3 	bl	80025b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006012:	f000 fa4d 	bl	80064b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006016:	f000 fcb3 	bl	8006980 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800601a:	f000 fad3 	bl	80065c4 <MX_DMA2D_Init>
  MX_FMC_Init();
 800601e:	f000 fc61 	bl	80068e4 <MX_FMC_Init>
  MX_I2C3_Init();
 8006022:	f000 fb01 	bl	8006628 <MX_I2C3_Init>
  MX_LTDC_Init();
 8006026:	f000 fb3f 	bl	80066a8 <MX_LTDC_Init>
  MX_SPI5_Init();
 800602a:	f000 fbef 	bl	800680c <MX_SPI5_Init>
  MX_TIM6_Init();
 800602e:	f000 fc23 	bl	8006878 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   BSP_LCD_Init();
 8006032:	f7fb fb13 	bl	800165c <BSP_LCD_Init>
   BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 8006036:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800603a:	2000      	movs	r0, #0
 800603c:	f7fb fb90 	bl	8001760 <BSP_LCD_LayerDefaultInit>
   BSP_LCD_Clear(LCD_COLOR_LIGHTBLUE);
 8006040:	48c5      	ldr	r0, [pc, #788]	; (8006358 <main+0x350>)
 8006042:	f7fb fc53 	bl	80018ec <BSP_LCD_Clear>
//   BSP_LCD_SetBackColor(0x66a3ffaa);
   BSP_LCD_SetBackColor(LCD_COLOR_LIGHTBLUE);
 8006046:	48c4      	ldr	r0, [pc, #784]	; (8006358 <main+0x350>)
 8006048:	f7fb fc06 	bl	8001858 <BSP_LCD_SetBackColor>
   HAL_TIM_Base_Start_IT(&htim6);
 800604c:	48c3      	ldr	r0, [pc, #780]	; (800635c <main+0x354>)
 800604e:	f7ff fc40 	bl	80058d2 <HAL_TIM_Base_Start_IT>
   RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; // włączenie zegara ADC1
 8006052:	4bc3      	ldr	r3, [pc, #780]	; (8006360 <main+0x358>)
 8006054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006056:	4ac2      	ldr	r2, [pc, #776]	; (8006360 <main+0x358>)
 8006058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800605c:	6453      	str	r3, [r2, #68]	; 0x44
   ADC1->CR2 |= ADC_CR2_ADON; // włączenie zasilania ADC1
 800605e:	4bc1      	ldr	r3, [pc, #772]	; (8006364 <main+0x35c>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	4ac0      	ldr	r2, [pc, #768]	; (8006364 <main+0x35c>)
 8006064:	f043 0301 	orr.w	r3, r3, #1
 8006068:	6093      	str	r3, [r2, #8]
   ADC->CCR |= ADC_CCR_TSVREFE; // włączenie czujnika temp
 800606a:	4bbf      	ldr	r3, [pc, #764]	; (8006368 <main+0x360>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	4abe      	ldr	r2, [pc, #760]	; (8006368 <main+0x360>)
 8006070:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006074:	6053      	str	r3, [r2, #4]
   ADC1->SQR3 |= 18U << ADC_SQR3_SQ1_Pos; // konfiguracja odczytu z 18 kanału (temperatura)
 8006076:	4bbb      	ldr	r3, [pc, #748]	; (8006364 <main+0x35c>)
 8006078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607a:	4aba      	ldr	r2, [pc, #744]	; (8006364 <main+0x35c>)
 800607c:	f043 0312 	orr.w	r3, r3, #18
 8006080:	6353      	str	r3, [r2, #52]	; 0x34


   int step = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   int temp = 21;
 8006088:	2315      	movs	r3, #21
 800608a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   int temp_night = 18;
 800608e:	2312      	movs	r3, #18
 8006090:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
   float temp_house;
   int tryb = 1;
 8006094:	2301      	movs	r3, #1
 8006096:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
   while (1)
   {
	   HAL_Delay(500);
 800609a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800609e:	f7fc fafd 	bl	800269c <HAL_Delay>
	   // Clear line
	   BSP_LCD_ClearStringLine(1);
 80060a2:	2001      	movs	r0, #1
 80060a4:	f7fb fc4a 	bl	800193c <BSP_LCD_ClearStringLine>
	   BSP_LCD_ClearStringLine(2);
 80060a8:	2002      	movs	r0, #2
 80060aa:	f7fb fc47 	bl	800193c <BSP_LCD_ClearStringLine>
	   BSP_LCD_ClearStringLine(3);
 80060ae:	2003      	movs	r0, #3
 80060b0:	f7fb fc44 	bl	800193c <BSP_LCD_ClearStringLine>
	   BSP_LCD_ClearStringLine(4);
 80060b4:	2004      	movs	r0, #4
 80060b6:	f7fb fc41 	bl	800193c <BSP_LCD_ClearStringLine>
	   BSP_LCD_ClearStringLine(5);
 80060ba:	2005      	movs	r0, #5
 80060bc:	f7fb fc3e 	bl	800193c <BSP_LCD_ClearStringLine>
	   // Deklaration
	   ADC1->CR2 |= ADC_CR2_SWSTART; // rozpoczęcie konwersji na ADC1
 80060c0:	4ba8      	ldr	r3, [pc, #672]	; (8006364 <main+0x35c>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	4aa7      	ldr	r2, [pc, #668]	; (8006364 <main+0x35c>)
 80060c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060ca:	6093      	str	r3, [r2, #8]
	   while((ADC1->SR & ADC_SR_EOC) == 0) { } // oczekiwanie na koniec konwersji
 80060cc:	bf00      	nop
 80060ce:	4ba5      	ldr	r3, [pc, #660]	; (8006364 <main+0x35c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f9      	beq.n	80060ce <main+0xc6>
	   uint32_t value = ADC1->DR; // odczytanie wartości z ADC1
 80060da:	4ba2      	ldr	r3, [pc, #648]	; (8006364 <main+0x35c>)
 80060dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060de:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	   // Teperature house
	   	  float vval = (3.0f * value) / 4095.0f;
 80060e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80060e6:	ee07 3a90 	vmov	s15, r3
 80060ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ee:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80060f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80060f6:	eddf 6a9d 	vldr	s13, [pc, #628]	; 800636c <main+0x364>
 80060fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060fe:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
	   	  float temperature = (vval - 0.76) / (2.5/1000) + 25.0f;
 8006102:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8006106:	f7fa fa2f 	bl	8000568 <__aeabi_f2d>
 800610a:	a38f      	add	r3, pc, #572	; (adr r3, 8006348 <main+0x340>)
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f7fa f8ca 	bl	80002a8 <__aeabi_dsub>
 8006114:	4603      	mov	r3, r0
 8006116:	460c      	mov	r4, r1
 8006118:	4618      	mov	r0, r3
 800611a:	4621      	mov	r1, r4
 800611c:	a38c      	add	r3, pc, #560	; (adr r3, 8006350 <main+0x348>)
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	f7fa fba3 	bl	800086c <__aeabi_ddiv>
 8006126:	4603      	mov	r3, r0
 8006128:	460c      	mov	r4, r1
 800612a:	4618      	mov	r0, r3
 800612c:	4621      	mov	r1, r4
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	4b8f      	ldr	r3, [pc, #572]	; (8006370 <main+0x368>)
 8006134:	f7fa f8ba 	bl	80002ac <__adddf3>
 8006138:	4603      	mov	r3, r0
 800613a:	460c      	mov	r4, r1
 800613c:	4618      	mov	r0, r3
 800613e:	4621      	mov	r1, r4
 8006140:	f7fa fd62 	bl	8000c08 <__aeabi_d2f>
 8006144:	4603      	mov	r3, r0
 8006146:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

		 temp_house = temperature-20;
 800614a:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 800614e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006152:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006156:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
		 char str_temp_house[100];
		 sprintf(str_temp_house, "T=%0.2fC", temp_house);
 800615a:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800615e:	f7fa fa03 	bl	8000568 <__aeabi_f2d>
 8006162:	4603      	mov	r3, r0
 8006164:	460c      	mov	r4, r1
 8006166:	4638      	mov	r0, r7
 8006168:	461a      	mov	r2, r3
 800616a:	4623      	mov	r3, r4
 800616c:	4981      	ldr	r1, [pc, #516]	; (8006374 <main+0x36c>)
 800616e:	f001 ff03 	bl	8007f78 <siprintf>
	   	 BSP_LCD_DisplayStringAtLine(1, (uint8_t*)&str_temp_house);
 8006172:	463b      	mov	r3, r7
 8006174:	4619      	mov	r1, r3
 8006176:	2001      	movs	r0, #1
 8006178:	f7fb fd42 	bl	8001c00 <BSP_LCD_DisplayStringAtLine>


	   if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)){
 800617c:	2104      	movs	r1, #4
 800617e:	487e      	ldr	r0, [pc, #504]	; (8006378 <main+0x370>)
 8006180:	f7fd fabc 	bl	80036fc <HAL_GPIO_ReadPin>
 8006184:	4603      	mov	r3, r0
 8006186:	2b01      	cmp	r3, #1
 8006188:	d10b      	bne.n	80061a2 <main+0x19a>
		   step++;
 800618a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800618e:	3301      	adds	r3, #1
 8006190:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		   if(step == 5){
 8006194:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8006198:	2b05      	cmp	r3, #5
 800619a:	d102      	bne.n	80061a2 <main+0x19a>
			   step=0;
 800619c:	2300      	movs	r3, #0
 800619e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		   }
	   }

	   // add time to click
	   if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) && step==0){
 80061a2:	2102      	movs	r1, #2
 80061a4:	4874      	ldr	r0, [pc, #464]	; (8006378 <main+0x370>)
 80061a6:	f7fd faa9 	bl	80036fc <HAL_GPIO_ReadPin>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d110      	bne.n	80061d2 <main+0x1ca>
 80061b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10c      	bne.n	80061d2 <main+0x1ca>
		   if(h >= 24){
 80061b8:	4b70      	ldr	r3, [pc, #448]	; (800637c <main+0x374>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b17      	cmp	r3, #23
 80061be:	dd02      	ble.n	80061c6 <main+0x1be>
			   h=0;
 80061c0:	4b6e      	ldr	r3, [pc, #440]	; (800637c <main+0x374>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
		   }
		   h++;
 80061c6:	4b6d      	ldr	r3, [pc, #436]	; (800637c <main+0x374>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3301      	adds	r3, #1
 80061cc:	4a6b      	ldr	r2, [pc, #428]	; (800637c <main+0x374>)
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	e05e      	b.n	8006290 <main+0x288>
	   } else if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) && step==1){
 80061d2:	2102      	movs	r1, #2
 80061d4:	4868      	ldr	r0, [pc, #416]	; (8006378 <main+0x370>)
 80061d6:	f7fd fa91 	bl	80036fc <HAL_GPIO_ReadPin>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d110      	bne.n	8006202 <main+0x1fa>
 80061e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d10c      	bne.n	8006202 <main+0x1fa>
		   if(min >= 60){
 80061e8:	4b65      	ldr	r3, [pc, #404]	; (8006380 <main+0x378>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b3b      	cmp	r3, #59	; 0x3b
 80061ee:	dd02      	ble.n	80061f6 <main+0x1ee>
			   min=0;
 80061f0:	4b63      	ldr	r3, [pc, #396]	; (8006380 <main+0x378>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
		   }
		   min++;
 80061f6:	4b62      	ldr	r3, [pc, #392]	; (8006380 <main+0x378>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3301      	adds	r3, #1
 80061fc:	4a60      	ldr	r2, [pc, #384]	; (8006380 <main+0x378>)
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	e046      	b.n	8006290 <main+0x288>
	   }else if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) && step==2){
 8006202:	2102      	movs	r1, #2
 8006204:	485c      	ldr	r0, [pc, #368]	; (8006378 <main+0x370>)
 8006206:	f7fd fa79 	bl	80036fc <HAL_GPIO_ReadPin>
 800620a:	4603      	mov	r3, r0
 800620c:	2b01      	cmp	r3, #1
 800620e:	d110      	bne.n	8006232 <main+0x22a>
 8006210:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8006214:	2b02      	cmp	r3, #2
 8006216:	d10c      	bne.n	8006232 <main+0x22a>
		   if(sec >= 60){
 8006218:	4b5a      	ldr	r3, [pc, #360]	; (8006384 <main+0x37c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b3b      	cmp	r3, #59	; 0x3b
 800621e:	dd02      	ble.n	8006226 <main+0x21e>
		   	   sec=0;
 8006220:	4b58      	ldr	r3, [pc, #352]	; (8006384 <main+0x37c>)
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
		   }
		   sec++;
 8006226:	4b57      	ldr	r3, [pc, #348]	; (8006384 <main+0x37c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3301      	adds	r3, #1
 800622c:	4a55      	ldr	r2, [pc, #340]	; (8006384 <main+0x37c>)
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	e02e      	b.n	8006290 <main+0x288>
	   }
	   // add value to temperature
	   else if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) && step==3){
 8006232:	2102      	movs	r1, #2
 8006234:	4850      	ldr	r0, [pc, #320]	; (8006378 <main+0x370>)
 8006236:	f7fd fa61 	bl	80036fc <HAL_GPIO_ReadPin>
 800623a:	4603      	mov	r3, r0
 800623c:	2b01      	cmp	r3, #1
 800623e:	d110      	bne.n	8006262 <main+0x25a>
 8006240:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8006244:	2b03      	cmp	r3, #3
 8006246:	d10c      	bne.n	8006262 <main+0x25a>
		    if(temp >= 30){
 8006248:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800624c:	2b1d      	cmp	r3, #29
 800624e:	dd02      	ble.n	8006256 <main+0x24e>
		    	temp=18;
 8006250:	2312      	movs	r3, #18
 8006252:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
		   	}
		   	temp++;
 8006256:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800625a:	3301      	adds	r3, #1
 800625c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006260:	e016      	b.n	8006290 <main+0x288>
		}
	   else if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) && step==4){
 8006262:	2102      	movs	r1, #2
 8006264:	4844      	ldr	r0, [pc, #272]	; (8006378 <main+0x370>)
 8006266:	f7fd fa49 	bl	80036fc <HAL_GPIO_ReadPin>
 800626a:	4603      	mov	r3, r0
 800626c:	2b01      	cmp	r3, #1
 800626e:	d10f      	bne.n	8006290 <main+0x288>
 8006270:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8006274:	2b04      	cmp	r3, #4
 8006276:	d10b      	bne.n	8006290 <main+0x288>
	  		    if(temp_night >= 28){
 8006278:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800627c:	2b1b      	cmp	r3, #27
 800627e:	dd02      	ble.n	8006286 <main+0x27e>
	  		    	temp_night=16;
 8006280:	2310      	movs	r3, #16
 8006282:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	  		   	}
	  		  temp_night++;
 8006286:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800628a:	3301      	adds	r3, #1
 800628c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	  		}

	   // Display time
	  char time[100];
	  sprintf(time, "%02d:%02d:%02d", h,min,sec);
 8006290:	4b3a      	ldr	r3, [pc, #232]	; (800637c <main+0x374>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b3a      	ldr	r3, [pc, #232]	; (8006380 <main+0x378>)
 8006296:	6819      	ldr	r1, [r3, #0]
 8006298:	4b3a      	ldr	r3, [pc, #232]	; (8006384 <main+0x37c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	460b      	mov	r3, r1
 80062a4:	4938      	ldr	r1, [pc, #224]	; (8006388 <main+0x380>)
 80062a6:	f001 fe67 	bl	8007f78 <siprintf>
	  BSP_LCD_DisplayStringAtLine(2, (uint8_t*)&time);
 80062aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80062ae:	4619      	mov	r1, r3
 80062b0:	2002      	movs	r0, #2
 80062b2:	f7fb fca5 	bl	8001c00 <BSP_LCD_DisplayStringAtLine>

	  // Day and night function
	  	  if (h >=22 || h<=7){
 80062b6:	4b31      	ldr	r3, [pc, #196]	; (800637c <main+0x374>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b15      	cmp	r3, #21
 80062bc:	dc03      	bgt.n	80062c6 <main+0x2be>
 80062be:	4b2f      	ldr	r3, [pc, #188]	; (800637c <main+0x374>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b07      	cmp	r3, #7
 80062c4:	dc07      	bgt.n	80062d6 <main+0x2ce>
	  		  BSP_LCD_DisplayStringAtLine(3, (uint8_t*)"Tryb nocny");
 80062c6:	4931      	ldr	r1, [pc, #196]	; (800638c <main+0x384>)
 80062c8:	2003      	movs	r0, #3
 80062ca:	f7fb fc99 	bl	8001c00 <BSP_LCD_DisplayStringAtLine>
	  		  tryb = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80062d4:	e006      	b.n	80062e4 <main+0x2dc>
	  	  }
	  	  else {
	  		 BSP_LCD_DisplayStringAtLine(3, (uint8_t*)"Tryb dzienny");
 80062d6:	492e      	ldr	r1, [pc, #184]	; (8006390 <main+0x388>)
 80062d8:	2003      	movs	r0, #3
 80062da:	f7fb fc91 	bl	8001c00 <BSP_LCD_DisplayStringAtLine>
	  		 tryb = 1;
 80062de:	2301      	movs	r3, #1
 80062e0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	  	  }

 	  // Launch defro
	  if( tryb == 1){
 80062e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d159      	bne.n	80063a0 <main+0x398>
		  if (temp_house < temp){
 80062ec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062f8:	ed97 7a64 	vldr	s14, [r7, #400]	; 0x190
 80062fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006304:	d50e      	bpl.n	8006324 <main+0x31c>
			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8006306:	2200      	movs	r2, #0
 8006308:	2102      	movs	r1, #2
 800630a:	4822      	ldr	r0, [pc, #136]	; (8006394 <main+0x38c>)
 800630c:	f7fd fa0e 	bl	800372c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8006310:	2201      	movs	r2, #1
 8006312:	2104      	movs	r1, #4
 8006314:	481f      	ldr	r0, [pc, #124]	; (8006394 <main+0x38c>)
 8006316:	f7fd fa09 	bl	800372c <HAL_GPIO_WritePin>
			 BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"Zalaczony");
 800631a:	491f      	ldr	r1, [pc, #124]	; (8006398 <main+0x390>)
 800631c:	2000      	movs	r0, #0
 800631e:	f7fb fc6f 	bl	8001c00 <BSP_LCD_DisplayStringAtLine>
 8006322:	e067      	b.n	80063f4 <main+0x3ec>
			  }
		  else {
			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8006324:	2201      	movs	r2, #1
 8006326:	2102      	movs	r1, #2
 8006328:	481a      	ldr	r0, [pc, #104]	; (8006394 <main+0x38c>)
 800632a:	f7fd f9ff 	bl	800372c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800632e:	2200      	movs	r2, #0
 8006330:	2104      	movs	r1, #4
 8006332:	4818      	ldr	r0, [pc, #96]	; (8006394 <main+0x38c>)
 8006334:	f7fd f9fa 	bl	800372c <HAL_GPIO_WritePin>
			 BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"Wylaczony");
 8006338:	4918      	ldr	r1, [pc, #96]	; (800639c <main+0x394>)
 800633a:	2000      	movs	r0, #0
 800633c:	f7fb fc60 	bl	8001c00 <BSP_LCD_DisplayStringAtLine>
 8006340:	e058      	b.n	80063f4 <main+0x3ec>
 8006342:	bf00      	nop
 8006344:	f3af 8000 	nop.w
 8006348:	851eb852 	.word	0x851eb852
 800634c:	3fe851eb 	.word	0x3fe851eb
 8006350:	47ae147b 	.word	0x47ae147b
 8006354:	3f647ae1 	.word	0x3f647ae1
 8006358:	ff8080ff 	.word	0xff8080ff
 800635c:	20000608 	.word	0x20000608
 8006360:	40023800 	.word	0x40023800
 8006364:	40012000 	.word	0x40012000
 8006368:	40012300 	.word	0x40012300
 800636c:	457ff000 	.word	0x457ff000
 8006370:	40390000 	.word	0x40390000
 8006374:	0800ad78 	.word	0x0800ad78
 8006378:	40020000 	.word	0x40020000
 800637c:	200003e8 	.word	0x200003e8
 8006380:	200003ec 	.word	0x200003ec
 8006384:	200003f0 	.word	0x200003f0
 8006388:	0800ad84 	.word	0x0800ad84
 800638c:	0800ad94 	.word	0x0800ad94
 8006390:	0800ada0 	.word	0x0800ada0
 8006394:	40020800 	.word	0x40020800
 8006398:	0800adb0 	.word	0x0800adb0
 800639c:	0800adbc 	.word	0x0800adbc
		  }
	  }
	  else{
		  if (temp_house < temp_night){
 80063a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063ac:	ed97 7a64 	vldr	s14, [r7, #400]	; 0x190
 80063b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b8:	d50e      	bpl.n	80063d8 <main+0x3d0>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80063ba:	2200      	movs	r2, #0
 80063bc:	2102      	movs	r1, #2
 80063be:	4837      	ldr	r0, [pc, #220]	; (800649c <main+0x494>)
 80063c0:	f7fd f9b4 	bl	800372c <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80063c4:	2201      	movs	r2, #1
 80063c6:	2104      	movs	r1, #4
 80063c8:	4834      	ldr	r0, [pc, #208]	; (800649c <main+0x494>)
 80063ca:	f7fd f9af 	bl	800372c <HAL_GPIO_WritePin>
				 BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"Zalaczony");
 80063ce:	4934      	ldr	r1, [pc, #208]	; (80064a0 <main+0x498>)
 80063d0:	2000      	movs	r0, #0
 80063d2:	f7fb fc15 	bl	8001c00 <BSP_LCD_DisplayStringAtLine>
 80063d6:	e00d      	b.n	80063f4 <main+0x3ec>
				  }
			  else {
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80063d8:	2201      	movs	r2, #1
 80063da:	2102      	movs	r1, #2
 80063dc:	482f      	ldr	r0, [pc, #188]	; (800649c <main+0x494>)
 80063de:	f7fd f9a5 	bl	800372c <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80063e2:	2200      	movs	r2, #0
 80063e4:	2104      	movs	r1, #4
 80063e6:	482d      	ldr	r0, [pc, #180]	; (800649c <main+0x494>)
 80063e8:	f7fd f9a0 	bl	800372c <HAL_GPIO_WritePin>
				 BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"Wylaczony");
 80063ec:	492d      	ldr	r1, [pc, #180]	; (80064a4 <main+0x49c>)
 80063ee:	2000      	movs	r0, #0
 80063f0:	f7fb fc06 	bl	8001c00 <BSP_LCD_DisplayStringAtLine>
	  }


 	 // Set temperature day
 	 char temper[100];
 	 sprintf(temper, "Dzien: %d", temp);
 80063f4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80063f8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80063fc:	492a      	ldr	r1, [pc, #168]	; (80064a8 <main+0x4a0>)
 80063fe:	4618      	mov	r0, r3
 8006400:	f001 fdba 	bl	8007f78 <siprintf>
 	 BSP_LCD_DisplayStringAtLine(4, (uint8_t*) &temper);
 8006404:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006408:	4619      	mov	r1, r3
 800640a:	2004      	movs	r0, #4
 800640c:	f7fb fbf8 	bl	8001c00 <BSP_LCD_DisplayStringAtLine>


 	 // Set temperature night

 	 char temper_night[100];
 	 sprintf(temper_night, "Noc: %d", temp_night);
 8006410:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8006414:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8006418:	4924      	ldr	r1, [pc, #144]	; (80064ac <main+0x4a4>)
 800641a:	4618      	mov	r0, r3
 800641c:	f001 fdac 	bl	8007f78 <siprintf>
	 BSP_LCD_DisplayStringAtLine(5, (uint8_t*) &temper_night);
 8006420:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8006424:	4619      	mov	r1, r3
 8006426:	2005      	movs	r0, #5
 8006428:	f7fb fbea 	bl	8001c00 <BSP_LCD_DisplayStringAtLine>


 	  // Rectangle for step
 	 if(step == 0){
 800642c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8006430:	2b00      	cmp	r3, #0
 8006432:	d106      	bne.n	8006442 <main+0x43a>
 		BSP_LCD_DrawRect(0, 42, 35, 30);
 8006434:	231e      	movs	r3, #30
 8006436:	2223      	movs	r2, #35	; 0x23
 8006438:	212a      	movs	r1, #42	; 0x2a
 800643a:	2000      	movs	r0, #0
 800643c:	f7fb fc78 	bl	8001d30 <BSP_LCD_DrawRect>
 8006440:	e62b      	b.n	800609a <main+0x92>
 	 }
 	 else if(step == 1){
 8006442:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8006446:	2b01      	cmp	r3, #1
 8006448:	d106      	bne.n	8006458 <main+0x450>
 	 		BSP_LCD_DrawRect(50, 42, 35, 30);
 800644a:	231e      	movs	r3, #30
 800644c:	2223      	movs	r2, #35	; 0x23
 800644e:	212a      	movs	r1, #42	; 0x2a
 8006450:	2032      	movs	r0, #50	; 0x32
 8006452:	f7fb fc6d 	bl	8001d30 <BSP_LCD_DrawRect>
 8006456:	e620      	b.n	800609a <main+0x92>
 	 	 }
 	 else if(step == 2){
 8006458:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800645c:	2b02      	cmp	r3, #2
 800645e:	d106      	bne.n	800646e <main+0x466>
 	 		BSP_LCD_DrawRect(100, 42, 35, 30);
 8006460:	231e      	movs	r3, #30
 8006462:	2223      	movs	r2, #35	; 0x23
 8006464:	212a      	movs	r1, #42	; 0x2a
 8006466:	2064      	movs	r0, #100	; 0x64
 8006468:	f7fb fc62 	bl	8001d30 <BSP_LCD_DrawRect>
 800646c:	e615      	b.n	800609a <main+0x92>
 	 	 }
 	 else if(step == 3){
 800646e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8006472:	2b03      	cmp	r3, #3
 8006474:	d106      	bne.n	8006484 <main+0x47c>
 		    BSP_LCD_DrawRect(115, 89, 35, 30);
 8006476:	231e      	movs	r3, #30
 8006478:	2223      	movs	r2, #35	; 0x23
 800647a:	2159      	movs	r1, #89	; 0x59
 800647c:	2073      	movs	r0, #115	; 0x73
 800647e:	f7fb fc57 	bl	8001d30 <BSP_LCD_DrawRect>
 8006482:	e60a      	b.n	800609a <main+0x92>
 	 }
 	 else if (step == 4){
 8006484:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8006488:	2b04      	cmp	r3, #4
 800648a:	f47f ae06 	bne.w	800609a <main+0x92>
 		 	BSP_LCD_DrawRect(83, 113, 35, 30);
 800648e:	231e      	movs	r3, #30
 8006490:	2223      	movs	r2, #35	; 0x23
 8006492:	2171      	movs	r1, #113	; 0x71
 8006494:	2053      	movs	r0, #83	; 0x53
 8006496:	f7fb fc4b 	bl	8001d30 <BSP_LCD_DrawRect>
   {
 800649a:	e5fe      	b.n	800609a <main+0x92>
 800649c:	40020800 	.word	0x40020800
 80064a0:	0800adb0 	.word	0x0800adb0
 80064a4:	0800adbc 	.word	0x0800adbc
 80064a8:	0800adc8 	.word	0x0800adc8
 80064ac:	0800add4 	.word	0x0800add4

080064b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b0a0      	sub	sp, #128	; 0x80
 80064b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80064b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80064ba:	2230      	movs	r2, #48	; 0x30
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 ff0e 	bl	80072e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80064c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	609a      	str	r2, [r3, #8]
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80064d4:	f107 030c 	add.w	r3, r7, #12
 80064d8:	2230      	movs	r2, #48	; 0x30
 80064da:	2100      	movs	r1, #0
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 feff 	bl	80072e0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80064e2:	2300      	movs	r3, #0
 80064e4:	60bb      	str	r3, [r7, #8]
 80064e6:	4b35      	ldr	r3, [pc, #212]	; (80065bc <SystemClock_Config+0x10c>)
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	4a34      	ldr	r2, [pc, #208]	; (80065bc <SystemClock_Config+0x10c>)
 80064ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f0:	6413      	str	r3, [r2, #64]	; 0x40
 80064f2:	4b32      	ldr	r3, [pc, #200]	; (80065bc <SystemClock_Config+0x10c>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fa:	60bb      	str	r3, [r7, #8]
 80064fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80064fe:	2300      	movs	r3, #0
 8006500:	607b      	str	r3, [r7, #4]
 8006502:	4b2f      	ldr	r3, [pc, #188]	; (80065c0 <SystemClock_Config+0x110>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2e      	ldr	r2, [pc, #184]	; (80065c0 <SystemClock_Config+0x110>)
 8006508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	4b2c      	ldr	r3, [pc, #176]	; (80065c0 <SystemClock_Config+0x110>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006516:	607b      	str	r3, [r7, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800651a:	2301      	movs	r3, #1
 800651c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800651e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006522:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006524:	2302      	movs	r3, #2
 8006526:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006528:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800652c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800652e:	2304      	movs	r3, #4
 8006530:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006532:	23b4      	movs	r3, #180	; 0xb4
 8006534:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006536:	2302      	movs	r3, #2
 8006538:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800653a:	2304      	movs	r3, #4
 800653c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800653e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006542:	4618      	mov	r0, r3
 8006544:	f7fd fdd0 	bl	80040e8 <HAL_RCC_OscConfig>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800654e:	f000 fabb 	bl	8006ac8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006552:	f7fd fd79 	bl	8004048 <HAL_PWREx_EnableOverDrive>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800655c:	f000 fab4 	bl	8006ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006560:	230f      	movs	r3, #15
 8006562:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006564:	2302      	movs	r3, #2
 8006566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006568:	2300      	movs	r3, #0
 800656a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800656c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006570:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006576:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006578:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800657c:	2105      	movs	r1, #5
 800657e:	4618      	mov	r0, r3
 8006580:	f7fd fff4 	bl	800456c <HAL_RCC_ClockConfig>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800658a:	f000 fa9d 	bl	8006ac8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800658e:	2308      	movs	r3, #8
 8006590:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 166;
 8006592:	23a6      	movs	r3, #166	; 0xa6
 8006594:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8006596:	2302      	movs	r3, #2
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800659a:	2300      	movs	r3, #0
 800659c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800659e:	f107 030c 	add.w	r3, r7, #12
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe f9bc 	bl	8004920 <HAL_RCCEx_PeriphCLKConfig>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <SystemClock_Config+0x102>
  {
    Error_Handler();
 80065ae:	f000 fa8b 	bl	8006ac8 <Error_Handler>
  }
}
 80065b2:	bf00      	nop
 80065b4:	3780      	adds	r7, #128	; 0x80
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40023800 	.word	0x40023800
 80065c0:	40007000 	.word	0x40007000

080065c4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80065c8:	4b15      	ldr	r3, [pc, #84]	; (8006620 <MX_DMA2D_Init+0x5c>)
 80065ca:	4a16      	ldr	r2, [pc, #88]	; (8006624 <MX_DMA2D_Init+0x60>)
 80065cc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80065ce:	4b14      	ldr	r3, [pc, #80]	; (8006620 <MX_DMA2D_Init+0x5c>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80065d4:	4b12      	ldr	r3, [pc, #72]	; (8006620 <MX_DMA2D_Init+0x5c>)
 80065d6:	2202      	movs	r2, #2
 80065d8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80065da:	4b11      	ldr	r3, [pc, #68]	; (8006620 <MX_DMA2D_Init+0x5c>)
 80065dc:	2200      	movs	r2, #0
 80065de:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80065e0:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <MX_DMA2D_Init+0x5c>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80065e6:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <MX_DMA2D_Init+0x5c>)
 80065e8:	2202      	movs	r2, #2
 80065ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80065ec:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <MX_DMA2D_Init+0x5c>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80065f2:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <MX_DMA2D_Init+0x5c>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80065f8:	4809      	ldr	r0, [pc, #36]	; (8006620 <MX_DMA2D_Init+0x5c>)
 80065fa:	f7fc fb3f 	bl	8002c7c <HAL_DMA2D_Init>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8006604:	f000 fa60 	bl	8006ac8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8006608:	2101      	movs	r1, #1
 800660a:	4805      	ldr	r0, [pc, #20]	; (8006620 <MX_DMA2D_Init+0x5c>)
 800660c:	f7fc fc94 	bl	8002f38 <HAL_DMA2D_ConfigLayer>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8006616:	f000 fa57 	bl	8006ac8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800661a:	bf00      	nop
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000648 	.word	0x20000648
 8006624:	4002b000 	.word	0x4002b000

08006628 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800662c:	4b1b      	ldr	r3, [pc, #108]	; (800669c <MX_I2C3_Init+0x74>)
 800662e:	4a1c      	ldr	r2, [pc, #112]	; (80066a0 <MX_I2C3_Init+0x78>)
 8006630:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8006632:	4b1a      	ldr	r3, [pc, #104]	; (800669c <MX_I2C3_Init+0x74>)
 8006634:	4a1b      	ldr	r2, [pc, #108]	; (80066a4 <MX_I2C3_Init+0x7c>)
 8006636:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006638:	4b18      	ldr	r3, [pc, #96]	; (800669c <MX_I2C3_Init+0x74>)
 800663a:	2200      	movs	r2, #0
 800663c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800663e:	4b17      	ldr	r3, [pc, #92]	; (800669c <MX_I2C3_Init+0x74>)
 8006640:	2200      	movs	r2, #0
 8006642:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006644:	4b15      	ldr	r3, [pc, #84]	; (800669c <MX_I2C3_Init+0x74>)
 8006646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800664a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800664c:	4b13      	ldr	r3, [pc, #76]	; (800669c <MX_I2C3_Init+0x74>)
 800664e:	2200      	movs	r2, #0
 8006650:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8006652:	4b12      	ldr	r3, [pc, #72]	; (800669c <MX_I2C3_Init+0x74>)
 8006654:	2200      	movs	r2, #0
 8006656:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006658:	4b10      	ldr	r3, [pc, #64]	; (800669c <MX_I2C3_Init+0x74>)
 800665a:	2200      	movs	r2, #0
 800665c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800665e:	4b0f      	ldr	r3, [pc, #60]	; (800669c <MX_I2C3_Init+0x74>)
 8006660:	2200      	movs	r2, #0
 8006662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006664:	480d      	ldr	r0, [pc, #52]	; (800669c <MX_I2C3_Init+0x74>)
 8006666:	f7fd f87b 	bl	8003760 <HAL_I2C_Init>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8006670:	f000 fa2a 	bl	8006ac8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006674:	2100      	movs	r1, #0
 8006676:	4809      	ldr	r0, [pc, #36]	; (800669c <MX_I2C3_Init+0x74>)
 8006678:	f7fd f99a 	bl	80039b0 <HAL_I2CEx_ConfigAnalogFilter>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8006682:	f000 fa21 	bl	8006ac8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8006686:	2100      	movs	r1, #0
 8006688:	4804      	ldr	r0, [pc, #16]	; (800669c <MX_I2C3_Init+0x74>)
 800668a:	f7fd f9cd 	bl	8003a28 <HAL_I2CEx_ConfigDigitalFilter>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8006694:	f000 fa18 	bl	8006ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8006698:	bf00      	nop
 800669a:	bd80      	pop	{r7, pc}
 800669c:	200004b4 	.word	0x200004b4
 80066a0:	40005c00 	.word	0x40005c00
 80066a4:	000186a0 	.word	0x000186a0

080066a8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b09a      	sub	sp, #104	; 0x68
 80066ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80066ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80066b2:	2234      	movs	r2, #52	; 0x34
 80066b4:	2100      	movs	r1, #0
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fe12 	bl	80072e0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80066bc:	463b      	mov	r3, r7
 80066be:	2234      	movs	r2, #52	; 0x34
 80066c0:	2100      	movs	r1, #0
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fe0c 	bl	80072e0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80066c8:	4b4e      	ldr	r3, [pc, #312]	; (8006804 <MX_LTDC_Init+0x15c>)
 80066ca:	4a4f      	ldr	r2, [pc, #316]	; (8006808 <MX_LTDC_Init+0x160>)
 80066cc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80066ce:	4b4d      	ldr	r3, [pc, #308]	; (8006804 <MX_LTDC_Init+0x15c>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80066d4:	4b4b      	ldr	r3, [pc, #300]	; (8006804 <MX_LTDC_Init+0x15c>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80066da:	4b4a      	ldr	r3, [pc, #296]	; (8006804 <MX_LTDC_Init+0x15c>)
 80066dc:	2200      	movs	r2, #0
 80066de:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80066e0:	4b48      	ldr	r3, [pc, #288]	; (8006804 <MX_LTDC_Init+0x15c>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80066e6:	4b47      	ldr	r3, [pc, #284]	; (8006804 <MX_LTDC_Init+0x15c>)
 80066e8:	2207      	movs	r2, #7
 80066ea:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80066ec:	4b45      	ldr	r3, [pc, #276]	; (8006804 <MX_LTDC_Init+0x15c>)
 80066ee:	2203      	movs	r2, #3
 80066f0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80066f2:	4b44      	ldr	r3, [pc, #272]	; (8006804 <MX_LTDC_Init+0x15c>)
 80066f4:	220e      	movs	r2, #14
 80066f6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80066f8:	4b42      	ldr	r3, [pc, #264]	; (8006804 <MX_LTDC_Init+0x15c>)
 80066fa:	2205      	movs	r2, #5
 80066fc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 80066fe:	4b41      	ldr	r3, [pc, #260]	; (8006804 <MX_LTDC_Init+0x15c>)
 8006700:	22fe      	movs	r2, #254	; 0xfe
 8006702:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 8006704:	4b3f      	ldr	r3, [pc, #252]	; (8006804 <MX_LTDC_Init+0x15c>)
 8006706:	f240 1245 	movw	r2, #325	; 0x145
 800670a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 260;
 800670c:	4b3d      	ldr	r3, [pc, #244]	; (8006804 <MX_LTDC_Init+0x15c>)
 800670e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006712:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8006714:	4b3b      	ldr	r3, [pc, #236]	; (8006804 <MX_LTDC_Init+0x15c>)
 8006716:	f240 1247 	movw	r2, #327	; 0x147
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800671c:	4b39      	ldr	r3, [pc, #228]	; (8006804 <MX_LTDC_Init+0x15c>)
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006724:	4b37      	ldr	r3, [pc, #220]	; (8006804 <MX_LTDC_Init+0x15c>)
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800672c:	4b35      	ldr	r3, [pc, #212]	; (8006804 <MX_LTDC_Init+0x15c>)
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8006734:	4833      	ldr	r0, [pc, #204]	; (8006804 <MX_LTDC_Init+0x15c>)
 8006736:	f7fd f9b7 	bl	8003aa8 <HAL_LTDC_Init>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 8006740:	f000 f9c2 	bl	8006ac8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8006744:	2300      	movs	r3, #0
 8006746:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006754:	2300      	movs	r3, #0
 8006756:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8006758:	2300      	movs	r3, #0
 800675a:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8006760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006764:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8006766:	2305      	movs	r3, #5
 8006768:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800677c:	2300      	movs	r3, #0
 800677e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8006788:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800678c:	2200      	movs	r2, #0
 800678e:	4619      	mov	r1, r3
 8006790:	481c      	ldr	r0, [pc, #112]	; (8006804 <MX_LTDC_Init+0x15c>)
 8006792:	f7fd fa59 	bl	8003c48 <HAL_LTDC_ConfigLayer>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 800679c:	f000 f994 	bl	8006ac8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80067b0:	2300      	movs	r3, #0
 80067b2:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80067bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c0:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80067c2:	2305      	movs	r3, #5
 80067c4:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80067e4:	463b      	mov	r3, r7
 80067e6:	2201      	movs	r2, #1
 80067e8:	4619      	mov	r1, r3
 80067ea:	4806      	ldr	r0, [pc, #24]	; (8006804 <MX_LTDC_Init+0x15c>)
 80067ec:	f7fd fa2c 	bl	8003c48 <HAL_LTDC_ConfigLayer>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <MX_LTDC_Init+0x152>
  {
    Error_Handler();
 80067f6:	f000 f967 	bl	8006ac8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80067fa:	bf00      	nop
 80067fc:	3768      	adds	r7, #104	; 0x68
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20000560 	.word	0x20000560
 8006808:	40016800 	.word	0x40016800

0800680c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8006810:	4b17      	ldr	r3, [pc, #92]	; (8006870 <MX_SPI5_Init+0x64>)
 8006812:	4a18      	ldr	r2, [pc, #96]	; (8006874 <MX_SPI5_Init+0x68>)
 8006814:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8006816:	4b16      	ldr	r3, [pc, #88]	; (8006870 <MX_SPI5_Init+0x64>)
 8006818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800681c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800681e:	4b14      	ldr	r3, [pc, #80]	; (8006870 <MX_SPI5_Init+0x64>)
 8006820:	2200      	movs	r2, #0
 8006822:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8006824:	4b12      	ldr	r3, [pc, #72]	; (8006870 <MX_SPI5_Init+0x64>)
 8006826:	2200      	movs	r2, #0
 8006828:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800682a:	4b11      	ldr	r3, [pc, #68]	; (8006870 <MX_SPI5_Init+0x64>)
 800682c:	2200      	movs	r2, #0
 800682e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006830:	4b0f      	ldr	r3, [pc, #60]	; (8006870 <MX_SPI5_Init+0x64>)
 8006832:	2200      	movs	r2, #0
 8006834:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8006836:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <MX_SPI5_Init+0x64>)
 8006838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800683c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800683e:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <MX_SPI5_Init+0x64>)
 8006840:	2200      	movs	r2, #0
 8006842:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006844:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <MX_SPI5_Init+0x64>)
 8006846:	2200      	movs	r2, #0
 8006848:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800684a:	4b09      	ldr	r3, [pc, #36]	; (8006870 <MX_SPI5_Init+0x64>)
 800684c:	2200      	movs	r2, #0
 800684e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006850:	4b07      	ldr	r3, [pc, #28]	; (8006870 <MX_SPI5_Init+0x64>)
 8006852:	2200      	movs	r2, #0
 8006854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <MX_SPI5_Init+0x64>)
 8006858:	220a      	movs	r2, #10
 800685a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800685c:	4804      	ldr	r0, [pc, #16]	; (8006870 <MX_SPI5_Init+0x64>)
 800685e:	f7fe fa82 	bl	8004d66 <HAL_SPI_Init>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8006868:	f000 f92e 	bl	8006ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800686c:	bf00      	nop
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20000508 	.word	0x20000508
 8006874:	40015000 	.word	0x40015000

08006878 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800687e:	463b      	mov	r3, r7
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006886:	4b15      	ldr	r3, [pc, #84]	; (80068dc <MX_TIM6_Init+0x64>)
 8006888:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <MX_TIM6_Init+0x68>)
 800688a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9488;
 800688c:	4b13      	ldr	r3, [pc, #76]	; (80068dc <MX_TIM6_Init+0x64>)
 800688e:	f242 5210 	movw	r2, #9488	; 0x2510
 8006892:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006894:	4b11      	ldr	r3, [pc, #68]	; (80068dc <MX_TIM6_Init+0x64>)
 8006896:	2200      	movs	r2, #0
 8006898:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9488;
 800689a:	4b10      	ldr	r3, [pc, #64]	; (80068dc <MX_TIM6_Init+0x64>)
 800689c:	f242 5210 	movw	r2, #9488	; 0x2510
 80068a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068a2:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <MX_TIM6_Init+0x64>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80068a8:	480c      	ldr	r0, [pc, #48]	; (80068dc <MX_TIM6_Init+0x64>)
 80068aa:	f7fe ffe7 	bl	800587c <HAL_TIM_Base_Init>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80068b4:	f000 f908 	bl	8006ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068b8:	2300      	movs	r3, #0
 80068ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068bc:	2300      	movs	r3, #0
 80068be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80068c0:	463b      	mov	r3, r7
 80068c2:	4619      	mov	r1, r3
 80068c4:	4805      	ldr	r0, [pc, #20]	; (80068dc <MX_TIM6_Init+0x64>)
 80068c6:	f7ff fa03 	bl	8005cd0 <HAL_TIMEx_MasterConfigSynchronization>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80068d0:	f000 f8fa 	bl	8006ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80068d4:	bf00      	nop
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000608 	.word	0x20000608
 80068e0:	40001000 	.word	0x40001000

080068e4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80068ea:	1d3b      	adds	r3, r7, #4
 80068ec:	2200      	movs	r2, #0
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	605a      	str	r2, [r3, #4]
 80068f2:	609a      	str	r2, [r3, #8]
 80068f4:	60da      	str	r2, [r3, #12]
 80068f6:	611a      	str	r2, [r3, #16]
 80068f8:	615a      	str	r2, [r3, #20]
 80068fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80068fc:	4b1e      	ldr	r3, [pc, #120]	; (8006978 <MX_FMC_Init+0x94>)
 80068fe:	4a1f      	ldr	r2, [pc, #124]	; (800697c <MX_FMC_Init+0x98>)
 8006900:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006902:	4b1d      	ldr	r3, [pc, #116]	; (8006978 <MX_FMC_Init+0x94>)
 8006904:	2201      	movs	r2, #1
 8006906:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006908:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <MX_FMC_Init+0x94>)
 800690a:	2200      	movs	r2, #0
 800690c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800690e:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <MX_FMC_Init+0x94>)
 8006910:	2204      	movs	r2, #4
 8006912:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006914:	4b18      	ldr	r3, [pc, #96]	; (8006978 <MX_FMC_Init+0x94>)
 8006916:	2210      	movs	r2, #16
 8006918:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800691a:	4b17      	ldr	r3, [pc, #92]	; (8006978 <MX_FMC_Init+0x94>)
 800691c:	2240      	movs	r2, #64	; 0x40
 800691e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8006920:	4b15      	ldr	r3, [pc, #84]	; (8006978 <MX_FMC_Init+0x94>)
 8006922:	2280      	movs	r2, #128	; 0x80
 8006924:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006926:	4b14      	ldr	r3, [pc, #80]	; (8006978 <MX_FMC_Init+0x94>)
 8006928:	2200      	movs	r2, #0
 800692a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800692c:	4b12      	ldr	r3, [pc, #72]	; (8006978 <MX_FMC_Init+0x94>)
 800692e:	2200      	movs	r2, #0
 8006930:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006932:	4b11      	ldr	r3, [pc, #68]	; (8006978 <MX_FMC_Init+0x94>)
 8006934:	2200      	movs	r2, #0
 8006936:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8006938:	4b0f      	ldr	r3, [pc, #60]	; (8006978 <MX_FMC_Init+0x94>)
 800693a:	2200      	movs	r2, #0
 800693c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800693e:	2310      	movs	r3, #16
 8006940:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8006942:	2310      	movs	r3, #16
 8006944:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8006946:	2310      	movs	r3, #16
 8006948:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800694a:	2310      	movs	r3, #16
 800694c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800694e:	2310      	movs	r3, #16
 8006950:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8006952:	2310      	movs	r3, #16
 8006954:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8006956:	2310      	movs	r3, #16
 8006958:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800695a:	1d3b      	adds	r3, r7, #4
 800695c:	4619      	mov	r1, r3
 800695e:	4806      	ldr	r0, [pc, #24]	; (8006978 <MX_FMC_Init+0x94>)
 8006960:	f7fe f982 	bl	8004c68 <HAL_SDRAM_Init>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800696a:	f000 f8ad 	bl	8006ac8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800696e:	bf00      	nop
 8006970:	3720      	adds	r7, #32
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000688 	.word	0x20000688
 800697c:	a0000140 	.word	0xa0000140

08006980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08e      	sub	sp, #56	; 0x38
 8006984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800698a:	2200      	movs	r2, #0
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	605a      	str	r2, [r3, #4]
 8006990:	609a      	str	r2, [r3, #8]
 8006992:	60da      	str	r2, [r3, #12]
 8006994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006996:	2300      	movs	r3, #0
 8006998:	623b      	str	r3, [r7, #32]
 800699a:	4b48      	ldr	r3, [pc, #288]	; (8006abc <MX_GPIO_Init+0x13c>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	4a47      	ldr	r2, [pc, #284]	; (8006abc <MX_GPIO_Init+0x13c>)
 80069a0:	f043 0320 	orr.w	r3, r3, #32
 80069a4:	6313      	str	r3, [r2, #48]	; 0x30
 80069a6:	4b45      	ldr	r3, [pc, #276]	; (8006abc <MX_GPIO_Init+0x13c>)
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	623b      	str	r3, [r7, #32]
 80069b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80069b2:	2300      	movs	r3, #0
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	4b41      	ldr	r3, [pc, #260]	; (8006abc <MX_GPIO_Init+0x13c>)
 80069b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ba:	4a40      	ldr	r2, [pc, #256]	; (8006abc <MX_GPIO_Init+0x13c>)
 80069bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c0:	6313      	str	r3, [r2, #48]	; 0x30
 80069c2:	4b3e      	ldr	r3, [pc, #248]	; (8006abc <MX_GPIO_Init+0x13c>)
 80069c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80069ce:	2300      	movs	r3, #0
 80069d0:	61bb      	str	r3, [r7, #24]
 80069d2:	4b3a      	ldr	r3, [pc, #232]	; (8006abc <MX_GPIO_Init+0x13c>)
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	4a39      	ldr	r2, [pc, #228]	; (8006abc <MX_GPIO_Init+0x13c>)
 80069d8:	f043 0304 	orr.w	r3, r3, #4
 80069dc:	6313      	str	r3, [r2, #48]	; 0x30
 80069de:	4b37      	ldr	r3, [pc, #220]	; (8006abc <MX_GPIO_Init+0x13c>)
 80069e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80069ea:	2300      	movs	r3, #0
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	4b33      	ldr	r3, [pc, #204]	; (8006abc <MX_GPIO_Init+0x13c>)
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	4a32      	ldr	r2, [pc, #200]	; (8006abc <MX_GPIO_Init+0x13c>)
 80069f4:	f043 0301 	orr.w	r3, r3, #1
 80069f8:	6313      	str	r3, [r2, #48]	; 0x30
 80069fa:	4b30      	ldr	r3, [pc, #192]	; (8006abc <MX_GPIO_Init+0x13c>)
 80069fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a06:	2300      	movs	r3, #0
 8006a08:	613b      	str	r3, [r7, #16]
 8006a0a:	4b2c      	ldr	r3, [pc, #176]	; (8006abc <MX_GPIO_Init+0x13c>)
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	4a2b      	ldr	r2, [pc, #172]	; (8006abc <MX_GPIO_Init+0x13c>)
 8006a10:	f043 0302 	orr.w	r3, r3, #2
 8006a14:	6313      	str	r3, [r2, #48]	; 0x30
 8006a16:	4b29      	ldr	r3, [pc, #164]	; (8006abc <MX_GPIO_Init+0x13c>)
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	613b      	str	r3, [r7, #16]
 8006a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	4b25      	ldr	r3, [pc, #148]	; (8006abc <MX_GPIO_Init+0x13c>)
 8006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2a:	4a24      	ldr	r2, [pc, #144]	; (8006abc <MX_GPIO_Init+0x13c>)
 8006a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a30:	6313      	str	r3, [r2, #48]	; 0x30
 8006a32:	4b22      	ldr	r3, [pc, #136]	; (8006abc <MX_GPIO_Init+0x13c>)
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	4b1e      	ldr	r3, [pc, #120]	; (8006abc <MX_GPIO_Init+0x13c>)
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	4a1d      	ldr	r2, [pc, #116]	; (8006abc <MX_GPIO_Init+0x13c>)
 8006a48:	f043 0310 	orr.w	r3, r3, #16
 8006a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a4e:	4b1b      	ldr	r3, [pc, #108]	; (8006abc <MX_GPIO_Init+0x13c>)
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	60bb      	str	r3, [r7, #8]
 8006a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	4b17      	ldr	r3, [pc, #92]	; (8006abc <MX_GPIO_Init+0x13c>)
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	4a16      	ldr	r2, [pc, #88]	; (8006abc <MX_GPIO_Init+0x13c>)
 8006a64:	f043 0308 	orr.w	r3, r3, #8
 8006a68:	6313      	str	r3, [r2, #48]	; 0x30
 8006a6a:	4b14      	ldr	r3, [pc, #80]	; (8006abc <MX_GPIO_Init+0x13c>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	f003 0308 	and.w	r3, r3, #8
 8006a72:	607b      	str	r3, [r7, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8006a76:	2200      	movs	r2, #0
 8006a78:	2106      	movs	r1, #6
 8006a7a:	4811      	ldr	r0, [pc, #68]	; (8006ac0 <MX_GPIO_Init+0x140>)
 8006a7c:	f7fc fe56 	bl	800372c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8006a80:	2306      	movs	r3, #6
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a84:	2301      	movs	r3, #1
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a94:	4619      	mov	r1, r3
 8006a96:	480a      	ldr	r0, [pc, #40]	; (8006ac0 <MX_GPIO_Init+0x140>)
 8006a98:	f7fc fb7c 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8006a9c:	2306      	movs	r3, #6
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aac:	4619      	mov	r1, r3
 8006aae:	4805      	ldr	r0, [pc, #20]	; (8006ac4 <MX_GPIO_Init+0x144>)
 8006ab0:	f7fc fb70 	bl	8003194 <HAL_GPIO_Init>

}
 8006ab4:	bf00      	nop
 8006ab6:	3738      	adds	r7, #56	; 0x38
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	40020800 	.word	0x40020800
 8006ac4:	40020000 	.word	0x40020000

08006ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006acc:	bf00      	nop
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ade:	2300      	movs	r3, #0
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	4b10      	ldr	r3, [pc, #64]	; (8006b24 <HAL_MspInit+0x4c>)
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae6:	4a0f      	ldr	r2, [pc, #60]	; (8006b24 <HAL_MspInit+0x4c>)
 8006ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006aec:	6453      	str	r3, [r2, #68]	; 0x44
 8006aee:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <HAL_MspInit+0x4c>)
 8006af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006af6:	607b      	str	r3, [r7, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006afa:	2300      	movs	r3, #0
 8006afc:	603b      	str	r3, [r7, #0]
 8006afe:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <HAL_MspInit+0x4c>)
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <HAL_MspInit+0x4c>)
 8006b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b08:	6413      	str	r3, [r2, #64]	; 0x40
 8006b0a:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <HAL_MspInit+0x4c>)
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b12:	603b      	str	r3, [r7, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	40023800 	.word	0x40023800

08006b28 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a0b      	ldr	r2, [pc, #44]	; (8006b64 <HAL_DMA2D_MspInit+0x3c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d10d      	bne.n	8006b56 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <HAL_DMA2D_MspInit+0x40>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <HAL_DMA2D_MspInit+0x40>)
 8006b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b48:	6313      	str	r3, [r2, #48]	; 0x30
 8006b4a:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <HAL_DMA2D_MspInit+0x40>)
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8006b56:	bf00      	nop
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	4002b000 	.word	0x4002b000
 8006b68:	40023800 	.word	0x40023800

08006b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08a      	sub	sp, #40	; 0x28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b74:	f107 0314 	add.w	r3, r7, #20
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	605a      	str	r2, [r3, #4]
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	60da      	str	r2, [r3, #12]
 8006b82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a29      	ldr	r2, [pc, #164]	; (8006c30 <HAL_I2C_MspInit+0xc4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d14b      	bne.n	8006c26 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b8e:	2300      	movs	r3, #0
 8006b90:	613b      	str	r3, [r7, #16]
 8006b92:	4b28      	ldr	r3, [pc, #160]	; (8006c34 <HAL_I2C_MspInit+0xc8>)
 8006b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b96:	4a27      	ldr	r2, [pc, #156]	; (8006c34 <HAL_I2C_MspInit+0xc8>)
 8006b98:	f043 0304 	orr.w	r3, r3, #4
 8006b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b9e:	4b25      	ldr	r3, [pc, #148]	; (8006c34 <HAL_I2C_MspInit+0xc8>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	613b      	str	r3, [r7, #16]
 8006ba8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	4b21      	ldr	r3, [pc, #132]	; (8006c34 <HAL_I2C_MspInit+0xc8>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	4a20      	ldr	r2, [pc, #128]	; (8006c34 <HAL_I2C_MspInit+0xc8>)
 8006bb4:	f043 0301 	orr.w	r3, r3, #1
 8006bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8006bba:	4b1e      	ldr	r3, [pc, #120]	; (8006c34 <HAL_I2C_MspInit+0xc8>)
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006bcc:	2312      	movs	r3, #18
 8006bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006bd8:	2304      	movs	r3, #4
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bdc:	f107 0314 	add.w	r3, r7, #20
 8006be0:	4619      	mov	r1, r3
 8006be2:	4815      	ldr	r0, [pc, #84]	; (8006c38 <HAL_I2C_MspInit+0xcc>)
 8006be4:	f7fc fad6 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006bee:	2312      	movs	r3, #18
 8006bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006bfa:	2304      	movs	r3, #4
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bfe:	f107 0314 	add.w	r3, r7, #20
 8006c02:	4619      	mov	r1, r3
 8006c04:	480d      	ldr	r0, [pc, #52]	; (8006c3c <HAL_I2C_MspInit+0xd0>)
 8006c06:	f7fc fac5 	bl	8003194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60bb      	str	r3, [r7, #8]
 8006c0e:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <HAL_I2C_MspInit+0xc8>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	4a08      	ldr	r2, [pc, #32]	; (8006c34 <HAL_I2C_MspInit+0xc8>)
 8006c14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c18:	6413      	str	r3, [r2, #64]	; 0x40
 8006c1a:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <HAL_I2C_MspInit+0xc8>)
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c22:	60bb      	str	r3, [r7, #8]
 8006c24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006c26:	bf00      	nop
 8006c28:	3728      	adds	r7, #40	; 0x28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	40005c00 	.word	0x40005c00
 8006c34:	40023800 	.word	0x40023800
 8006c38:	40020800 	.word	0x40020800
 8006c3c:	40020000 	.word	0x40020000

08006c40 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08e      	sub	sp, #56	; 0x38
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	605a      	str	r2, [r3, #4]
 8006c52:	609a      	str	r2, [r3, #8]
 8006c54:	60da      	str	r2, [r3, #12]
 8006c56:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a77      	ldr	r2, [pc, #476]	; (8006e3c <HAL_LTDC_MspInit+0x1fc>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	f040 80e8 	bne.w	8006e34 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006c64:	2300      	movs	r3, #0
 8006c66:	623b      	str	r3, [r7, #32]
 8006c68:	4b75      	ldr	r3, [pc, #468]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6c:	4a74      	ldr	r2, [pc, #464]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006c6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c72:	6453      	str	r3, [r2, #68]	; 0x44
 8006c74:	4b72      	ldr	r3, [pc, #456]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c7c:	623b      	str	r3, [r7, #32]
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006c80:	2300      	movs	r3, #0
 8006c82:	61fb      	str	r3, [r7, #28]
 8006c84:	4b6e      	ldr	r3, [pc, #440]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c88:	4a6d      	ldr	r2, [pc, #436]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006c8a:	f043 0320 	orr.w	r3, r3, #32
 8006c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006c90:	4b6b      	ldr	r3, [pc, #428]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	61fb      	str	r3, [r7, #28]
 8006c9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	4b67      	ldr	r3, [pc, #412]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	4a66      	ldr	r2, [pc, #408]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	6313      	str	r3, [r2, #48]	; 0x30
 8006cac:	4b64      	ldr	r3, [pc, #400]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cb8:	2300      	movs	r3, #0
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	4b60      	ldr	r3, [pc, #384]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	4a5f      	ldr	r2, [pc, #380]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006cc2:	f043 0302 	orr.w	r3, r3, #2
 8006cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8006cc8:	4b5d      	ldr	r3, [pc, #372]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	4b59      	ldr	r3, [pc, #356]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	4a58      	ldr	r2, [pc, #352]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ce4:	4b56      	ldr	r3, [pc, #344]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	4b52      	ldr	r3, [pc, #328]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	4a51      	ldr	r2, [pc, #324]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006cfa:	f043 0304 	orr.w	r3, r3, #4
 8006cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8006d00:	4b4f      	ldr	r3, [pc, #316]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60bb      	str	r3, [r7, #8]
 8006d10:	4b4b      	ldr	r3, [pc, #300]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	4a4a      	ldr	r2, [pc, #296]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006d16:	f043 0308 	orr.w	r3, r3, #8
 8006d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d1c:	4b48      	ldr	r3, [pc, #288]	; (8006e40 <HAL_LTDC_MspInit+0x200>)
 8006d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	60bb      	str	r3, [r7, #8]
 8006d26:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d2e:	2302      	movs	r3, #2
 8006d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d36:	2300      	movs	r3, #0
 8006d38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006d3a:	230e      	movs	r3, #14
 8006d3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d42:	4619      	mov	r1, r3
 8006d44:	483f      	ldr	r0, [pc, #252]	; (8006e44 <HAL_LTDC_MspInit+0x204>)
 8006d46:	f7fc fa25 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8006d4a:	f641 0358 	movw	r3, #6232	; 0x1858
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d50:	2302      	movs	r3, #2
 8006d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006d5c:	230e      	movs	r3, #14
 8006d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d64:	4619      	mov	r1, r3
 8006d66:	4838      	ldr	r0, [pc, #224]	; (8006e48 <HAL_LTDC_MspInit+0x208>)
 8006d68:	f7fc fa14 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d70:	2302      	movs	r3, #2
 8006d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006d7c:	2309      	movs	r3, #9
 8006d7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d84:	4619      	mov	r1, r3
 8006d86:	4831      	ldr	r0, [pc, #196]	; (8006e4c <HAL_LTDC_MspInit+0x20c>)
 8006d88:	f7fc fa04 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8006d8c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d92:	2302      	movs	r3, #2
 8006d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006d9e:	230e      	movs	r3, #14
 8006da0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006da6:	4619      	mov	r1, r3
 8006da8:	4828      	ldr	r0, [pc, #160]	; (8006e4c <HAL_LTDC_MspInit+0x20c>)
 8006daa:	f7fc f9f3 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8006dae:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006db4:	2302      	movs	r3, #2
 8006db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006dc0:	230e      	movs	r3, #14
 8006dc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4821      	ldr	r0, [pc, #132]	; (8006e50 <HAL_LTDC_MspInit+0x210>)
 8006dcc:	f7fc f9e2 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8006dd0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dde:	2300      	movs	r3, #0
 8006de0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006de2:	230e      	movs	r3, #14
 8006de4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dea:	4619      	mov	r1, r3
 8006dec:	4819      	ldr	r0, [pc, #100]	; (8006e54 <HAL_LTDC_MspInit+0x214>)
 8006dee:	f7fc f9d1 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8006df2:	2348      	movs	r3, #72	; 0x48
 8006df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006df6:	2302      	movs	r3, #2
 8006df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006e02:	230e      	movs	r3, #14
 8006e04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4812      	ldr	r0, [pc, #72]	; (8006e58 <HAL_LTDC_MspInit+0x218>)
 8006e0e:	f7fc f9c1 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8006e12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e20:	2300      	movs	r3, #0
 8006e22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006e24:	2309      	movs	r3, #9
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4808      	ldr	r0, [pc, #32]	; (8006e50 <HAL_LTDC_MspInit+0x210>)
 8006e30:	f7fc f9b0 	bl	8003194 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8006e34:	bf00      	nop
 8006e36:	3738      	adds	r7, #56	; 0x38
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	40016800 	.word	0x40016800
 8006e40:	40023800 	.word	0x40023800
 8006e44:	40021400 	.word	0x40021400
 8006e48:	40020000 	.word	0x40020000
 8006e4c:	40020400 	.word	0x40020400
 8006e50:	40021800 	.word	0x40021800
 8006e54:	40020800 	.word	0x40020800
 8006e58:	40020c00 	.word	0x40020c00

08006e5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08a      	sub	sp, #40	; 0x28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e64:	f107 0314 	add.w	r3, r7, #20
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	605a      	str	r2, [r3, #4]
 8006e6e:	609a      	str	r2, [r3, #8]
 8006e70:	60da      	str	r2, [r3, #12]
 8006e72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a19      	ldr	r2, [pc, #100]	; (8006ee0 <HAL_SPI_MspInit+0x84>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d12c      	bne.n	8006ed8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006e7e:	2300      	movs	r3, #0
 8006e80:	613b      	str	r3, [r7, #16]
 8006e82:	4b18      	ldr	r3, [pc, #96]	; (8006ee4 <HAL_SPI_MspInit+0x88>)
 8006e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e86:	4a17      	ldr	r2, [pc, #92]	; (8006ee4 <HAL_SPI_MspInit+0x88>)
 8006e88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8006e8e:	4b15      	ldr	r3, [pc, #84]	; (8006ee4 <HAL_SPI_MspInit+0x88>)
 8006e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e96:	613b      	str	r3, [r7, #16]
 8006e98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	4b11      	ldr	r3, [pc, #68]	; (8006ee4 <HAL_SPI_MspInit+0x88>)
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	4a10      	ldr	r2, [pc, #64]	; (8006ee4 <HAL_SPI_MspInit+0x88>)
 8006ea4:	f043 0320 	orr.w	r3, r3, #32
 8006ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eaa:	4b0e      	ldr	r3, [pc, #56]	; (8006ee4 <HAL_SPI_MspInit+0x88>)
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006eb6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006ec8:	2305      	movs	r3, #5
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006ecc:	f107 0314 	add.w	r3, r7, #20
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4805      	ldr	r0, [pc, #20]	; (8006ee8 <HAL_SPI_MspInit+0x8c>)
 8006ed4:	f7fc f95e 	bl	8003194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8006ed8:	bf00      	nop
 8006eda:	3728      	adds	r7, #40	; 0x28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40015000 	.word	0x40015000
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	40021400 	.word	0x40021400

08006eec <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <HAL_SPI_MspDeInit+0x30>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d10a      	bne.n	8006f14 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8006efe:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <HAL_SPI_MspDeInit+0x34>)
 8006f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f02:	4a07      	ldr	r2, [pc, #28]	; (8006f20 <HAL_SPI_MspDeInit+0x34>)
 8006f04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f08:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8006f0a:	f44f 7160 	mov.w	r1, #896	; 0x380
 8006f0e:	4805      	ldr	r0, [pc, #20]	; (8006f24 <HAL_SPI_MspDeInit+0x38>)
 8006f10:	f7fc faea 	bl	80034e8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8006f14:	bf00      	nop
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	40015000 	.word	0x40015000
 8006f20:	40023800 	.word	0x40023800
 8006f24:	40021400 	.word	0x40021400

08006f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a0e      	ldr	r2, [pc, #56]	; (8006f70 <HAL_TIM_Base_MspInit+0x48>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d115      	bne.n	8006f66 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	4b0d      	ldr	r3, [pc, #52]	; (8006f74 <HAL_TIM_Base_MspInit+0x4c>)
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	4a0c      	ldr	r2, [pc, #48]	; (8006f74 <HAL_TIM_Base_MspInit+0x4c>)
 8006f44:	f043 0310 	orr.w	r3, r3, #16
 8006f48:	6413      	str	r3, [r2, #64]	; 0x40
 8006f4a:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <HAL_TIM_Base_MspInit+0x4c>)
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f003 0310 	and.w	r3, r3, #16
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006f56:	2200      	movs	r2, #0
 8006f58:	2100      	movs	r1, #0
 8006f5a:	2036      	movs	r0, #54	; 0x36
 8006f5c:	f7fb fc9b 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006f60:	2036      	movs	r0, #54	; 0x36
 8006f62:	f7fb fcb4 	bl	80028ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40001000 	.word	0x40001000
 8006f74:	40023800 	.word	0x40023800

08006f78 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006f7e:	1d3b      	adds	r3, r7, #4
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	605a      	str	r2, [r3, #4]
 8006f86:	609a      	str	r2, [r3, #8]
 8006f88:	60da      	str	r2, [r3, #12]
 8006f8a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8006f8c:	4b3b      	ldr	r3, [pc, #236]	; (800707c <HAL_FMC_MspInit+0x104>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d16f      	bne.n	8007074 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8006f94:	4b39      	ldr	r3, [pc, #228]	; (800707c <HAL_FMC_MspInit+0x104>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	603b      	str	r3, [r7, #0]
 8006f9e:	4b38      	ldr	r3, [pc, #224]	; (8007080 <HAL_FMC_MspInit+0x108>)
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	4a37      	ldr	r2, [pc, #220]	; (8007080 <HAL_FMC_MspInit+0x108>)
 8006fa4:	f043 0301 	orr.w	r3, r3, #1
 8006fa8:	6393      	str	r3, [r2, #56]	; 0x38
 8006faa:	4b35      	ldr	r3, [pc, #212]	; (8007080 <HAL_FMC_MspInit+0x108>)
 8006fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006fb6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006fba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006fc8:	230c      	movs	r3, #12
 8006fca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006fcc:	1d3b      	adds	r3, r7, #4
 8006fce:	4619      	mov	r1, r3
 8006fd0:	482c      	ldr	r0, [pc, #176]	; (8007084 <HAL_FMC_MspInit+0x10c>)
 8006fd2:	f7fc f8df 	bl	8003194 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fda:	2302      	movs	r3, #2
 8006fdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fea:	1d3b      	adds	r3, r7, #4
 8006fec:	4619      	mov	r1, r3
 8006fee:	4826      	ldr	r0, [pc, #152]	; (8007088 <HAL_FMC_MspInit+0x110>)
 8006ff0:	f7fc f8d0 	bl	8003194 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8006ff4:	f248 1333 	movw	r3, #33075	; 0x8133
 8006ff8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007002:	2303      	movs	r3, #3
 8007004:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007006:	230c      	movs	r3, #12
 8007008:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800700a:	1d3b      	adds	r3, r7, #4
 800700c:	4619      	mov	r1, r3
 800700e:	481f      	ldr	r0, [pc, #124]	; (800708c <HAL_FMC_MspInit+0x114>)
 8007010:	f7fc f8c0 	bl	8003194 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8007014:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007018:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800701a:	2302      	movs	r3, #2
 800701c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007022:	2303      	movs	r3, #3
 8007024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007026:	230c      	movs	r3, #12
 8007028:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800702a:	1d3b      	adds	r3, r7, #4
 800702c:	4619      	mov	r1, r3
 800702e:	4818      	ldr	r0, [pc, #96]	; (8007090 <HAL_FMC_MspInit+0x118>)
 8007030:	f7fc f8b0 	bl	8003194 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8007034:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007038:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800703a:	2302      	movs	r3, #2
 800703c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007042:	2303      	movs	r3, #3
 8007044:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007046:	230c      	movs	r3, #12
 8007048:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800704a:	1d3b      	adds	r3, r7, #4
 800704c:	4619      	mov	r1, r3
 800704e:	4811      	ldr	r0, [pc, #68]	; (8007094 <HAL_FMC_MspInit+0x11c>)
 8007050:	f7fc f8a0 	bl	8003194 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007054:	2360      	movs	r3, #96	; 0x60
 8007056:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007058:	2302      	movs	r3, #2
 800705a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007060:	2303      	movs	r3, #3
 8007062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007064:	230c      	movs	r3, #12
 8007066:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007068:	1d3b      	adds	r3, r7, #4
 800706a:	4619      	mov	r1, r3
 800706c:	480a      	ldr	r0, [pc, #40]	; (8007098 <HAL_FMC_MspInit+0x120>)
 800706e:	f7fc f891 	bl	8003194 <HAL_GPIO_Init>
 8007072:	e000      	b.n	8007076 <HAL_FMC_MspInit+0xfe>
    return;
 8007074:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	200003f4 	.word	0x200003f4
 8007080:	40023800 	.word	0x40023800
 8007084:	40021400 	.word	0x40021400
 8007088:	40020800 	.word	0x40020800
 800708c:	40021800 	.word	0x40021800
 8007090:	40021000 	.word	0x40021000
 8007094:	40020c00 	.word	0x40020c00
 8007098:	40020400 	.word	0x40020400

0800709c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80070a4:	f7ff ff68 	bl	8006f78 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80070a8:	bf00      	nop
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80070b4:	bf00      	nop
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80070be:	b480      	push	{r7}
 80070c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80070c2:	e7fe      	b.n	80070c2 <HardFault_Handler+0x4>

080070c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80070c8:	e7fe      	b.n	80070c8 <MemManage_Handler+0x4>

080070ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80070ca:	b480      	push	{r7}
 80070cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80070ce:	e7fe      	b.n	80070ce <BusFault_Handler+0x4>

080070d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80070d4:	e7fe      	b.n	80070d4 <UsageFault_Handler+0x4>

080070d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80070d6:	b480      	push	{r7}
 80070d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80070da:	bf00      	nop
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80070e8:	bf00      	nop
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80070f2:	b480      	push	{r7}
 80070f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80070f6:	bf00      	nop
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007104:	f7fb faaa 	bl	800265c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007108:	bf00      	nop
 800710a:	bd80      	pop	{r7, pc}

0800710c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	sec++;
 8007110:	4b14      	ldr	r3, [pc, #80]	; (8007164 <TIM6_DAC_IRQHandler+0x58>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3301      	adds	r3, #1
 8007116:	4a13      	ldr	r2, [pc, #76]	; (8007164 <TIM6_DAC_IRQHandler+0x58>)
 8007118:	6013      	str	r3, [r2, #0]
		   if (sec >= 60 ){
 800711a:	4b12      	ldr	r3, [pc, #72]	; (8007164 <TIM6_DAC_IRQHandler+0x58>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b3b      	cmp	r3, #59	; 0x3b
 8007120:	dd07      	ble.n	8007132 <TIM6_DAC_IRQHandler+0x26>
			  min++;
 8007122:	4b11      	ldr	r3, [pc, #68]	; (8007168 <TIM6_DAC_IRQHandler+0x5c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3301      	adds	r3, #1
 8007128:	4a0f      	ldr	r2, [pc, #60]	; (8007168 <TIM6_DAC_IRQHandler+0x5c>)
 800712a:	6013      	str	r3, [r2, #0]
			  sec = 0;
 800712c:	4b0d      	ldr	r3, [pc, #52]	; (8007164 <TIM6_DAC_IRQHandler+0x58>)
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]
		   }
		   if (min >= 60){
 8007132:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <TIM6_DAC_IRQHandler+0x5c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b3b      	cmp	r3, #59	; 0x3b
 8007138:	dd07      	ble.n	800714a <TIM6_DAC_IRQHandler+0x3e>
			   h++;
 800713a:	4b0c      	ldr	r3, [pc, #48]	; (800716c <TIM6_DAC_IRQHandler+0x60>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3301      	adds	r3, #1
 8007140:	4a0a      	ldr	r2, [pc, #40]	; (800716c <TIM6_DAC_IRQHandler+0x60>)
 8007142:	6013      	str	r3, [r2, #0]
			   min = 0;
 8007144:	4b08      	ldr	r3, [pc, #32]	; (8007168 <TIM6_DAC_IRQHandler+0x5c>)
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]
		   }
		   if (h >= 24){
 800714a:	4b08      	ldr	r3, [pc, #32]	; (800716c <TIM6_DAC_IRQHandler+0x60>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b17      	cmp	r3, #23
 8007150:	dd02      	ble.n	8007158 <TIM6_DAC_IRQHandler+0x4c>
			   h = 0;
 8007152:	4b06      	ldr	r3, [pc, #24]	; (800716c <TIM6_DAC_IRQHandler+0x60>)
 8007154:	2200      	movs	r2, #0
 8007156:	601a      	str	r2, [r3, #0]
		   }
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007158:	4805      	ldr	r0, [pc, #20]	; (8007170 <TIM6_DAC_IRQHandler+0x64>)
 800715a:	f7fe fbde 	bl	800591a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800715e:	bf00      	nop
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	200003f0 	.word	0x200003f0
 8007168:	200003ec 	.word	0x200003ec
 800716c:	200003e8 	.word	0x200003e8
 8007170:	20000608 	.word	0x20000608

08007174 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800717c:	4b11      	ldr	r3, [pc, #68]	; (80071c4 <_sbrk+0x50>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d102      	bne.n	800718a <_sbrk+0x16>
		heap_end = &end;
 8007184:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <_sbrk+0x50>)
 8007186:	4a10      	ldr	r2, [pc, #64]	; (80071c8 <_sbrk+0x54>)
 8007188:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800718a:	4b0e      	ldr	r3, [pc, #56]	; (80071c4 <_sbrk+0x50>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007190:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <_sbrk+0x50>)
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4413      	add	r3, r2
 8007198:	466a      	mov	r2, sp
 800719a:	4293      	cmp	r3, r2
 800719c:	d907      	bls.n	80071ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800719e:	f000 f875 	bl	800728c <__errno>
 80071a2:	4602      	mov	r2, r0
 80071a4:	230c      	movs	r3, #12
 80071a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80071a8:	f04f 33ff 	mov.w	r3, #4294967295
 80071ac:	e006      	b.n	80071bc <_sbrk+0x48>
	}

	heap_end += incr;
 80071ae:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <_sbrk+0x50>)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4413      	add	r3, r2
 80071b6:	4a03      	ldr	r2, [pc, #12]	; (80071c4 <_sbrk+0x50>)
 80071b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80071ba:	68fb      	ldr	r3, [r7, #12]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	200003f8 	.word	0x200003f8
 80071c8:	200006c0 	.word	0x200006c0

080071cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80071d0:	4b16      	ldr	r3, [pc, #88]	; (800722c <SystemInit+0x60>)
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d6:	4a15      	ldr	r2, [pc, #84]	; (800722c <SystemInit+0x60>)
 80071d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80071e0:	4b13      	ldr	r3, [pc, #76]	; (8007230 <SystemInit+0x64>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a12      	ldr	r2, [pc, #72]	; (8007230 <SystemInit+0x64>)
 80071e6:	f043 0301 	orr.w	r3, r3, #1
 80071ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80071ec:	4b10      	ldr	r3, [pc, #64]	; (8007230 <SystemInit+0x64>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80071f2:	4b0f      	ldr	r3, [pc, #60]	; (8007230 <SystemInit+0x64>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a0e      	ldr	r2, [pc, #56]	; (8007230 <SystemInit+0x64>)
 80071f8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80071fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007200:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007202:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <SystemInit+0x64>)
 8007204:	4a0b      	ldr	r2, [pc, #44]	; (8007234 <SystemInit+0x68>)
 8007206:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007208:	4b09      	ldr	r3, [pc, #36]	; (8007230 <SystemInit+0x64>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a08      	ldr	r2, [pc, #32]	; (8007230 <SystemInit+0x64>)
 800720e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007212:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007214:	4b06      	ldr	r3, [pc, #24]	; (8007230 <SystemInit+0x64>)
 8007216:	2200      	movs	r2, #0
 8007218:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800721a:	4b04      	ldr	r3, [pc, #16]	; (800722c <SystemInit+0x60>)
 800721c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007220:	609a      	str	r2, [r3, #8]
#endif
}
 8007222:	bf00      	nop
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	e000ed00 	.word	0xe000ed00
 8007230:	40023800 	.word	0x40023800
 8007234:	24003010 	.word	0x24003010

08007238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007270 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800723c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800723e:	e003      	b.n	8007248 <LoopCopyDataInit>

08007240 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007240:	4b0c      	ldr	r3, [pc, #48]	; (8007274 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007242:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007244:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007246:	3104      	adds	r1, #4

08007248 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007248:	480b      	ldr	r0, [pc, #44]	; (8007278 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800724a:	4b0c      	ldr	r3, [pc, #48]	; (800727c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800724c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800724e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007250:	d3f6      	bcc.n	8007240 <CopyDataInit>
  ldr  r2, =_sbss
 8007252:	4a0b      	ldr	r2, [pc, #44]	; (8007280 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007254:	e002      	b.n	800725c <LoopFillZerobss>

08007256 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007256:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007258:	f842 3b04 	str.w	r3, [r2], #4

0800725c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800725c:	4b09      	ldr	r3, [pc, #36]	; (8007284 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800725e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007260:	d3f9      	bcc.n	8007256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007262:	f7ff ffb3 	bl	80071cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007266:	f000 f817 	bl	8007298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800726a:	f7fe fecd 	bl	8006008 <main>
  bx  lr    
 800726e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007270:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8007274:	0800cb78 	.word	0x0800cb78
  ldr  r0, =_sdata
 8007278:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800727c:	20000224 	.word	0x20000224
  ldr  r2, =_sbss
 8007280:	20000224 	.word	0x20000224
  ldr  r3, = _ebss
 8007284:	200006c0 	.word	0x200006c0

08007288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007288:	e7fe      	b.n	8007288 <ADC_IRQHandler>
	...

0800728c <__errno>:
 800728c:	4b01      	ldr	r3, [pc, #4]	; (8007294 <__errno+0x8>)
 800728e:	6818      	ldr	r0, [r3, #0]
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20000054 	.word	0x20000054

08007298 <__libc_init_array>:
 8007298:	b570      	push	{r4, r5, r6, lr}
 800729a:	4e0d      	ldr	r6, [pc, #52]	; (80072d0 <__libc_init_array+0x38>)
 800729c:	4c0d      	ldr	r4, [pc, #52]	; (80072d4 <__libc_init_array+0x3c>)
 800729e:	1ba4      	subs	r4, r4, r6
 80072a0:	10a4      	asrs	r4, r4, #2
 80072a2:	2500      	movs	r5, #0
 80072a4:	42a5      	cmp	r5, r4
 80072a6:	d109      	bne.n	80072bc <__libc_init_array+0x24>
 80072a8:	4e0b      	ldr	r6, [pc, #44]	; (80072d8 <__libc_init_array+0x40>)
 80072aa:	4c0c      	ldr	r4, [pc, #48]	; (80072dc <__libc_init_array+0x44>)
 80072ac:	f003 fd56 	bl	800ad5c <_init>
 80072b0:	1ba4      	subs	r4, r4, r6
 80072b2:	10a4      	asrs	r4, r4, #2
 80072b4:	2500      	movs	r5, #0
 80072b6:	42a5      	cmp	r5, r4
 80072b8:	d105      	bne.n	80072c6 <__libc_init_array+0x2e>
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072c0:	4798      	blx	r3
 80072c2:	3501      	adds	r5, #1
 80072c4:	e7ee      	b.n	80072a4 <__libc_init_array+0xc>
 80072c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072ca:	4798      	blx	r3
 80072cc:	3501      	adds	r5, #1
 80072ce:	e7f2      	b.n	80072b6 <__libc_init_array+0x1e>
 80072d0:	0800cb70 	.word	0x0800cb70
 80072d4:	0800cb70 	.word	0x0800cb70
 80072d8:	0800cb70 	.word	0x0800cb70
 80072dc:	0800cb74 	.word	0x0800cb74

080072e0 <memset>:
 80072e0:	4402      	add	r2, r0
 80072e2:	4603      	mov	r3, r0
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d100      	bne.n	80072ea <memset+0xa>
 80072e8:	4770      	bx	lr
 80072ea:	f803 1b01 	strb.w	r1, [r3], #1
 80072ee:	e7f9      	b.n	80072e4 <memset+0x4>

080072f0 <__cvt>:
 80072f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072f4:	ec55 4b10 	vmov	r4, r5, d0
 80072f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80072fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072fe:	2d00      	cmp	r5, #0
 8007300:	460e      	mov	r6, r1
 8007302:	4691      	mov	r9, r2
 8007304:	4619      	mov	r1, r3
 8007306:	bfb8      	it	lt
 8007308:	4622      	movlt	r2, r4
 800730a:	462b      	mov	r3, r5
 800730c:	f027 0720 	bic.w	r7, r7, #32
 8007310:	bfbb      	ittet	lt
 8007312:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007316:	461d      	movlt	r5, r3
 8007318:	2300      	movge	r3, #0
 800731a:	232d      	movlt	r3, #45	; 0x2d
 800731c:	bfb8      	it	lt
 800731e:	4614      	movlt	r4, r2
 8007320:	2f46      	cmp	r7, #70	; 0x46
 8007322:	700b      	strb	r3, [r1, #0]
 8007324:	d004      	beq.n	8007330 <__cvt+0x40>
 8007326:	2f45      	cmp	r7, #69	; 0x45
 8007328:	d100      	bne.n	800732c <__cvt+0x3c>
 800732a:	3601      	adds	r6, #1
 800732c:	2102      	movs	r1, #2
 800732e:	e000      	b.n	8007332 <__cvt+0x42>
 8007330:	2103      	movs	r1, #3
 8007332:	ab03      	add	r3, sp, #12
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	ab02      	add	r3, sp, #8
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	4632      	mov	r2, r6
 800733c:	4653      	mov	r3, sl
 800733e:	ec45 4b10 	vmov	d0, r4, r5
 8007342:	f001 fd75 	bl	8008e30 <_dtoa_r>
 8007346:	2f47      	cmp	r7, #71	; 0x47
 8007348:	4680      	mov	r8, r0
 800734a:	d102      	bne.n	8007352 <__cvt+0x62>
 800734c:	f019 0f01 	tst.w	r9, #1
 8007350:	d026      	beq.n	80073a0 <__cvt+0xb0>
 8007352:	2f46      	cmp	r7, #70	; 0x46
 8007354:	eb08 0906 	add.w	r9, r8, r6
 8007358:	d111      	bne.n	800737e <__cvt+0x8e>
 800735a:	f898 3000 	ldrb.w	r3, [r8]
 800735e:	2b30      	cmp	r3, #48	; 0x30
 8007360:	d10a      	bne.n	8007378 <__cvt+0x88>
 8007362:	2200      	movs	r2, #0
 8007364:	2300      	movs	r3, #0
 8007366:	4620      	mov	r0, r4
 8007368:	4629      	mov	r1, r5
 800736a:	f7f9 fbbd 	bl	8000ae8 <__aeabi_dcmpeq>
 800736e:	b918      	cbnz	r0, 8007378 <__cvt+0x88>
 8007370:	f1c6 0601 	rsb	r6, r6, #1
 8007374:	f8ca 6000 	str.w	r6, [sl]
 8007378:	f8da 3000 	ldr.w	r3, [sl]
 800737c:	4499      	add	r9, r3
 800737e:	2200      	movs	r2, #0
 8007380:	2300      	movs	r3, #0
 8007382:	4620      	mov	r0, r4
 8007384:	4629      	mov	r1, r5
 8007386:	f7f9 fbaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800738a:	b938      	cbnz	r0, 800739c <__cvt+0xac>
 800738c:	2230      	movs	r2, #48	; 0x30
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	454b      	cmp	r3, r9
 8007392:	d205      	bcs.n	80073a0 <__cvt+0xb0>
 8007394:	1c59      	adds	r1, r3, #1
 8007396:	9103      	str	r1, [sp, #12]
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	e7f8      	b.n	800738e <__cvt+0x9e>
 800739c:	f8cd 900c 	str.w	r9, [sp, #12]
 80073a0:	9b03      	ldr	r3, [sp, #12]
 80073a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073a4:	eba3 0308 	sub.w	r3, r3, r8
 80073a8:	4640      	mov	r0, r8
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	b004      	add	sp, #16
 80073ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080073b2 <__exponent>:
 80073b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073b4:	2900      	cmp	r1, #0
 80073b6:	4604      	mov	r4, r0
 80073b8:	bfba      	itte	lt
 80073ba:	4249      	neglt	r1, r1
 80073bc:	232d      	movlt	r3, #45	; 0x2d
 80073be:	232b      	movge	r3, #43	; 0x2b
 80073c0:	2909      	cmp	r1, #9
 80073c2:	f804 2b02 	strb.w	r2, [r4], #2
 80073c6:	7043      	strb	r3, [r0, #1]
 80073c8:	dd20      	ble.n	800740c <__exponent+0x5a>
 80073ca:	f10d 0307 	add.w	r3, sp, #7
 80073ce:	461f      	mov	r7, r3
 80073d0:	260a      	movs	r6, #10
 80073d2:	fb91 f5f6 	sdiv	r5, r1, r6
 80073d6:	fb06 1115 	mls	r1, r6, r5, r1
 80073da:	3130      	adds	r1, #48	; 0x30
 80073dc:	2d09      	cmp	r5, #9
 80073de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80073e2:	f103 32ff 	add.w	r2, r3, #4294967295
 80073e6:	4629      	mov	r1, r5
 80073e8:	dc09      	bgt.n	80073fe <__exponent+0x4c>
 80073ea:	3130      	adds	r1, #48	; 0x30
 80073ec:	3b02      	subs	r3, #2
 80073ee:	f802 1c01 	strb.w	r1, [r2, #-1]
 80073f2:	42bb      	cmp	r3, r7
 80073f4:	4622      	mov	r2, r4
 80073f6:	d304      	bcc.n	8007402 <__exponent+0x50>
 80073f8:	1a10      	subs	r0, r2, r0
 80073fa:	b003      	add	sp, #12
 80073fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fe:	4613      	mov	r3, r2
 8007400:	e7e7      	b.n	80073d2 <__exponent+0x20>
 8007402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007406:	f804 2b01 	strb.w	r2, [r4], #1
 800740a:	e7f2      	b.n	80073f2 <__exponent+0x40>
 800740c:	2330      	movs	r3, #48	; 0x30
 800740e:	4419      	add	r1, r3
 8007410:	7083      	strb	r3, [r0, #2]
 8007412:	1d02      	adds	r2, r0, #4
 8007414:	70c1      	strb	r1, [r0, #3]
 8007416:	e7ef      	b.n	80073f8 <__exponent+0x46>

08007418 <_printf_float>:
 8007418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	b08d      	sub	sp, #52	; 0x34
 800741e:	460c      	mov	r4, r1
 8007420:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007424:	4616      	mov	r6, r2
 8007426:	461f      	mov	r7, r3
 8007428:	4605      	mov	r5, r0
 800742a:	f002 fde5 	bl	8009ff8 <_localeconv_r>
 800742e:	6803      	ldr	r3, [r0, #0]
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	4618      	mov	r0, r3
 8007434:	f7f8 fedc 	bl	80001f0 <strlen>
 8007438:	2300      	movs	r3, #0
 800743a:	930a      	str	r3, [sp, #40]	; 0x28
 800743c:	f8d8 3000 	ldr.w	r3, [r8]
 8007440:	9005      	str	r0, [sp, #20]
 8007442:	3307      	adds	r3, #7
 8007444:	f023 0307 	bic.w	r3, r3, #7
 8007448:	f103 0208 	add.w	r2, r3, #8
 800744c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007450:	f8d4 b000 	ldr.w	fp, [r4]
 8007454:	f8c8 2000 	str.w	r2, [r8]
 8007458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007460:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007464:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007468:	9307      	str	r3, [sp, #28]
 800746a:	f8cd 8018 	str.w	r8, [sp, #24]
 800746e:	f04f 32ff 	mov.w	r2, #4294967295
 8007472:	4ba7      	ldr	r3, [pc, #668]	; (8007710 <_printf_float+0x2f8>)
 8007474:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007478:	f7f9 fb68 	bl	8000b4c <__aeabi_dcmpun>
 800747c:	bb70      	cbnz	r0, 80074dc <_printf_float+0xc4>
 800747e:	f04f 32ff 	mov.w	r2, #4294967295
 8007482:	4ba3      	ldr	r3, [pc, #652]	; (8007710 <_printf_float+0x2f8>)
 8007484:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007488:	f7f9 fb42 	bl	8000b10 <__aeabi_dcmple>
 800748c:	bb30      	cbnz	r0, 80074dc <_printf_float+0xc4>
 800748e:	2200      	movs	r2, #0
 8007490:	2300      	movs	r3, #0
 8007492:	4640      	mov	r0, r8
 8007494:	4649      	mov	r1, r9
 8007496:	f7f9 fb31 	bl	8000afc <__aeabi_dcmplt>
 800749a:	b110      	cbz	r0, 80074a2 <_printf_float+0x8a>
 800749c:	232d      	movs	r3, #45	; 0x2d
 800749e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074a2:	4a9c      	ldr	r2, [pc, #624]	; (8007714 <_printf_float+0x2fc>)
 80074a4:	4b9c      	ldr	r3, [pc, #624]	; (8007718 <_printf_float+0x300>)
 80074a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80074aa:	bf8c      	ite	hi
 80074ac:	4690      	movhi	r8, r2
 80074ae:	4698      	movls	r8, r3
 80074b0:	2303      	movs	r3, #3
 80074b2:	f02b 0204 	bic.w	r2, fp, #4
 80074b6:	6123      	str	r3, [r4, #16]
 80074b8:	6022      	str	r2, [r4, #0]
 80074ba:	f04f 0900 	mov.w	r9, #0
 80074be:	9700      	str	r7, [sp, #0]
 80074c0:	4633      	mov	r3, r6
 80074c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80074c4:	4621      	mov	r1, r4
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 f9e6 	bl	8007898 <_printf_common>
 80074cc:	3001      	adds	r0, #1
 80074ce:	f040 808d 	bne.w	80075ec <_printf_float+0x1d4>
 80074d2:	f04f 30ff 	mov.w	r0, #4294967295
 80074d6:	b00d      	add	sp, #52	; 0x34
 80074d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074dc:	4642      	mov	r2, r8
 80074de:	464b      	mov	r3, r9
 80074e0:	4640      	mov	r0, r8
 80074e2:	4649      	mov	r1, r9
 80074e4:	f7f9 fb32 	bl	8000b4c <__aeabi_dcmpun>
 80074e8:	b110      	cbz	r0, 80074f0 <_printf_float+0xd8>
 80074ea:	4a8c      	ldr	r2, [pc, #560]	; (800771c <_printf_float+0x304>)
 80074ec:	4b8c      	ldr	r3, [pc, #560]	; (8007720 <_printf_float+0x308>)
 80074ee:	e7da      	b.n	80074a6 <_printf_float+0x8e>
 80074f0:	6861      	ldr	r1, [r4, #4]
 80074f2:	1c4b      	adds	r3, r1, #1
 80074f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80074f8:	a80a      	add	r0, sp, #40	; 0x28
 80074fa:	d13e      	bne.n	800757a <_printf_float+0x162>
 80074fc:	2306      	movs	r3, #6
 80074fe:	6063      	str	r3, [r4, #4]
 8007500:	2300      	movs	r3, #0
 8007502:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007506:	ab09      	add	r3, sp, #36	; 0x24
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	ec49 8b10 	vmov	d0, r8, r9
 800750e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007512:	6022      	str	r2, [r4, #0]
 8007514:	f8cd a004 	str.w	sl, [sp, #4]
 8007518:	6861      	ldr	r1, [r4, #4]
 800751a:	4628      	mov	r0, r5
 800751c:	f7ff fee8 	bl	80072f0 <__cvt>
 8007520:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007524:	2b47      	cmp	r3, #71	; 0x47
 8007526:	4680      	mov	r8, r0
 8007528:	d109      	bne.n	800753e <_printf_float+0x126>
 800752a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800752c:	1cd8      	adds	r0, r3, #3
 800752e:	db02      	blt.n	8007536 <_printf_float+0x11e>
 8007530:	6862      	ldr	r2, [r4, #4]
 8007532:	4293      	cmp	r3, r2
 8007534:	dd47      	ble.n	80075c6 <_printf_float+0x1ae>
 8007536:	f1aa 0a02 	sub.w	sl, sl, #2
 800753a:	fa5f fa8a 	uxtb.w	sl, sl
 800753e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007542:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007544:	d824      	bhi.n	8007590 <_printf_float+0x178>
 8007546:	3901      	subs	r1, #1
 8007548:	4652      	mov	r2, sl
 800754a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800754e:	9109      	str	r1, [sp, #36]	; 0x24
 8007550:	f7ff ff2f 	bl	80073b2 <__exponent>
 8007554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007556:	1813      	adds	r3, r2, r0
 8007558:	2a01      	cmp	r2, #1
 800755a:	4681      	mov	r9, r0
 800755c:	6123      	str	r3, [r4, #16]
 800755e:	dc02      	bgt.n	8007566 <_printf_float+0x14e>
 8007560:	6822      	ldr	r2, [r4, #0]
 8007562:	07d1      	lsls	r1, r2, #31
 8007564:	d501      	bpl.n	800756a <_printf_float+0x152>
 8007566:	3301      	adds	r3, #1
 8007568:	6123      	str	r3, [r4, #16]
 800756a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0a5      	beq.n	80074be <_printf_float+0xa6>
 8007572:	232d      	movs	r3, #45	; 0x2d
 8007574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007578:	e7a1      	b.n	80074be <_printf_float+0xa6>
 800757a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800757e:	f000 8177 	beq.w	8007870 <_printf_float+0x458>
 8007582:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007586:	d1bb      	bne.n	8007500 <_printf_float+0xe8>
 8007588:	2900      	cmp	r1, #0
 800758a:	d1b9      	bne.n	8007500 <_printf_float+0xe8>
 800758c:	2301      	movs	r3, #1
 800758e:	e7b6      	b.n	80074fe <_printf_float+0xe6>
 8007590:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007594:	d119      	bne.n	80075ca <_printf_float+0x1b2>
 8007596:	2900      	cmp	r1, #0
 8007598:	6863      	ldr	r3, [r4, #4]
 800759a:	dd0c      	ble.n	80075b6 <_printf_float+0x19e>
 800759c:	6121      	str	r1, [r4, #16]
 800759e:	b913      	cbnz	r3, 80075a6 <_printf_float+0x18e>
 80075a0:	6822      	ldr	r2, [r4, #0]
 80075a2:	07d2      	lsls	r2, r2, #31
 80075a4:	d502      	bpl.n	80075ac <_printf_float+0x194>
 80075a6:	3301      	adds	r3, #1
 80075a8:	440b      	add	r3, r1
 80075aa:	6123      	str	r3, [r4, #16]
 80075ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80075b0:	f04f 0900 	mov.w	r9, #0
 80075b4:	e7d9      	b.n	800756a <_printf_float+0x152>
 80075b6:	b913      	cbnz	r3, 80075be <_printf_float+0x1a6>
 80075b8:	6822      	ldr	r2, [r4, #0]
 80075ba:	07d0      	lsls	r0, r2, #31
 80075bc:	d501      	bpl.n	80075c2 <_printf_float+0x1aa>
 80075be:	3302      	adds	r3, #2
 80075c0:	e7f3      	b.n	80075aa <_printf_float+0x192>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e7f1      	b.n	80075aa <_printf_float+0x192>
 80075c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80075ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80075ce:	4293      	cmp	r3, r2
 80075d0:	db05      	blt.n	80075de <_printf_float+0x1c6>
 80075d2:	6822      	ldr	r2, [r4, #0]
 80075d4:	6123      	str	r3, [r4, #16]
 80075d6:	07d1      	lsls	r1, r2, #31
 80075d8:	d5e8      	bpl.n	80075ac <_printf_float+0x194>
 80075da:	3301      	adds	r3, #1
 80075dc:	e7e5      	b.n	80075aa <_printf_float+0x192>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	bfd4      	ite	le
 80075e2:	f1c3 0302 	rsble	r3, r3, #2
 80075e6:	2301      	movgt	r3, #1
 80075e8:	4413      	add	r3, r2
 80075ea:	e7de      	b.n	80075aa <_printf_float+0x192>
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	055a      	lsls	r2, r3, #21
 80075f0:	d407      	bmi.n	8007602 <_printf_float+0x1ea>
 80075f2:	6923      	ldr	r3, [r4, #16]
 80075f4:	4642      	mov	r2, r8
 80075f6:	4631      	mov	r1, r6
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b8      	blx	r7
 80075fc:	3001      	adds	r0, #1
 80075fe:	d12b      	bne.n	8007658 <_printf_float+0x240>
 8007600:	e767      	b.n	80074d2 <_printf_float+0xba>
 8007602:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007606:	f240 80dc 	bls.w	80077c2 <_printf_float+0x3aa>
 800760a:	2200      	movs	r2, #0
 800760c:	2300      	movs	r3, #0
 800760e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007612:	f7f9 fa69 	bl	8000ae8 <__aeabi_dcmpeq>
 8007616:	2800      	cmp	r0, #0
 8007618:	d033      	beq.n	8007682 <_printf_float+0x26a>
 800761a:	2301      	movs	r3, #1
 800761c:	4a41      	ldr	r2, [pc, #260]	; (8007724 <_printf_float+0x30c>)
 800761e:	4631      	mov	r1, r6
 8007620:	4628      	mov	r0, r5
 8007622:	47b8      	blx	r7
 8007624:	3001      	adds	r0, #1
 8007626:	f43f af54 	beq.w	80074d2 <_printf_float+0xba>
 800762a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800762e:	429a      	cmp	r2, r3
 8007630:	db02      	blt.n	8007638 <_printf_float+0x220>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	07d8      	lsls	r0, r3, #31
 8007636:	d50f      	bpl.n	8007658 <_printf_float+0x240>
 8007638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	f43f af45 	beq.w	80074d2 <_printf_float+0xba>
 8007648:	f04f 0800 	mov.w	r8, #0
 800764c:	f104 091a 	add.w	r9, r4, #26
 8007650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007652:	3b01      	subs	r3, #1
 8007654:	4543      	cmp	r3, r8
 8007656:	dc09      	bgt.n	800766c <_printf_float+0x254>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	079b      	lsls	r3, r3, #30
 800765c:	f100 8103 	bmi.w	8007866 <_printf_float+0x44e>
 8007660:	68e0      	ldr	r0, [r4, #12]
 8007662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007664:	4298      	cmp	r0, r3
 8007666:	bfb8      	it	lt
 8007668:	4618      	movlt	r0, r3
 800766a:	e734      	b.n	80074d6 <_printf_float+0xbe>
 800766c:	2301      	movs	r3, #1
 800766e:	464a      	mov	r2, r9
 8007670:	4631      	mov	r1, r6
 8007672:	4628      	mov	r0, r5
 8007674:	47b8      	blx	r7
 8007676:	3001      	adds	r0, #1
 8007678:	f43f af2b 	beq.w	80074d2 <_printf_float+0xba>
 800767c:	f108 0801 	add.w	r8, r8, #1
 8007680:	e7e6      	b.n	8007650 <_printf_float+0x238>
 8007682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007684:	2b00      	cmp	r3, #0
 8007686:	dc2b      	bgt.n	80076e0 <_printf_float+0x2c8>
 8007688:	2301      	movs	r3, #1
 800768a:	4a26      	ldr	r2, [pc, #152]	; (8007724 <_printf_float+0x30c>)
 800768c:	4631      	mov	r1, r6
 800768e:	4628      	mov	r0, r5
 8007690:	47b8      	blx	r7
 8007692:	3001      	adds	r0, #1
 8007694:	f43f af1d 	beq.w	80074d2 <_printf_float+0xba>
 8007698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769a:	b923      	cbnz	r3, 80076a6 <_printf_float+0x28e>
 800769c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800769e:	b913      	cbnz	r3, 80076a6 <_printf_float+0x28e>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	07d9      	lsls	r1, r3, #31
 80076a4:	d5d8      	bpl.n	8007658 <_printf_float+0x240>
 80076a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076aa:	4631      	mov	r1, r6
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b8      	blx	r7
 80076b0:	3001      	adds	r0, #1
 80076b2:	f43f af0e 	beq.w	80074d2 <_printf_float+0xba>
 80076b6:	f04f 0900 	mov.w	r9, #0
 80076ba:	f104 0a1a 	add.w	sl, r4, #26
 80076be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c0:	425b      	negs	r3, r3
 80076c2:	454b      	cmp	r3, r9
 80076c4:	dc01      	bgt.n	80076ca <_printf_float+0x2b2>
 80076c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c8:	e794      	b.n	80075f4 <_printf_float+0x1dc>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4652      	mov	r2, sl
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	f43f aefc 	beq.w	80074d2 <_printf_float+0xba>
 80076da:	f109 0901 	add.w	r9, r9, #1
 80076de:	e7ee      	b.n	80076be <_printf_float+0x2a6>
 80076e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076e4:	429a      	cmp	r2, r3
 80076e6:	bfa8      	it	ge
 80076e8:	461a      	movge	r2, r3
 80076ea:	2a00      	cmp	r2, #0
 80076ec:	4691      	mov	r9, r2
 80076ee:	dd07      	ble.n	8007700 <_printf_float+0x2e8>
 80076f0:	4613      	mov	r3, r2
 80076f2:	4631      	mov	r1, r6
 80076f4:	4642      	mov	r2, r8
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	f43f aee9 	beq.w	80074d2 <_printf_float+0xba>
 8007700:	f104 031a 	add.w	r3, r4, #26
 8007704:	f04f 0b00 	mov.w	fp, #0
 8007708:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800770c:	9306      	str	r3, [sp, #24]
 800770e:	e015      	b.n	800773c <_printf_float+0x324>
 8007710:	7fefffff 	.word	0x7fefffff
 8007714:	0800c8b8 	.word	0x0800c8b8
 8007718:	0800c8b4 	.word	0x0800c8b4
 800771c:	0800c8c0 	.word	0x0800c8c0
 8007720:	0800c8bc 	.word	0x0800c8bc
 8007724:	0800c8c4 	.word	0x0800c8c4
 8007728:	2301      	movs	r3, #1
 800772a:	9a06      	ldr	r2, [sp, #24]
 800772c:	4631      	mov	r1, r6
 800772e:	4628      	mov	r0, r5
 8007730:	47b8      	blx	r7
 8007732:	3001      	adds	r0, #1
 8007734:	f43f aecd 	beq.w	80074d2 <_printf_float+0xba>
 8007738:	f10b 0b01 	add.w	fp, fp, #1
 800773c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007740:	ebaa 0309 	sub.w	r3, sl, r9
 8007744:	455b      	cmp	r3, fp
 8007746:	dcef      	bgt.n	8007728 <_printf_float+0x310>
 8007748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800774c:	429a      	cmp	r2, r3
 800774e:	44d0      	add	r8, sl
 8007750:	db15      	blt.n	800777e <_printf_float+0x366>
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	07da      	lsls	r2, r3, #31
 8007756:	d412      	bmi.n	800777e <_printf_float+0x366>
 8007758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800775a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800775c:	eba3 020a 	sub.w	r2, r3, sl
 8007760:	eba3 0a01 	sub.w	sl, r3, r1
 8007764:	4592      	cmp	sl, r2
 8007766:	bfa8      	it	ge
 8007768:	4692      	movge	sl, r2
 800776a:	f1ba 0f00 	cmp.w	sl, #0
 800776e:	dc0e      	bgt.n	800778e <_printf_float+0x376>
 8007770:	f04f 0800 	mov.w	r8, #0
 8007774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007778:	f104 091a 	add.w	r9, r4, #26
 800777c:	e019      	b.n	80077b2 <_printf_float+0x39a>
 800777e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007782:	4631      	mov	r1, r6
 8007784:	4628      	mov	r0, r5
 8007786:	47b8      	blx	r7
 8007788:	3001      	adds	r0, #1
 800778a:	d1e5      	bne.n	8007758 <_printf_float+0x340>
 800778c:	e6a1      	b.n	80074d2 <_printf_float+0xba>
 800778e:	4653      	mov	r3, sl
 8007790:	4642      	mov	r2, r8
 8007792:	4631      	mov	r1, r6
 8007794:	4628      	mov	r0, r5
 8007796:	47b8      	blx	r7
 8007798:	3001      	adds	r0, #1
 800779a:	d1e9      	bne.n	8007770 <_printf_float+0x358>
 800779c:	e699      	b.n	80074d2 <_printf_float+0xba>
 800779e:	2301      	movs	r3, #1
 80077a0:	464a      	mov	r2, r9
 80077a2:	4631      	mov	r1, r6
 80077a4:	4628      	mov	r0, r5
 80077a6:	47b8      	blx	r7
 80077a8:	3001      	adds	r0, #1
 80077aa:	f43f ae92 	beq.w	80074d2 <_printf_float+0xba>
 80077ae:	f108 0801 	add.w	r8, r8, #1
 80077b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	eba3 030a 	sub.w	r3, r3, sl
 80077bc:	4543      	cmp	r3, r8
 80077be:	dcee      	bgt.n	800779e <_printf_float+0x386>
 80077c0:	e74a      	b.n	8007658 <_printf_float+0x240>
 80077c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077c4:	2a01      	cmp	r2, #1
 80077c6:	dc01      	bgt.n	80077cc <_printf_float+0x3b4>
 80077c8:	07db      	lsls	r3, r3, #31
 80077ca:	d53a      	bpl.n	8007842 <_printf_float+0x42a>
 80077cc:	2301      	movs	r3, #1
 80077ce:	4642      	mov	r2, r8
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f ae7b 	beq.w	80074d2 <_printf_float+0xba>
 80077dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077e0:	4631      	mov	r1, r6
 80077e2:	4628      	mov	r0, r5
 80077e4:	47b8      	blx	r7
 80077e6:	3001      	adds	r0, #1
 80077e8:	f108 0801 	add.w	r8, r8, #1
 80077ec:	f43f ae71 	beq.w	80074d2 <_printf_float+0xba>
 80077f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f2:	2200      	movs	r2, #0
 80077f4:	f103 3aff 	add.w	sl, r3, #4294967295
 80077f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077fc:	2300      	movs	r3, #0
 80077fe:	f7f9 f973 	bl	8000ae8 <__aeabi_dcmpeq>
 8007802:	b9c8      	cbnz	r0, 8007838 <_printf_float+0x420>
 8007804:	4653      	mov	r3, sl
 8007806:	4642      	mov	r2, r8
 8007808:	4631      	mov	r1, r6
 800780a:	4628      	mov	r0, r5
 800780c:	47b8      	blx	r7
 800780e:	3001      	adds	r0, #1
 8007810:	d10e      	bne.n	8007830 <_printf_float+0x418>
 8007812:	e65e      	b.n	80074d2 <_printf_float+0xba>
 8007814:	2301      	movs	r3, #1
 8007816:	4652      	mov	r2, sl
 8007818:	4631      	mov	r1, r6
 800781a:	4628      	mov	r0, r5
 800781c:	47b8      	blx	r7
 800781e:	3001      	adds	r0, #1
 8007820:	f43f ae57 	beq.w	80074d2 <_printf_float+0xba>
 8007824:	f108 0801 	add.w	r8, r8, #1
 8007828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800782a:	3b01      	subs	r3, #1
 800782c:	4543      	cmp	r3, r8
 800782e:	dcf1      	bgt.n	8007814 <_printf_float+0x3fc>
 8007830:	464b      	mov	r3, r9
 8007832:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007836:	e6de      	b.n	80075f6 <_printf_float+0x1de>
 8007838:	f04f 0800 	mov.w	r8, #0
 800783c:	f104 0a1a 	add.w	sl, r4, #26
 8007840:	e7f2      	b.n	8007828 <_printf_float+0x410>
 8007842:	2301      	movs	r3, #1
 8007844:	e7df      	b.n	8007806 <_printf_float+0x3ee>
 8007846:	2301      	movs	r3, #1
 8007848:	464a      	mov	r2, r9
 800784a:	4631      	mov	r1, r6
 800784c:	4628      	mov	r0, r5
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	f43f ae3e 	beq.w	80074d2 <_printf_float+0xba>
 8007856:	f108 0801 	add.w	r8, r8, #1
 800785a:	68e3      	ldr	r3, [r4, #12]
 800785c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800785e:	1a9b      	subs	r3, r3, r2
 8007860:	4543      	cmp	r3, r8
 8007862:	dcf0      	bgt.n	8007846 <_printf_float+0x42e>
 8007864:	e6fc      	b.n	8007660 <_printf_float+0x248>
 8007866:	f04f 0800 	mov.w	r8, #0
 800786a:	f104 0919 	add.w	r9, r4, #25
 800786e:	e7f4      	b.n	800785a <_printf_float+0x442>
 8007870:	2900      	cmp	r1, #0
 8007872:	f43f ae8b 	beq.w	800758c <_printf_float+0x174>
 8007876:	2300      	movs	r3, #0
 8007878:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800787c:	ab09      	add	r3, sp, #36	; 0x24
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	ec49 8b10 	vmov	d0, r8, r9
 8007884:	6022      	str	r2, [r4, #0]
 8007886:	f8cd a004 	str.w	sl, [sp, #4]
 800788a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800788e:	4628      	mov	r0, r5
 8007890:	f7ff fd2e 	bl	80072f0 <__cvt>
 8007894:	4680      	mov	r8, r0
 8007896:	e648      	b.n	800752a <_printf_float+0x112>

08007898 <_printf_common>:
 8007898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800789c:	4691      	mov	r9, r2
 800789e:	461f      	mov	r7, r3
 80078a0:	688a      	ldr	r2, [r1, #8]
 80078a2:	690b      	ldr	r3, [r1, #16]
 80078a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078a8:	4293      	cmp	r3, r2
 80078aa:	bfb8      	it	lt
 80078ac:	4613      	movlt	r3, r2
 80078ae:	f8c9 3000 	str.w	r3, [r9]
 80078b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078b6:	4606      	mov	r6, r0
 80078b8:	460c      	mov	r4, r1
 80078ba:	b112      	cbz	r2, 80078c2 <_printf_common+0x2a>
 80078bc:	3301      	adds	r3, #1
 80078be:	f8c9 3000 	str.w	r3, [r9]
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	0699      	lsls	r1, r3, #26
 80078c6:	bf42      	ittt	mi
 80078c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80078cc:	3302      	addmi	r3, #2
 80078ce:	f8c9 3000 	strmi.w	r3, [r9]
 80078d2:	6825      	ldr	r5, [r4, #0]
 80078d4:	f015 0506 	ands.w	r5, r5, #6
 80078d8:	d107      	bne.n	80078ea <_printf_common+0x52>
 80078da:	f104 0a19 	add.w	sl, r4, #25
 80078de:	68e3      	ldr	r3, [r4, #12]
 80078e0:	f8d9 2000 	ldr.w	r2, [r9]
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	42ab      	cmp	r3, r5
 80078e8:	dc28      	bgt.n	800793c <_printf_common+0xa4>
 80078ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80078ee:	6822      	ldr	r2, [r4, #0]
 80078f0:	3300      	adds	r3, #0
 80078f2:	bf18      	it	ne
 80078f4:	2301      	movne	r3, #1
 80078f6:	0692      	lsls	r2, r2, #26
 80078f8:	d42d      	bmi.n	8007956 <_printf_common+0xbe>
 80078fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078fe:	4639      	mov	r1, r7
 8007900:	4630      	mov	r0, r6
 8007902:	47c0      	blx	r8
 8007904:	3001      	adds	r0, #1
 8007906:	d020      	beq.n	800794a <_printf_common+0xb2>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	68e5      	ldr	r5, [r4, #12]
 800790c:	f8d9 2000 	ldr.w	r2, [r9]
 8007910:	f003 0306 	and.w	r3, r3, #6
 8007914:	2b04      	cmp	r3, #4
 8007916:	bf08      	it	eq
 8007918:	1aad      	subeq	r5, r5, r2
 800791a:	68a3      	ldr	r3, [r4, #8]
 800791c:	6922      	ldr	r2, [r4, #16]
 800791e:	bf0c      	ite	eq
 8007920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007924:	2500      	movne	r5, #0
 8007926:	4293      	cmp	r3, r2
 8007928:	bfc4      	itt	gt
 800792a:	1a9b      	subgt	r3, r3, r2
 800792c:	18ed      	addgt	r5, r5, r3
 800792e:	f04f 0900 	mov.w	r9, #0
 8007932:	341a      	adds	r4, #26
 8007934:	454d      	cmp	r5, r9
 8007936:	d11a      	bne.n	800796e <_printf_common+0xd6>
 8007938:	2000      	movs	r0, #0
 800793a:	e008      	b.n	800794e <_printf_common+0xb6>
 800793c:	2301      	movs	r3, #1
 800793e:	4652      	mov	r2, sl
 8007940:	4639      	mov	r1, r7
 8007942:	4630      	mov	r0, r6
 8007944:	47c0      	blx	r8
 8007946:	3001      	adds	r0, #1
 8007948:	d103      	bne.n	8007952 <_printf_common+0xba>
 800794a:	f04f 30ff 	mov.w	r0, #4294967295
 800794e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007952:	3501      	adds	r5, #1
 8007954:	e7c3      	b.n	80078de <_printf_common+0x46>
 8007956:	18e1      	adds	r1, r4, r3
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	2030      	movs	r0, #48	; 0x30
 800795c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007960:	4422      	add	r2, r4
 8007962:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007966:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800796a:	3302      	adds	r3, #2
 800796c:	e7c5      	b.n	80078fa <_printf_common+0x62>
 800796e:	2301      	movs	r3, #1
 8007970:	4622      	mov	r2, r4
 8007972:	4639      	mov	r1, r7
 8007974:	4630      	mov	r0, r6
 8007976:	47c0      	blx	r8
 8007978:	3001      	adds	r0, #1
 800797a:	d0e6      	beq.n	800794a <_printf_common+0xb2>
 800797c:	f109 0901 	add.w	r9, r9, #1
 8007980:	e7d8      	b.n	8007934 <_printf_common+0x9c>
	...

08007984 <_printf_i>:
 8007984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007988:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800798c:	460c      	mov	r4, r1
 800798e:	7e09      	ldrb	r1, [r1, #24]
 8007990:	b085      	sub	sp, #20
 8007992:	296e      	cmp	r1, #110	; 0x6e
 8007994:	4617      	mov	r7, r2
 8007996:	4606      	mov	r6, r0
 8007998:	4698      	mov	r8, r3
 800799a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800799c:	f000 80b3 	beq.w	8007b06 <_printf_i+0x182>
 80079a0:	d822      	bhi.n	80079e8 <_printf_i+0x64>
 80079a2:	2963      	cmp	r1, #99	; 0x63
 80079a4:	d036      	beq.n	8007a14 <_printf_i+0x90>
 80079a6:	d80a      	bhi.n	80079be <_printf_i+0x3a>
 80079a8:	2900      	cmp	r1, #0
 80079aa:	f000 80b9 	beq.w	8007b20 <_printf_i+0x19c>
 80079ae:	2958      	cmp	r1, #88	; 0x58
 80079b0:	f000 8083 	beq.w	8007aba <_printf_i+0x136>
 80079b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80079bc:	e032      	b.n	8007a24 <_printf_i+0xa0>
 80079be:	2964      	cmp	r1, #100	; 0x64
 80079c0:	d001      	beq.n	80079c6 <_printf_i+0x42>
 80079c2:	2969      	cmp	r1, #105	; 0x69
 80079c4:	d1f6      	bne.n	80079b4 <_printf_i+0x30>
 80079c6:	6820      	ldr	r0, [r4, #0]
 80079c8:	6813      	ldr	r3, [r2, #0]
 80079ca:	0605      	lsls	r5, r0, #24
 80079cc:	f103 0104 	add.w	r1, r3, #4
 80079d0:	d52a      	bpl.n	8007a28 <_printf_i+0xa4>
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6011      	str	r1, [r2, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	da03      	bge.n	80079e2 <_printf_i+0x5e>
 80079da:	222d      	movs	r2, #45	; 0x2d
 80079dc:	425b      	negs	r3, r3
 80079de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80079e2:	486f      	ldr	r0, [pc, #444]	; (8007ba0 <_printf_i+0x21c>)
 80079e4:	220a      	movs	r2, #10
 80079e6:	e039      	b.n	8007a5c <_printf_i+0xd8>
 80079e8:	2973      	cmp	r1, #115	; 0x73
 80079ea:	f000 809d 	beq.w	8007b28 <_printf_i+0x1a4>
 80079ee:	d808      	bhi.n	8007a02 <_printf_i+0x7e>
 80079f0:	296f      	cmp	r1, #111	; 0x6f
 80079f2:	d020      	beq.n	8007a36 <_printf_i+0xb2>
 80079f4:	2970      	cmp	r1, #112	; 0x70
 80079f6:	d1dd      	bne.n	80079b4 <_printf_i+0x30>
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	f043 0320 	orr.w	r3, r3, #32
 80079fe:	6023      	str	r3, [r4, #0]
 8007a00:	e003      	b.n	8007a0a <_printf_i+0x86>
 8007a02:	2975      	cmp	r1, #117	; 0x75
 8007a04:	d017      	beq.n	8007a36 <_printf_i+0xb2>
 8007a06:	2978      	cmp	r1, #120	; 0x78
 8007a08:	d1d4      	bne.n	80079b4 <_printf_i+0x30>
 8007a0a:	2378      	movs	r3, #120	; 0x78
 8007a0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a10:	4864      	ldr	r0, [pc, #400]	; (8007ba4 <_printf_i+0x220>)
 8007a12:	e055      	b.n	8007ac0 <_printf_i+0x13c>
 8007a14:	6813      	ldr	r3, [r2, #0]
 8007a16:	1d19      	adds	r1, r3, #4
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6011      	str	r1, [r2, #0]
 8007a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a24:	2301      	movs	r3, #1
 8007a26:	e08c      	b.n	8007b42 <_printf_i+0x1be>
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6011      	str	r1, [r2, #0]
 8007a2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a30:	bf18      	it	ne
 8007a32:	b21b      	sxthne	r3, r3
 8007a34:	e7cf      	b.n	80079d6 <_printf_i+0x52>
 8007a36:	6813      	ldr	r3, [r2, #0]
 8007a38:	6825      	ldr	r5, [r4, #0]
 8007a3a:	1d18      	adds	r0, r3, #4
 8007a3c:	6010      	str	r0, [r2, #0]
 8007a3e:	0628      	lsls	r0, r5, #24
 8007a40:	d501      	bpl.n	8007a46 <_printf_i+0xc2>
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	e002      	b.n	8007a4c <_printf_i+0xc8>
 8007a46:	0668      	lsls	r0, r5, #25
 8007a48:	d5fb      	bpl.n	8007a42 <_printf_i+0xbe>
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	4854      	ldr	r0, [pc, #336]	; (8007ba0 <_printf_i+0x21c>)
 8007a4e:	296f      	cmp	r1, #111	; 0x6f
 8007a50:	bf14      	ite	ne
 8007a52:	220a      	movne	r2, #10
 8007a54:	2208      	moveq	r2, #8
 8007a56:	2100      	movs	r1, #0
 8007a58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a5c:	6865      	ldr	r5, [r4, #4]
 8007a5e:	60a5      	str	r5, [r4, #8]
 8007a60:	2d00      	cmp	r5, #0
 8007a62:	f2c0 8095 	blt.w	8007b90 <_printf_i+0x20c>
 8007a66:	6821      	ldr	r1, [r4, #0]
 8007a68:	f021 0104 	bic.w	r1, r1, #4
 8007a6c:	6021      	str	r1, [r4, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d13d      	bne.n	8007aee <_printf_i+0x16a>
 8007a72:	2d00      	cmp	r5, #0
 8007a74:	f040 808e 	bne.w	8007b94 <_printf_i+0x210>
 8007a78:	4665      	mov	r5, ip
 8007a7a:	2a08      	cmp	r2, #8
 8007a7c:	d10b      	bne.n	8007a96 <_printf_i+0x112>
 8007a7e:	6823      	ldr	r3, [r4, #0]
 8007a80:	07db      	lsls	r3, r3, #31
 8007a82:	d508      	bpl.n	8007a96 <_printf_i+0x112>
 8007a84:	6923      	ldr	r3, [r4, #16]
 8007a86:	6862      	ldr	r2, [r4, #4]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	bfde      	ittt	le
 8007a8c:	2330      	movle	r3, #48	; 0x30
 8007a8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a96:	ebac 0305 	sub.w	r3, ip, r5
 8007a9a:	6123      	str	r3, [r4, #16]
 8007a9c:	f8cd 8000 	str.w	r8, [sp]
 8007aa0:	463b      	mov	r3, r7
 8007aa2:	aa03      	add	r2, sp, #12
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f7ff fef6 	bl	8007898 <_printf_common>
 8007aac:	3001      	adds	r0, #1
 8007aae:	d14d      	bne.n	8007b4c <_printf_i+0x1c8>
 8007ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab4:	b005      	add	sp, #20
 8007ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aba:	4839      	ldr	r0, [pc, #228]	; (8007ba0 <_printf_i+0x21c>)
 8007abc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007ac0:	6813      	ldr	r3, [r2, #0]
 8007ac2:	6821      	ldr	r1, [r4, #0]
 8007ac4:	1d1d      	adds	r5, r3, #4
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6015      	str	r5, [r2, #0]
 8007aca:	060a      	lsls	r2, r1, #24
 8007acc:	d50b      	bpl.n	8007ae6 <_printf_i+0x162>
 8007ace:	07ca      	lsls	r2, r1, #31
 8007ad0:	bf44      	itt	mi
 8007ad2:	f041 0120 	orrmi.w	r1, r1, #32
 8007ad6:	6021      	strmi	r1, [r4, #0]
 8007ad8:	b91b      	cbnz	r3, 8007ae2 <_printf_i+0x15e>
 8007ada:	6822      	ldr	r2, [r4, #0]
 8007adc:	f022 0220 	bic.w	r2, r2, #32
 8007ae0:	6022      	str	r2, [r4, #0]
 8007ae2:	2210      	movs	r2, #16
 8007ae4:	e7b7      	b.n	8007a56 <_printf_i+0xd2>
 8007ae6:	064d      	lsls	r5, r1, #25
 8007ae8:	bf48      	it	mi
 8007aea:	b29b      	uxthmi	r3, r3
 8007aec:	e7ef      	b.n	8007ace <_printf_i+0x14a>
 8007aee:	4665      	mov	r5, ip
 8007af0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007af4:	fb02 3311 	mls	r3, r2, r1, r3
 8007af8:	5cc3      	ldrb	r3, [r0, r3]
 8007afa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007afe:	460b      	mov	r3, r1
 8007b00:	2900      	cmp	r1, #0
 8007b02:	d1f5      	bne.n	8007af0 <_printf_i+0x16c>
 8007b04:	e7b9      	b.n	8007a7a <_printf_i+0xf6>
 8007b06:	6813      	ldr	r3, [r2, #0]
 8007b08:	6825      	ldr	r5, [r4, #0]
 8007b0a:	6961      	ldr	r1, [r4, #20]
 8007b0c:	1d18      	adds	r0, r3, #4
 8007b0e:	6010      	str	r0, [r2, #0]
 8007b10:	0628      	lsls	r0, r5, #24
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	d501      	bpl.n	8007b1a <_printf_i+0x196>
 8007b16:	6019      	str	r1, [r3, #0]
 8007b18:	e002      	b.n	8007b20 <_printf_i+0x19c>
 8007b1a:	066a      	lsls	r2, r5, #25
 8007b1c:	d5fb      	bpl.n	8007b16 <_printf_i+0x192>
 8007b1e:	8019      	strh	r1, [r3, #0]
 8007b20:	2300      	movs	r3, #0
 8007b22:	6123      	str	r3, [r4, #16]
 8007b24:	4665      	mov	r5, ip
 8007b26:	e7b9      	b.n	8007a9c <_printf_i+0x118>
 8007b28:	6813      	ldr	r3, [r2, #0]
 8007b2a:	1d19      	adds	r1, r3, #4
 8007b2c:	6011      	str	r1, [r2, #0]
 8007b2e:	681d      	ldr	r5, [r3, #0]
 8007b30:	6862      	ldr	r2, [r4, #4]
 8007b32:	2100      	movs	r1, #0
 8007b34:	4628      	mov	r0, r5
 8007b36:	f7f8 fb63 	bl	8000200 <memchr>
 8007b3a:	b108      	cbz	r0, 8007b40 <_printf_i+0x1bc>
 8007b3c:	1b40      	subs	r0, r0, r5
 8007b3e:	6060      	str	r0, [r4, #4]
 8007b40:	6863      	ldr	r3, [r4, #4]
 8007b42:	6123      	str	r3, [r4, #16]
 8007b44:	2300      	movs	r3, #0
 8007b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b4a:	e7a7      	b.n	8007a9c <_printf_i+0x118>
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	462a      	mov	r2, r5
 8007b50:	4639      	mov	r1, r7
 8007b52:	4630      	mov	r0, r6
 8007b54:	47c0      	blx	r8
 8007b56:	3001      	adds	r0, #1
 8007b58:	d0aa      	beq.n	8007ab0 <_printf_i+0x12c>
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	079b      	lsls	r3, r3, #30
 8007b5e:	d413      	bmi.n	8007b88 <_printf_i+0x204>
 8007b60:	68e0      	ldr	r0, [r4, #12]
 8007b62:	9b03      	ldr	r3, [sp, #12]
 8007b64:	4298      	cmp	r0, r3
 8007b66:	bfb8      	it	lt
 8007b68:	4618      	movlt	r0, r3
 8007b6a:	e7a3      	b.n	8007ab4 <_printf_i+0x130>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	464a      	mov	r2, r9
 8007b70:	4639      	mov	r1, r7
 8007b72:	4630      	mov	r0, r6
 8007b74:	47c0      	blx	r8
 8007b76:	3001      	adds	r0, #1
 8007b78:	d09a      	beq.n	8007ab0 <_printf_i+0x12c>
 8007b7a:	3501      	adds	r5, #1
 8007b7c:	68e3      	ldr	r3, [r4, #12]
 8007b7e:	9a03      	ldr	r2, [sp, #12]
 8007b80:	1a9b      	subs	r3, r3, r2
 8007b82:	42ab      	cmp	r3, r5
 8007b84:	dcf2      	bgt.n	8007b6c <_printf_i+0x1e8>
 8007b86:	e7eb      	b.n	8007b60 <_printf_i+0x1dc>
 8007b88:	2500      	movs	r5, #0
 8007b8a:	f104 0919 	add.w	r9, r4, #25
 8007b8e:	e7f5      	b.n	8007b7c <_printf_i+0x1f8>
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1ac      	bne.n	8007aee <_printf_i+0x16a>
 8007b94:	7803      	ldrb	r3, [r0, #0]
 8007b96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b9e:	e76c      	b.n	8007a7a <_printf_i+0xf6>
 8007ba0:	0800c8c6 	.word	0x0800c8c6
 8007ba4:	0800c8d7 	.word	0x0800c8d7

08007ba8 <_scanf_float>:
 8007ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	469a      	mov	sl, r3
 8007bae:	688b      	ldr	r3, [r1, #8]
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	1e5a      	subs	r2, r3, #1
 8007bb4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007bb8:	b087      	sub	sp, #28
 8007bba:	bf83      	ittte	hi
 8007bbc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007bc0:	189b      	addhi	r3, r3, r2
 8007bc2:	9301      	strhi	r3, [sp, #4]
 8007bc4:	2300      	movls	r3, #0
 8007bc6:	bf86      	itte	hi
 8007bc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007bcc:	608b      	strhi	r3, [r1, #8]
 8007bce:	9301      	strls	r3, [sp, #4]
 8007bd0:	680b      	ldr	r3, [r1, #0]
 8007bd2:	4688      	mov	r8, r1
 8007bd4:	f04f 0b00 	mov.w	fp, #0
 8007bd8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007bdc:	f848 3b1c 	str.w	r3, [r8], #28
 8007be0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007be4:	4607      	mov	r7, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	4645      	mov	r5, r8
 8007bea:	465a      	mov	r2, fp
 8007bec:	46d9      	mov	r9, fp
 8007bee:	f8cd b008 	str.w	fp, [sp, #8]
 8007bf2:	68a1      	ldr	r1, [r4, #8]
 8007bf4:	b181      	cbz	r1, 8007c18 <_scanf_float+0x70>
 8007bf6:	6833      	ldr	r3, [r6, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	2b49      	cmp	r3, #73	; 0x49
 8007bfc:	d071      	beq.n	8007ce2 <_scanf_float+0x13a>
 8007bfe:	d84d      	bhi.n	8007c9c <_scanf_float+0xf4>
 8007c00:	2b39      	cmp	r3, #57	; 0x39
 8007c02:	d840      	bhi.n	8007c86 <_scanf_float+0xde>
 8007c04:	2b31      	cmp	r3, #49	; 0x31
 8007c06:	f080 8088 	bcs.w	8007d1a <_scanf_float+0x172>
 8007c0a:	2b2d      	cmp	r3, #45	; 0x2d
 8007c0c:	f000 8090 	beq.w	8007d30 <_scanf_float+0x188>
 8007c10:	d815      	bhi.n	8007c3e <_scanf_float+0x96>
 8007c12:	2b2b      	cmp	r3, #43	; 0x2b
 8007c14:	f000 808c 	beq.w	8007d30 <_scanf_float+0x188>
 8007c18:	f1b9 0f00 	cmp.w	r9, #0
 8007c1c:	d003      	beq.n	8007c26 <_scanf_float+0x7e>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	3a01      	subs	r2, #1
 8007c28:	2a01      	cmp	r2, #1
 8007c2a:	f200 80ea 	bhi.w	8007e02 <_scanf_float+0x25a>
 8007c2e:	4545      	cmp	r5, r8
 8007c30:	f200 80dc 	bhi.w	8007dec <_scanf_float+0x244>
 8007c34:	2601      	movs	r6, #1
 8007c36:	4630      	mov	r0, r6
 8007c38:	b007      	add	sp, #28
 8007c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007c40:	f000 809f 	beq.w	8007d82 <_scanf_float+0x1da>
 8007c44:	2b30      	cmp	r3, #48	; 0x30
 8007c46:	d1e7      	bne.n	8007c18 <_scanf_float+0x70>
 8007c48:	6820      	ldr	r0, [r4, #0]
 8007c4a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007c4e:	d064      	beq.n	8007d1a <_scanf_float+0x172>
 8007c50:	9b01      	ldr	r3, [sp, #4]
 8007c52:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007c56:	6020      	str	r0, [r4, #0]
 8007c58:	f109 0901 	add.w	r9, r9, #1
 8007c5c:	b11b      	cbz	r3, 8007c66 <_scanf_float+0xbe>
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	3101      	adds	r1, #1
 8007c62:	9301      	str	r3, [sp, #4]
 8007c64:	60a1      	str	r1, [r4, #8]
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	60a3      	str	r3, [r4, #8]
 8007c6c:	6923      	ldr	r3, [r4, #16]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	6123      	str	r3, [r4, #16]
 8007c72:	6873      	ldr	r3, [r6, #4]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	6073      	str	r3, [r6, #4]
 8007c7a:	f340 80ac 	ble.w	8007dd6 <_scanf_float+0x22e>
 8007c7e:	6833      	ldr	r3, [r6, #0]
 8007c80:	3301      	adds	r3, #1
 8007c82:	6033      	str	r3, [r6, #0]
 8007c84:	e7b5      	b.n	8007bf2 <_scanf_float+0x4a>
 8007c86:	2b45      	cmp	r3, #69	; 0x45
 8007c88:	f000 8085 	beq.w	8007d96 <_scanf_float+0x1ee>
 8007c8c:	2b46      	cmp	r3, #70	; 0x46
 8007c8e:	d06a      	beq.n	8007d66 <_scanf_float+0x1be>
 8007c90:	2b41      	cmp	r3, #65	; 0x41
 8007c92:	d1c1      	bne.n	8007c18 <_scanf_float+0x70>
 8007c94:	2a01      	cmp	r2, #1
 8007c96:	d1bf      	bne.n	8007c18 <_scanf_float+0x70>
 8007c98:	2202      	movs	r2, #2
 8007c9a:	e046      	b.n	8007d2a <_scanf_float+0x182>
 8007c9c:	2b65      	cmp	r3, #101	; 0x65
 8007c9e:	d07a      	beq.n	8007d96 <_scanf_float+0x1ee>
 8007ca0:	d818      	bhi.n	8007cd4 <_scanf_float+0x12c>
 8007ca2:	2b54      	cmp	r3, #84	; 0x54
 8007ca4:	d066      	beq.n	8007d74 <_scanf_float+0x1cc>
 8007ca6:	d811      	bhi.n	8007ccc <_scanf_float+0x124>
 8007ca8:	2b4e      	cmp	r3, #78	; 0x4e
 8007caa:	d1b5      	bne.n	8007c18 <_scanf_float+0x70>
 8007cac:	2a00      	cmp	r2, #0
 8007cae:	d146      	bne.n	8007d3e <_scanf_float+0x196>
 8007cb0:	f1b9 0f00 	cmp.w	r9, #0
 8007cb4:	d145      	bne.n	8007d42 <_scanf_float+0x19a>
 8007cb6:	6821      	ldr	r1, [r4, #0]
 8007cb8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007cbc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007cc0:	d13f      	bne.n	8007d42 <_scanf_float+0x19a>
 8007cc2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007cc6:	6021      	str	r1, [r4, #0]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	e02e      	b.n	8007d2a <_scanf_float+0x182>
 8007ccc:	2b59      	cmp	r3, #89	; 0x59
 8007cce:	d01e      	beq.n	8007d0e <_scanf_float+0x166>
 8007cd0:	2b61      	cmp	r3, #97	; 0x61
 8007cd2:	e7de      	b.n	8007c92 <_scanf_float+0xea>
 8007cd4:	2b6e      	cmp	r3, #110	; 0x6e
 8007cd6:	d0e9      	beq.n	8007cac <_scanf_float+0x104>
 8007cd8:	d815      	bhi.n	8007d06 <_scanf_float+0x15e>
 8007cda:	2b66      	cmp	r3, #102	; 0x66
 8007cdc:	d043      	beq.n	8007d66 <_scanf_float+0x1be>
 8007cde:	2b69      	cmp	r3, #105	; 0x69
 8007ce0:	d19a      	bne.n	8007c18 <_scanf_float+0x70>
 8007ce2:	f1bb 0f00 	cmp.w	fp, #0
 8007ce6:	d138      	bne.n	8007d5a <_scanf_float+0x1b2>
 8007ce8:	f1b9 0f00 	cmp.w	r9, #0
 8007cec:	d197      	bne.n	8007c1e <_scanf_float+0x76>
 8007cee:	6821      	ldr	r1, [r4, #0]
 8007cf0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007cf4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007cf8:	d195      	bne.n	8007c26 <_scanf_float+0x7e>
 8007cfa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007cfe:	6021      	str	r1, [r4, #0]
 8007d00:	f04f 0b01 	mov.w	fp, #1
 8007d04:	e011      	b.n	8007d2a <_scanf_float+0x182>
 8007d06:	2b74      	cmp	r3, #116	; 0x74
 8007d08:	d034      	beq.n	8007d74 <_scanf_float+0x1cc>
 8007d0a:	2b79      	cmp	r3, #121	; 0x79
 8007d0c:	d184      	bne.n	8007c18 <_scanf_float+0x70>
 8007d0e:	f1bb 0f07 	cmp.w	fp, #7
 8007d12:	d181      	bne.n	8007c18 <_scanf_float+0x70>
 8007d14:	f04f 0b08 	mov.w	fp, #8
 8007d18:	e007      	b.n	8007d2a <_scanf_float+0x182>
 8007d1a:	eb12 0f0b 	cmn.w	r2, fp
 8007d1e:	f47f af7b 	bne.w	8007c18 <_scanf_float+0x70>
 8007d22:	6821      	ldr	r1, [r4, #0]
 8007d24:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007d28:	6021      	str	r1, [r4, #0]
 8007d2a:	702b      	strb	r3, [r5, #0]
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	e79a      	b.n	8007c66 <_scanf_float+0xbe>
 8007d30:	6821      	ldr	r1, [r4, #0]
 8007d32:	0608      	lsls	r0, r1, #24
 8007d34:	f57f af70 	bpl.w	8007c18 <_scanf_float+0x70>
 8007d38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007d3c:	e7f4      	b.n	8007d28 <_scanf_float+0x180>
 8007d3e:	2a02      	cmp	r2, #2
 8007d40:	d047      	beq.n	8007dd2 <_scanf_float+0x22a>
 8007d42:	f1bb 0f01 	cmp.w	fp, #1
 8007d46:	d003      	beq.n	8007d50 <_scanf_float+0x1a8>
 8007d48:	f1bb 0f04 	cmp.w	fp, #4
 8007d4c:	f47f af64 	bne.w	8007c18 <_scanf_float+0x70>
 8007d50:	f10b 0b01 	add.w	fp, fp, #1
 8007d54:	fa5f fb8b 	uxtb.w	fp, fp
 8007d58:	e7e7      	b.n	8007d2a <_scanf_float+0x182>
 8007d5a:	f1bb 0f03 	cmp.w	fp, #3
 8007d5e:	d0f7      	beq.n	8007d50 <_scanf_float+0x1a8>
 8007d60:	f1bb 0f05 	cmp.w	fp, #5
 8007d64:	e7f2      	b.n	8007d4c <_scanf_float+0x1a4>
 8007d66:	f1bb 0f02 	cmp.w	fp, #2
 8007d6a:	f47f af55 	bne.w	8007c18 <_scanf_float+0x70>
 8007d6e:	f04f 0b03 	mov.w	fp, #3
 8007d72:	e7da      	b.n	8007d2a <_scanf_float+0x182>
 8007d74:	f1bb 0f06 	cmp.w	fp, #6
 8007d78:	f47f af4e 	bne.w	8007c18 <_scanf_float+0x70>
 8007d7c:	f04f 0b07 	mov.w	fp, #7
 8007d80:	e7d3      	b.n	8007d2a <_scanf_float+0x182>
 8007d82:	6821      	ldr	r1, [r4, #0]
 8007d84:	0588      	lsls	r0, r1, #22
 8007d86:	f57f af47 	bpl.w	8007c18 <_scanf_float+0x70>
 8007d8a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007d8e:	6021      	str	r1, [r4, #0]
 8007d90:	f8cd 9008 	str.w	r9, [sp, #8]
 8007d94:	e7c9      	b.n	8007d2a <_scanf_float+0x182>
 8007d96:	6821      	ldr	r1, [r4, #0]
 8007d98:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007d9c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007da0:	d006      	beq.n	8007db0 <_scanf_float+0x208>
 8007da2:	0548      	lsls	r0, r1, #21
 8007da4:	f57f af38 	bpl.w	8007c18 <_scanf_float+0x70>
 8007da8:	f1b9 0f00 	cmp.w	r9, #0
 8007dac:	f43f af3b 	beq.w	8007c26 <_scanf_float+0x7e>
 8007db0:	0588      	lsls	r0, r1, #22
 8007db2:	bf58      	it	pl
 8007db4:	9802      	ldrpl	r0, [sp, #8]
 8007db6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007dba:	bf58      	it	pl
 8007dbc:	eba9 0000 	subpl.w	r0, r9, r0
 8007dc0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007dc4:	bf58      	it	pl
 8007dc6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007dca:	6021      	str	r1, [r4, #0]
 8007dcc:	f04f 0900 	mov.w	r9, #0
 8007dd0:	e7ab      	b.n	8007d2a <_scanf_float+0x182>
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	e7a9      	b.n	8007d2a <_scanf_float+0x182>
 8007dd6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007dda:	9205      	str	r2, [sp, #20]
 8007ddc:	4631      	mov	r1, r6
 8007dde:	4638      	mov	r0, r7
 8007de0:	4798      	blx	r3
 8007de2:	9a05      	ldr	r2, [sp, #20]
 8007de4:	2800      	cmp	r0, #0
 8007de6:	f43f af04 	beq.w	8007bf2 <_scanf_float+0x4a>
 8007dea:	e715      	b.n	8007c18 <_scanf_float+0x70>
 8007dec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007df0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007df4:	4632      	mov	r2, r6
 8007df6:	4638      	mov	r0, r7
 8007df8:	4798      	blx	r3
 8007dfa:	6923      	ldr	r3, [r4, #16]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	6123      	str	r3, [r4, #16]
 8007e00:	e715      	b.n	8007c2e <_scanf_float+0x86>
 8007e02:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007e06:	2b06      	cmp	r3, #6
 8007e08:	d80a      	bhi.n	8007e20 <_scanf_float+0x278>
 8007e0a:	f1bb 0f02 	cmp.w	fp, #2
 8007e0e:	d968      	bls.n	8007ee2 <_scanf_float+0x33a>
 8007e10:	f1ab 0b03 	sub.w	fp, fp, #3
 8007e14:	fa5f fb8b 	uxtb.w	fp, fp
 8007e18:	eba5 0b0b 	sub.w	fp, r5, fp
 8007e1c:	455d      	cmp	r5, fp
 8007e1e:	d14b      	bne.n	8007eb8 <_scanf_float+0x310>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	05da      	lsls	r2, r3, #23
 8007e24:	d51f      	bpl.n	8007e66 <_scanf_float+0x2be>
 8007e26:	055b      	lsls	r3, r3, #21
 8007e28:	d468      	bmi.n	8007efc <_scanf_float+0x354>
 8007e2a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007e2e:	6923      	ldr	r3, [r4, #16]
 8007e30:	2965      	cmp	r1, #101	; 0x65
 8007e32:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e36:	f105 3bff 	add.w	fp, r5, #4294967295
 8007e3a:	6123      	str	r3, [r4, #16]
 8007e3c:	d00d      	beq.n	8007e5a <_scanf_float+0x2b2>
 8007e3e:	2945      	cmp	r1, #69	; 0x45
 8007e40:	d00b      	beq.n	8007e5a <_scanf_float+0x2b2>
 8007e42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e46:	4632      	mov	r2, r6
 8007e48:	4638      	mov	r0, r7
 8007e4a:	4798      	blx	r3
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	f1a5 0b02 	sub.w	fp, r5, #2
 8007e58:	6123      	str	r3, [r4, #16]
 8007e5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e5e:	4632      	mov	r2, r6
 8007e60:	4638      	mov	r0, r7
 8007e62:	4798      	blx	r3
 8007e64:	465d      	mov	r5, fp
 8007e66:	6826      	ldr	r6, [r4, #0]
 8007e68:	f016 0610 	ands.w	r6, r6, #16
 8007e6c:	d17a      	bne.n	8007f64 <_scanf_float+0x3bc>
 8007e6e:	702e      	strb	r6, [r5, #0]
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e7a:	d142      	bne.n	8007f02 <_scanf_float+0x35a>
 8007e7c:	9b02      	ldr	r3, [sp, #8]
 8007e7e:	eba9 0303 	sub.w	r3, r9, r3
 8007e82:	425a      	negs	r2, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d149      	bne.n	8007f1c <_scanf_float+0x374>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	4641      	mov	r1, r8
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	f000 fea3 	bl	8008bd8 <_strtod_r>
 8007e92:	6825      	ldr	r5, [r4, #0]
 8007e94:	f8da 3000 	ldr.w	r3, [sl]
 8007e98:	f015 0f02 	tst.w	r5, #2
 8007e9c:	f103 0204 	add.w	r2, r3, #4
 8007ea0:	ec59 8b10 	vmov	r8, r9, d0
 8007ea4:	f8ca 2000 	str.w	r2, [sl]
 8007ea8:	d043      	beq.n	8007f32 <_scanf_float+0x38a>
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	e9c3 8900 	strd	r8, r9, [r3]
 8007eb0:	68e3      	ldr	r3, [r4, #12]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	60e3      	str	r3, [r4, #12]
 8007eb6:	e6be      	b.n	8007c36 <_scanf_float+0x8e>
 8007eb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ebc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007ec0:	4632      	mov	r2, r6
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	4798      	blx	r3
 8007ec6:	6923      	ldr	r3, [r4, #16]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	6123      	str	r3, [r4, #16]
 8007ecc:	e7a6      	b.n	8007e1c <_scanf_float+0x274>
 8007ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ed2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007ed6:	4632      	mov	r2, r6
 8007ed8:	4638      	mov	r0, r7
 8007eda:	4798      	blx	r3
 8007edc:	6923      	ldr	r3, [r4, #16]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	6123      	str	r3, [r4, #16]
 8007ee2:	4545      	cmp	r5, r8
 8007ee4:	d8f3      	bhi.n	8007ece <_scanf_float+0x326>
 8007ee6:	e6a5      	b.n	8007c34 <_scanf_float+0x8c>
 8007ee8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007eec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007ef0:	4632      	mov	r2, r6
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	4798      	blx	r3
 8007ef6:	6923      	ldr	r3, [r4, #16]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	6123      	str	r3, [r4, #16]
 8007efc:	4545      	cmp	r5, r8
 8007efe:	d8f3      	bhi.n	8007ee8 <_scanf_float+0x340>
 8007f00:	e698      	b.n	8007c34 <_scanf_float+0x8c>
 8007f02:	9b03      	ldr	r3, [sp, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0bf      	beq.n	8007e88 <_scanf_float+0x2e0>
 8007f08:	9904      	ldr	r1, [sp, #16]
 8007f0a:	230a      	movs	r3, #10
 8007f0c:	4632      	mov	r2, r6
 8007f0e:	3101      	adds	r1, #1
 8007f10:	4638      	mov	r0, r7
 8007f12:	f000 feed 	bl	8008cf0 <_strtol_r>
 8007f16:	9b03      	ldr	r3, [sp, #12]
 8007f18:	9d04      	ldr	r5, [sp, #16]
 8007f1a:	1ac2      	subs	r2, r0, r3
 8007f1c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007f20:	429d      	cmp	r5, r3
 8007f22:	bf28      	it	cs
 8007f24:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007f28:	490f      	ldr	r1, [pc, #60]	; (8007f68 <_scanf_float+0x3c0>)
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f000 f824 	bl	8007f78 <siprintf>
 8007f30:	e7aa      	b.n	8007e88 <_scanf_float+0x2e0>
 8007f32:	f015 0504 	ands.w	r5, r5, #4
 8007f36:	d1b8      	bne.n	8007eaa <_scanf_float+0x302>
 8007f38:	681f      	ldr	r7, [r3, #0]
 8007f3a:	ee10 2a10 	vmov	r2, s0
 8007f3e:	464b      	mov	r3, r9
 8007f40:	ee10 0a10 	vmov	r0, s0
 8007f44:	4649      	mov	r1, r9
 8007f46:	f7f8 fe01 	bl	8000b4c <__aeabi_dcmpun>
 8007f4a:	b128      	cbz	r0, 8007f58 <_scanf_float+0x3b0>
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	f000 f80d 	bl	8007f6c <nanf>
 8007f52:	ed87 0a00 	vstr	s0, [r7]
 8007f56:	e7ab      	b.n	8007eb0 <_scanf_float+0x308>
 8007f58:	4640      	mov	r0, r8
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	f7f8 fe54 	bl	8000c08 <__aeabi_d2f>
 8007f60:	6038      	str	r0, [r7, #0]
 8007f62:	e7a5      	b.n	8007eb0 <_scanf_float+0x308>
 8007f64:	2600      	movs	r6, #0
 8007f66:	e666      	b.n	8007c36 <_scanf_float+0x8e>
 8007f68:	0800c8e8 	.word	0x0800c8e8

08007f6c <nanf>:
 8007f6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007f74 <nanf+0x8>
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	7fc00000 	.word	0x7fc00000

08007f78 <siprintf>:
 8007f78:	b40e      	push	{r1, r2, r3}
 8007f7a:	b500      	push	{lr}
 8007f7c:	b09c      	sub	sp, #112	; 0x70
 8007f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8007f80:	9002      	str	r0, [sp, #8]
 8007f82:	9006      	str	r0, [sp, #24]
 8007f84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f88:	4809      	ldr	r0, [pc, #36]	; (8007fb0 <siprintf+0x38>)
 8007f8a:	9107      	str	r1, [sp, #28]
 8007f8c:	9104      	str	r1, [sp, #16]
 8007f8e:	4909      	ldr	r1, [pc, #36]	; (8007fb4 <siprintf+0x3c>)
 8007f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f94:	9105      	str	r1, [sp, #20]
 8007f96:	6800      	ldr	r0, [r0, #0]
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	a902      	add	r1, sp, #8
 8007f9c:	f002 fd6e 	bl	800aa7c <_svfiprintf_r>
 8007fa0:	9b02      	ldr	r3, [sp, #8]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	b01c      	add	sp, #112	; 0x70
 8007fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fac:	b003      	add	sp, #12
 8007fae:	4770      	bx	lr
 8007fb0:	20000054 	.word	0x20000054
 8007fb4:	ffff0208 	.word	0xffff0208

08007fb8 <sulp>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	4604      	mov	r4, r0
 8007fbc:	460d      	mov	r5, r1
 8007fbe:	ec45 4b10 	vmov	d0, r4, r5
 8007fc2:	4616      	mov	r6, r2
 8007fc4:	f002 fb16 	bl	800a5f4 <__ulp>
 8007fc8:	ec51 0b10 	vmov	r0, r1, d0
 8007fcc:	b17e      	cbz	r6, 8007fee <sulp+0x36>
 8007fce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007fd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	dd09      	ble.n	8007fee <sulp+0x36>
 8007fda:	051b      	lsls	r3, r3, #20
 8007fdc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007fe0:	2400      	movs	r4, #0
 8007fe2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	462b      	mov	r3, r5
 8007fea:	f7f8 fb15 	bl	8000618 <__aeabi_dmul>
 8007fee:	bd70      	pop	{r4, r5, r6, pc}

08007ff0 <_strtod_l>:
 8007ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	461f      	mov	r7, r3
 8007ff6:	b0a1      	sub	sp, #132	; 0x84
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4681      	mov	r9, r0
 8007ffc:	4638      	mov	r0, r7
 8007ffe:	460e      	mov	r6, r1
 8008000:	9217      	str	r2, [sp, #92]	; 0x5c
 8008002:	931c      	str	r3, [sp, #112]	; 0x70
 8008004:	f001 fff5 	bl	8009ff2 <__localeconv_l>
 8008008:	4680      	mov	r8, r0
 800800a:	6800      	ldr	r0, [r0, #0]
 800800c:	f7f8 f8f0 	bl	80001f0 <strlen>
 8008010:	f04f 0a00 	mov.w	sl, #0
 8008014:	4604      	mov	r4, r0
 8008016:	f04f 0b00 	mov.w	fp, #0
 800801a:	961b      	str	r6, [sp, #108]	; 0x6c
 800801c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800801e:	781a      	ldrb	r2, [r3, #0]
 8008020:	2a0d      	cmp	r2, #13
 8008022:	d832      	bhi.n	800808a <_strtod_l+0x9a>
 8008024:	2a09      	cmp	r2, #9
 8008026:	d236      	bcs.n	8008096 <_strtod_l+0xa6>
 8008028:	2a00      	cmp	r2, #0
 800802a:	d03e      	beq.n	80080aa <_strtod_l+0xba>
 800802c:	2300      	movs	r3, #0
 800802e:	930d      	str	r3, [sp, #52]	; 0x34
 8008030:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008032:	782b      	ldrb	r3, [r5, #0]
 8008034:	2b30      	cmp	r3, #48	; 0x30
 8008036:	f040 80ac 	bne.w	8008192 <_strtod_l+0x1a2>
 800803a:	786b      	ldrb	r3, [r5, #1]
 800803c:	2b58      	cmp	r3, #88	; 0x58
 800803e:	d001      	beq.n	8008044 <_strtod_l+0x54>
 8008040:	2b78      	cmp	r3, #120	; 0x78
 8008042:	d167      	bne.n	8008114 <_strtod_l+0x124>
 8008044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	ab1c      	add	r3, sp, #112	; 0x70
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	9702      	str	r7, [sp, #8]
 800804e:	ab1d      	add	r3, sp, #116	; 0x74
 8008050:	4a88      	ldr	r2, [pc, #544]	; (8008274 <_strtod_l+0x284>)
 8008052:	a91b      	add	r1, sp, #108	; 0x6c
 8008054:	4648      	mov	r0, r9
 8008056:	f001 fcf2 	bl	8009a3e <__gethex>
 800805a:	f010 0407 	ands.w	r4, r0, #7
 800805e:	4606      	mov	r6, r0
 8008060:	d005      	beq.n	800806e <_strtod_l+0x7e>
 8008062:	2c06      	cmp	r4, #6
 8008064:	d12b      	bne.n	80080be <_strtod_l+0xce>
 8008066:	3501      	adds	r5, #1
 8008068:	2300      	movs	r3, #0
 800806a:	951b      	str	r5, [sp, #108]	; 0x6c
 800806c:	930d      	str	r3, [sp, #52]	; 0x34
 800806e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008070:	2b00      	cmp	r3, #0
 8008072:	f040 859a 	bne.w	8008baa <_strtod_l+0xbba>
 8008076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008078:	b1e3      	cbz	r3, 80080b4 <_strtod_l+0xc4>
 800807a:	4652      	mov	r2, sl
 800807c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008080:	ec43 2b10 	vmov	d0, r2, r3
 8008084:	b021      	add	sp, #132	; 0x84
 8008086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808a:	2a2b      	cmp	r2, #43	; 0x2b
 800808c:	d015      	beq.n	80080ba <_strtod_l+0xca>
 800808e:	2a2d      	cmp	r2, #45	; 0x2d
 8008090:	d004      	beq.n	800809c <_strtod_l+0xac>
 8008092:	2a20      	cmp	r2, #32
 8008094:	d1ca      	bne.n	800802c <_strtod_l+0x3c>
 8008096:	3301      	adds	r3, #1
 8008098:	931b      	str	r3, [sp, #108]	; 0x6c
 800809a:	e7bf      	b.n	800801c <_strtod_l+0x2c>
 800809c:	2201      	movs	r2, #1
 800809e:	920d      	str	r2, [sp, #52]	; 0x34
 80080a0:	1c5a      	adds	r2, r3, #1
 80080a2:	921b      	str	r2, [sp, #108]	; 0x6c
 80080a4:	785b      	ldrb	r3, [r3, #1]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1c2      	bne.n	8008030 <_strtod_l+0x40>
 80080aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080ac:	961b      	str	r6, [sp, #108]	; 0x6c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f040 8579 	bne.w	8008ba6 <_strtod_l+0xbb6>
 80080b4:	4652      	mov	r2, sl
 80080b6:	465b      	mov	r3, fp
 80080b8:	e7e2      	b.n	8008080 <_strtod_l+0x90>
 80080ba:	2200      	movs	r2, #0
 80080bc:	e7ef      	b.n	800809e <_strtod_l+0xae>
 80080be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80080c0:	b13a      	cbz	r2, 80080d2 <_strtod_l+0xe2>
 80080c2:	2135      	movs	r1, #53	; 0x35
 80080c4:	a81e      	add	r0, sp, #120	; 0x78
 80080c6:	f002 fb8d 	bl	800a7e4 <__copybits>
 80080ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 80080cc:	4648      	mov	r0, r9
 80080ce:	f001 fffa 	bl	800a0c6 <_Bfree>
 80080d2:	3c01      	subs	r4, #1
 80080d4:	2c04      	cmp	r4, #4
 80080d6:	d806      	bhi.n	80080e6 <_strtod_l+0xf6>
 80080d8:	e8df f004 	tbb	[pc, r4]
 80080dc:	1714030a 	.word	0x1714030a
 80080e0:	0a          	.byte	0x0a
 80080e1:	00          	.byte	0x00
 80080e2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80080e6:	0730      	lsls	r0, r6, #28
 80080e8:	d5c1      	bpl.n	800806e <_strtod_l+0x7e>
 80080ea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80080ee:	e7be      	b.n	800806e <_strtod_l+0x7e>
 80080f0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80080f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80080f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80080fa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80080fe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008102:	e7f0      	b.n	80080e6 <_strtod_l+0xf6>
 8008104:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008278 <_strtod_l+0x288>
 8008108:	e7ed      	b.n	80080e6 <_strtod_l+0xf6>
 800810a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800810e:	f04f 3aff 	mov.w	sl, #4294967295
 8008112:	e7e8      	b.n	80080e6 <_strtod_l+0xf6>
 8008114:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	921b      	str	r2, [sp, #108]	; 0x6c
 800811a:	785b      	ldrb	r3, [r3, #1]
 800811c:	2b30      	cmp	r3, #48	; 0x30
 800811e:	d0f9      	beq.n	8008114 <_strtod_l+0x124>
 8008120:	2b00      	cmp	r3, #0
 8008122:	d0a4      	beq.n	800806e <_strtod_l+0x7e>
 8008124:	2301      	movs	r3, #1
 8008126:	2500      	movs	r5, #0
 8008128:	9306      	str	r3, [sp, #24]
 800812a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800812c:	9308      	str	r3, [sp, #32]
 800812e:	9507      	str	r5, [sp, #28]
 8008130:	9505      	str	r5, [sp, #20]
 8008132:	220a      	movs	r2, #10
 8008134:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008136:	7807      	ldrb	r7, [r0, #0]
 8008138:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800813c:	b2d9      	uxtb	r1, r3
 800813e:	2909      	cmp	r1, #9
 8008140:	d929      	bls.n	8008196 <_strtod_l+0x1a6>
 8008142:	4622      	mov	r2, r4
 8008144:	f8d8 1000 	ldr.w	r1, [r8]
 8008148:	f002 fda0 	bl	800ac8c <strncmp>
 800814c:	2800      	cmp	r0, #0
 800814e:	d031      	beq.n	80081b4 <_strtod_l+0x1c4>
 8008150:	2000      	movs	r0, #0
 8008152:	9c05      	ldr	r4, [sp, #20]
 8008154:	9004      	str	r0, [sp, #16]
 8008156:	463b      	mov	r3, r7
 8008158:	4602      	mov	r2, r0
 800815a:	2b65      	cmp	r3, #101	; 0x65
 800815c:	d001      	beq.n	8008162 <_strtod_l+0x172>
 800815e:	2b45      	cmp	r3, #69	; 0x45
 8008160:	d114      	bne.n	800818c <_strtod_l+0x19c>
 8008162:	b924      	cbnz	r4, 800816e <_strtod_l+0x17e>
 8008164:	b910      	cbnz	r0, 800816c <_strtod_l+0x17c>
 8008166:	9b06      	ldr	r3, [sp, #24]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d09e      	beq.n	80080aa <_strtod_l+0xba>
 800816c:	2400      	movs	r4, #0
 800816e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008170:	1c73      	adds	r3, r6, #1
 8008172:	931b      	str	r3, [sp, #108]	; 0x6c
 8008174:	7873      	ldrb	r3, [r6, #1]
 8008176:	2b2b      	cmp	r3, #43	; 0x2b
 8008178:	d078      	beq.n	800826c <_strtod_l+0x27c>
 800817a:	2b2d      	cmp	r3, #45	; 0x2d
 800817c:	d070      	beq.n	8008260 <_strtod_l+0x270>
 800817e:	f04f 0c00 	mov.w	ip, #0
 8008182:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008186:	2f09      	cmp	r7, #9
 8008188:	d97c      	bls.n	8008284 <_strtod_l+0x294>
 800818a:	961b      	str	r6, [sp, #108]	; 0x6c
 800818c:	f04f 0e00 	mov.w	lr, #0
 8008190:	e09a      	b.n	80082c8 <_strtod_l+0x2d8>
 8008192:	2300      	movs	r3, #0
 8008194:	e7c7      	b.n	8008126 <_strtod_l+0x136>
 8008196:	9905      	ldr	r1, [sp, #20]
 8008198:	2908      	cmp	r1, #8
 800819a:	bfdd      	ittte	le
 800819c:	9907      	ldrle	r1, [sp, #28]
 800819e:	fb02 3301 	mlale	r3, r2, r1, r3
 80081a2:	9307      	strle	r3, [sp, #28]
 80081a4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80081a8:	9b05      	ldr	r3, [sp, #20]
 80081aa:	3001      	adds	r0, #1
 80081ac:	3301      	adds	r3, #1
 80081ae:	9305      	str	r3, [sp, #20]
 80081b0:	901b      	str	r0, [sp, #108]	; 0x6c
 80081b2:	e7bf      	b.n	8008134 <_strtod_l+0x144>
 80081b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081b6:	191a      	adds	r2, r3, r4
 80081b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80081ba:	9a05      	ldr	r2, [sp, #20]
 80081bc:	5d1b      	ldrb	r3, [r3, r4]
 80081be:	2a00      	cmp	r2, #0
 80081c0:	d037      	beq.n	8008232 <_strtod_l+0x242>
 80081c2:	9c05      	ldr	r4, [sp, #20]
 80081c4:	4602      	mov	r2, r0
 80081c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80081ca:	2909      	cmp	r1, #9
 80081cc:	d913      	bls.n	80081f6 <_strtod_l+0x206>
 80081ce:	2101      	movs	r1, #1
 80081d0:	9104      	str	r1, [sp, #16]
 80081d2:	e7c2      	b.n	800815a <_strtod_l+0x16a>
 80081d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80081da:	785b      	ldrb	r3, [r3, #1]
 80081dc:	3001      	adds	r0, #1
 80081de:	2b30      	cmp	r3, #48	; 0x30
 80081e0:	d0f8      	beq.n	80081d4 <_strtod_l+0x1e4>
 80081e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80081e6:	2a08      	cmp	r2, #8
 80081e8:	f200 84e4 	bhi.w	8008bb4 <_strtod_l+0xbc4>
 80081ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80081ee:	9208      	str	r2, [sp, #32]
 80081f0:	4602      	mov	r2, r0
 80081f2:	2000      	movs	r0, #0
 80081f4:	4604      	mov	r4, r0
 80081f6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80081fa:	f100 0101 	add.w	r1, r0, #1
 80081fe:	d012      	beq.n	8008226 <_strtod_l+0x236>
 8008200:	440a      	add	r2, r1
 8008202:	eb00 0c04 	add.w	ip, r0, r4
 8008206:	4621      	mov	r1, r4
 8008208:	270a      	movs	r7, #10
 800820a:	458c      	cmp	ip, r1
 800820c:	d113      	bne.n	8008236 <_strtod_l+0x246>
 800820e:	1821      	adds	r1, r4, r0
 8008210:	2908      	cmp	r1, #8
 8008212:	f104 0401 	add.w	r4, r4, #1
 8008216:	4404      	add	r4, r0
 8008218:	dc19      	bgt.n	800824e <_strtod_l+0x25e>
 800821a:	9b07      	ldr	r3, [sp, #28]
 800821c:	210a      	movs	r1, #10
 800821e:	fb01 e303 	mla	r3, r1, r3, lr
 8008222:	9307      	str	r3, [sp, #28]
 8008224:	2100      	movs	r1, #0
 8008226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008228:	1c58      	adds	r0, r3, #1
 800822a:	901b      	str	r0, [sp, #108]	; 0x6c
 800822c:	785b      	ldrb	r3, [r3, #1]
 800822e:	4608      	mov	r0, r1
 8008230:	e7c9      	b.n	80081c6 <_strtod_l+0x1d6>
 8008232:	9805      	ldr	r0, [sp, #20]
 8008234:	e7d3      	b.n	80081de <_strtod_l+0x1ee>
 8008236:	2908      	cmp	r1, #8
 8008238:	f101 0101 	add.w	r1, r1, #1
 800823c:	dc03      	bgt.n	8008246 <_strtod_l+0x256>
 800823e:	9b07      	ldr	r3, [sp, #28]
 8008240:	437b      	muls	r3, r7
 8008242:	9307      	str	r3, [sp, #28]
 8008244:	e7e1      	b.n	800820a <_strtod_l+0x21a>
 8008246:	2910      	cmp	r1, #16
 8008248:	bfd8      	it	le
 800824a:	437d      	mulle	r5, r7
 800824c:	e7dd      	b.n	800820a <_strtod_l+0x21a>
 800824e:	2c10      	cmp	r4, #16
 8008250:	bfdc      	itt	le
 8008252:	210a      	movle	r1, #10
 8008254:	fb01 e505 	mlale	r5, r1, r5, lr
 8008258:	e7e4      	b.n	8008224 <_strtod_l+0x234>
 800825a:	2301      	movs	r3, #1
 800825c:	9304      	str	r3, [sp, #16]
 800825e:	e781      	b.n	8008164 <_strtod_l+0x174>
 8008260:	f04f 0c01 	mov.w	ip, #1
 8008264:	1cb3      	adds	r3, r6, #2
 8008266:	931b      	str	r3, [sp, #108]	; 0x6c
 8008268:	78b3      	ldrb	r3, [r6, #2]
 800826a:	e78a      	b.n	8008182 <_strtod_l+0x192>
 800826c:	f04f 0c00 	mov.w	ip, #0
 8008270:	e7f8      	b.n	8008264 <_strtod_l+0x274>
 8008272:	bf00      	nop
 8008274:	0800c8f0 	.word	0x0800c8f0
 8008278:	7ff00000 	.word	0x7ff00000
 800827c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800827e:	1c5f      	adds	r7, r3, #1
 8008280:	971b      	str	r7, [sp, #108]	; 0x6c
 8008282:	785b      	ldrb	r3, [r3, #1]
 8008284:	2b30      	cmp	r3, #48	; 0x30
 8008286:	d0f9      	beq.n	800827c <_strtod_l+0x28c>
 8008288:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800828c:	2f08      	cmp	r7, #8
 800828e:	f63f af7d 	bhi.w	800818c <_strtod_l+0x19c>
 8008292:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008296:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008298:	930a      	str	r3, [sp, #40]	; 0x28
 800829a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800829c:	1c5f      	adds	r7, r3, #1
 800829e:	971b      	str	r7, [sp, #108]	; 0x6c
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80082a6:	f1b8 0f09 	cmp.w	r8, #9
 80082aa:	d937      	bls.n	800831c <_strtod_l+0x32c>
 80082ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082ae:	1a7f      	subs	r7, r7, r1
 80082b0:	2f08      	cmp	r7, #8
 80082b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80082b6:	dc37      	bgt.n	8008328 <_strtod_l+0x338>
 80082b8:	45be      	cmp	lr, r7
 80082ba:	bfa8      	it	ge
 80082bc:	46be      	movge	lr, r7
 80082be:	f1bc 0f00 	cmp.w	ip, #0
 80082c2:	d001      	beq.n	80082c8 <_strtod_l+0x2d8>
 80082c4:	f1ce 0e00 	rsb	lr, lr, #0
 80082c8:	2c00      	cmp	r4, #0
 80082ca:	d151      	bne.n	8008370 <_strtod_l+0x380>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	f47f aece 	bne.w	800806e <_strtod_l+0x7e>
 80082d2:	9a06      	ldr	r2, [sp, #24]
 80082d4:	2a00      	cmp	r2, #0
 80082d6:	f47f aeca 	bne.w	800806e <_strtod_l+0x7e>
 80082da:	9a04      	ldr	r2, [sp, #16]
 80082dc:	2a00      	cmp	r2, #0
 80082de:	f47f aee4 	bne.w	80080aa <_strtod_l+0xba>
 80082e2:	2b4e      	cmp	r3, #78	; 0x4e
 80082e4:	d027      	beq.n	8008336 <_strtod_l+0x346>
 80082e6:	dc21      	bgt.n	800832c <_strtod_l+0x33c>
 80082e8:	2b49      	cmp	r3, #73	; 0x49
 80082ea:	f47f aede 	bne.w	80080aa <_strtod_l+0xba>
 80082ee:	49a0      	ldr	r1, [pc, #640]	; (8008570 <_strtod_l+0x580>)
 80082f0:	a81b      	add	r0, sp, #108	; 0x6c
 80082f2:	f001 fdd7 	bl	8009ea4 <__match>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	f43f aed7 	beq.w	80080aa <_strtod_l+0xba>
 80082fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082fe:	499d      	ldr	r1, [pc, #628]	; (8008574 <_strtod_l+0x584>)
 8008300:	3b01      	subs	r3, #1
 8008302:	a81b      	add	r0, sp, #108	; 0x6c
 8008304:	931b      	str	r3, [sp, #108]	; 0x6c
 8008306:	f001 fdcd 	bl	8009ea4 <__match>
 800830a:	b910      	cbnz	r0, 8008312 <_strtod_l+0x322>
 800830c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800830e:	3301      	adds	r3, #1
 8008310:	931b      	str	r3, [sp, #108]	; 0x6c
 8008312:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008588 <_strtod_l+0x598>
 8008316:	f04f 0a00 	mov.w	sl, #0
 800831a:	e6a8      	b.n	800806e <_strtod_l+0x7e>
 800831c:	210a      	movs	r1, #10
 800831e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008322:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008326:	e7b8      	b.n	800829a <_strtod_l+0x2aa>
 8008328:	46be      	mov	lr, r7
 800832a:	e7c8      	b.n	80082be <_strtod_l+0x2ce>
 800832c:	2b69      	cmp	r3, #105	; 0x69
 800832e:	d0de      	beq.n	80082ee <_strtod_l+0x2fe>
 8008330:	2b6e      	cmp	r3, #110	; 0x6e
 8008332:	f47f aeba 	bne.w	80080aa <_strtod_l+0xba>
 8008336:	4990      	ldr	r1, [pc, #576]	; (8008578 <_strtod_l+0x588>)
 8008338:	a81b      	add	r0, sp, #108	; 0x6c
 800833a:	f001 fdb3 	bl	8009ea4 <__match>
 800833e:	2800      	cmp	r0, #0
 8008340:	f43f aeb3 	beq.w	80080aa <_strtod_l+0xba>
 8008344:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b28      	cmp	r3, #40	; 0x28
 800834a:	d10e      	bne.n	800836a <_strtod_l+0x37a>
 800834c:	aa1e      	add	r2, sp, #120	; 0x78
 800834e:	498b      	ldr	r1, [pc, #556]	; (800857c <_strtod_l+0x58c>)
 8008350:	a81b      	add	r0, sp, #108	; 0x6c
 8008352:	f001 fdbb 	bl	8009ecc <__hexnan>
 8008356:	2805      	cmp	r0, #5
 8008358:	d107      	bne.n	800836a <_strtod_l+0x37a>
 800835a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800835c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008360:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008364:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008368:	e681      	b.n	800806e <_strtod_l+0x7e>
 800836a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008590 <_strtod_l+0x5a0>
 800836e:	e7d2      	b.n	8008316 <_strtod_l+0x326>
 8008370:	ebae 0302 	sub.w	r3, lr, r2
 8008374:	9306      	str	r3, [sp, #24]
 8008376:	9b05      	ldr	r3, [sp, #20]
 8008378:	9807      	ldr	r0, [sp, #28]
 800837a:	2b00      	cmp	r3, #0
 800837c:	bf08      	it	eq
 800837e:	4623      	moveq	r3, r4
 8008380:	2c10      	cmp	r4, #16
 8008382:	9305      	str	r3, [sp, #20]
 8008384:	46a0      	mov	r8, r4
 8008386:	bfa8      	it	ge
 8008388:	f04f 0810 	movge.w	r8, #16
 800838c:	f7f8 f8ca 	bl	8000524 <__aeabi_ui2d>
 8008390:	2c09      	cmp	r4, #9
 8008392:	4682      	mov	sl, r0
 8008394:	468b      	mov	fp, r1
 8008396:	dc13      	bgt.n	80083c0 <_strtod_l+0x3d0>
 8008398:	9b06      	ldr	r3, [sp, #24]
 800839a:	2b00      	cmp	r3, #0
 800839c:	f43f ae67 	beq.w	800806e <_strtod_l+0x7e>
 80083a0:	9b06      	ldr	r3, [sp, #24]
 80083a2:	dd7a      	ble.n	800849a <_strtod_l+0x4aa>
 80083a4:	2b16      	cmp	r3, #22
 80083a6:	dc61      	bgt.n	800846c <_strtod_l+0x47c>
 80083a8:	4a75      	ldr	r2, [pc, #468]	; (8008580 <_strtod_l+0x590>)
 80083aa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80083ae:	e9de 0100 	ldrd	r0, r1, [lr]
 80083b2:	4652      	mov	r2, sl
 80083b4:	465b      	mov	r3, fp
 80083b6:	f7f8 f92f 	bl	8000618 <__aeabi_dmul>
 80083ba:	4682      	mov	sl, r0
 80083bc:	468b      	mov	fp, r1
 80083be:	e656      	b.n	800806e <_strtod_l+0x7e>
 80083c0:	4b6f      	ldr	r3, [pc, #444]	; (8008580 <_strtod_l+0x590>)
 80083c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80083c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80083ca:	f7f8 f925 	bl	8000618 <__aeabi_dmul>
 80083ce:	4606      	mov	r6, r0
 80083d0:	4628      	mov	r0, r5
 80083d2:	460f      	mov	r7, r1
 80083d4:	f7f8 f8a6 	bl	8000524 <__aeabi_ui2d>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4630      	mov	r0, r6
 80083de:	4639      	mov	r1, r7
 80083e0:	f7f7 ff64 	bl	80002ac <__adddf3>
 80083e4:	2c0f      	cmp	r4, #15
 80083e6:	4682      	mov	sl, r0
 80083e8:	468b      	mov	fp, r1
 80083ea:	ddd5      	ble.n	8008398 <_strtod_l+0x3a8>
 80083ec:	9b06      	ldr	r3, [sp, #24]
 80083ee:	eba4 0808 	sub.w	r8, r4, r8
 80083f2:	4498      	add	r8, r3
 80083f4:	f1b8 0f00 	cmp.w	r8, #0
 80083f8:	f340 8096 	ble.w	8008528 <_strtod_l+0x538>
 80083fc:	f018 030f 	ands.w	r3, r8, #15
 8008400:	d00a      	beq.n	8008418 <_strtod_l+0x428>
 8008402:	495f      	ldr	r1, [pc, #380]	; (8008580 <_strtod_l+0x590>)
 8008404:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008408:	4652      	mov	r2, sl
 800840a:	465b      	mov	r3, fp
 800840c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008410:	f7f8 f902 	bl	8000618 <__aeabi_dmul>
 8008414:	4682      	mov	sl, r0
 8008416:	468b      	mov	fp, r1
 8008418:	f038 080f 	bics.w	r8, r8, #15
 800841c:	d073      	beq.n	8008506 <_strtod_l+0x516>
 800841e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008422:	dd47      	ble.n	80084b4 <_strtod_l+0x4c4>
 8008424:	2400      	movs	r4, #0
 8008426:	46a0      	mov	r8, r4
 8008428:	9407      	str	r4, [sp, #28]
 800842a:	9405      	str	r4, [sp, #20]
 800842c:	2322      	movs	r3, #34	; 0x22
 800842e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008588 <_strtod_l+0x598>
 8008432:	f8c9 3000 	str.w	r3, [r9]
 8008436:	f04f 0a00 	mov.w	sl, #0
 800843a:	9b07      	ldr	r3, [sp, #28]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f43f ae16 	beq.w	800806e <_strtod_l+0x7e>
 8008442:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008444:	4648      	mov	r0, r9
 8008446:	f001 fe3e 	bl	800a0c6 <_Bfree>
 800844a:	9905      	ldr	r1, [sp, #20]
 800844c:	4648      	mov	r0, r9
 800844e:	f001 fe3a 	bl	800a0c6 <_Bfree>
 8008452:	4641      	mov	r1, r8
 8008454:	4648      	mov	r0, r9
 8008456:	f001 fe36 	bl	800a0c6 <_Bfree>
 800845a:	9907      	ldr	r1, [sp, #28]
 800845c:	4648      	mov	r0, r9
 800845e:	f001 fe32 	bl	800a0c6 <_Bfree>
 8008462:	4621      	mov	r1, r4
 8008464:	4648      	mov	r0, r9
 8008466:	f001 fe2e 	bl	800a0c6 <_Bfree>
 800846a:	e600      	b.n	800806e <_strtod_l+0x7e>
 800846c:	9a06      	ldr	r2, [sp, #24]
 800846e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008472:	4293      	cmp	r3, r2
 8008474:	dbba      	blt.n	80083ec <_strtod_l+0x3fc>
 8008476:	4d42      	ldr	r5, [pc, #264]	; (8008580 <_strtod_l+0x590>)
 8008478:	f1c4 040f 	rsb	r4, r4, #15
 800847c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008480:	4652      	mov	r2, sl
 8008482:	465b      	mov	r3, fp
 8008484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008488:	f7f8 f8c6 	bl	8000618 <__aeabi_dmul>
 800848c:	9b06      	ldr	r3, [sp, #24]
 800848e:	1b1c      	subs	r4, r3, r4
 8008490:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008494:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008498:	e78d      	b.n	80083b6 <_strtod_l+0x3c6>
 800849a:	f113 0f16 	cmn.w	r3, #22
 800849e:	dba5      	blt.n	80083ec <_strtod_l+0x3fc>
 80084a0:	4a37      	ldr	r2, [pc, #220]	; (8008580 <_strtod_l+0x590>)
 80084a2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80084a6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80084aa:	4650      	mov	r0, sl
 80084ac:	4659      	mov	r1, fp
 80084ae:	f7f8 f9dd 	bl	800086c <__aeabi_ddiv>
 80084b2:	e782      	b.n	80083ba <_strtod_l+0x3ca>
 80084b4:	2300      	movs	r3, #0
 80084b6:	4e33      	ldr	r6, [pc, #204]	; (8008584 <_strtod_l+0x594>)
 80084b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80084bc:	4650      	mov	r0, sl
 80084be:	4659      	mov	r1, fp
 80084c0:	461d      	mov	r5, r3
 80084c2:	f1b8 0f01 	cmp.w	r8, #1
 80084c6:	dc21      	bgt.n	800850c <_strtod_l+0x51c>
 80084c8:	b10b      	cbz	r3, 80084ce <_strtod_l+0x4de>
 80084ca:	4682      	mov	sl, r0
 80084cc:	468b      	mov	fp, r1
 80084ce:	4b2d      	ldr	r3, [pc, #180]	; (8008584 <_strtod_l+0x594>)
 80084d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80084d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80084d8:	4652      	mov	r2, sl
 80084da:	465b      	mov	r3, fp
 80084dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80084e0:	f7f8 f89a 	bl	8000618 <__aeabi_dmul>
 80084e4:	4b28      	ldr	r3, [pc, #160]	; (8008588 <_strtod_l+0x598>)
 80084e6:	460a      	mov	r2, r1
 80084e8:	400b      	ands	r3, r1
 80084ea:	4928      	ldr	r1, [pc, #160]	; (800858c <_strtod_l+0x59c>)
 80084ec:	428b      	cmp	r3, r1
 80084ee:	4682      	mov	sl, r0
 80084f0:	d898      	bhi.n	8008424 <_strtod_l+0x434>
 80084f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80084f6:	428b      	cmp	r3, r1
 80084f8:	bf86      	itte	hi
 80084fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008594 <_strtod_l+0x5a4>
 80084fe:	f04f 3aff 	movhi.w	sl, #4294967295
 8008502:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008506:	2300      	movs	r3, #0
 8008508:	9304      	str	r3, [sp, #16]
 800850a:	e077      	b.n	80085fc <_strtod_l+0x60c>
 800850c:	f018 0f01 	tst.w	r8, #1
 8008510:	d006      	beq.n	8008520 <_strtod_l+0x530>
 8008512:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	f7f8 f87d 	bl	8000618 <__aeabi_dmul>
 800851e:	2301      	movs	r3, #1
 8008520:	3501      	adds	r5, #1
 8008522:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008526:	e7cc      	b.n	80084c2 <_strtod_l+0x4d2>
 8008528:	d0ed      	beq.n	8008506 <_strtod_l+0x516>
 800852a:	f1c8 0800 	rsb	r8, r8, #0
 800852e:	f018 020f 	ands.w	r2, r8, #15
 8008532:	d00a      	beq.n	800854a <_strtod_l+0x55a>
 8008534:	4b12      	ldr	r3, [pc, #72]	; (8008580 <_strtod_l+0x590>)
 8008536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800853a:	4650      	mov	r0, sl
 800853c:	4659      	mov	r1, fp
 800853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008542:	f7f8 f993 	bl	800086c <__aeabi_ddiv>
 8008546:	4682      	mov	sl, r0
 8008548:	468b      	mov	fp, r1
 800854a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800854e:	d0da      	beq.n	8008506 <_strtod_l+0x516>
 8008550:	f1b8 0f1f 	cmp.w	r8, #31
 8008554:	dd20      	ble.n	8008598 <_strtod_l+0x5a8>
 8008556:	2400      	movs	r4, #0
 8008558:	46a0      	mov	r8, r4
 800855a:	9407      	str	r4, [sp, #28]
 800855c:	9405      	str	r4, [sp, #20]
 800855e:	2322      	movs	r3, #34	; 0x22
 8008560:	f04f 0a00 	mov.w	sl, #0
 8008564:	f04f 0b00 	mov.w	fp, #0
 8008568:	f8c9 3000 	str.w	r3, [r9]
 800856c:	e765      	b.n	800843a <_strtod_l+0x44a>
 800856e:	bf00      	nop
 8008570:	0800c8b9 	.word	0x0800c8b9
 8008574:	0800c943 	.word	0x0800c943
 8008578:	0800c8c1 	.word	0x0800c8c1
 800857c:	0800c904 	.word	0x0800c904
 8008580:	0800c980 	.word	0x0800c980
 8008584:	0800c958 	.word	0x0800c958
 8008588:	7ff00000 	.word	0x7ff00000
 800858c:	7ca00000 	.word	0x7ca00000
 8008590:	fff80000 	.word	0xfff80000
 8008594:	7fefffff 	.word	0x7fefffff
 8008598:	f018 0310 	ands.w	r3, r8, #16
 800859c:	bf18      	it	ne
 800859e:	236a      	movne	r3, #106	; 0x6a
 80085a0:	4da0      	ldr	r5, [pc, #640]	; (8008824 <_strtod_l+0x834>)
 80085a2:	9304      	str	r3, [sp, #16]
 80085a4:	4650      	mov	r0, sl
 80085a6:	4659      	mov	r1, fp
 80085a8:	2300      	movs	r3, #0
 80085aa:	f1b8 0f00 	cmp.w	r8, #0
 80085ae:	f300 810a 	bgt.w	80087c6 <_strtod_l+0x7d6>
 80085b2:	b10b      	cbz	r3, 80085b8 <_strtod_l+0x5c8>
 80085b4:	4682      	mov	sl, r0
 80085b6:	468b      	mov	fp, r1
 80085b8:	9b04      	ldr	r3, [sp, #16]
 80085ba:	b1bb      	cbz	r3, 80085ec <_strtod_l+0x5fc>
 80085bc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80085c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	4659      	mov	r1, fp
 80085c8:	dd10      	ble.n	80085ec <_strtod_l+0x5fc>
 80085ca:	2b1f      	cmp	r3, #31
 80085cc:	f340 8107 	ble.w	80087de <_strtod_l+0x7ee>
 80085d0:	2b34      	cmp	r3, #52	; 0x34
 80085d2:	bfde      	ittt	le
 80085d4:	3b20      	suble	r3, #32
 80085d6:	f04f 32ff 	movle.w	r2, #4294967295
 80085da:	fa02 f303 	lslle.w	r3, r2, r3
 80085de:	f04f 0a00 	mov.w	sl, #0
 80085e2:	bfcc      	ite	gt
 80085e4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80085e8:	ea03 0b01 	andle.w	fp, r3, r1
 80085ec:	2200      	movs	r2, #0
 80085ee:	2300      	movs	r3, #0
 80085f0:	4650      	mov	r0, sl
 80085f2:	4659      	mov	r1, fp
 80085f4:	f7f8 fa78 	bl	8000ae8 <__aeabi_dcmpeq>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d1ac      	bne.n	8008556 <_strtod_l+0x566>
 80085fc:	9b07      	ldr	r3, [sp, #28]
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	9a05      	ldr	r2, [sp, #20]
 8008602:	9908      	ldr	r1, [sp, #32]
 8008604:	4623      	mov	r3, r4
 8008606:	4648      	mov	r0, r9
 8008608:	f001 fdaf 	bl	800a16a <__s2b>
 800860c:	9007      	str	r0, [sp, #28]
 800860e:	2800      	cmp	r0, #0
 8008610:	f43f af08 	beq.w	8008424 <_strtod_l+0x434>
 8008614:	9a06      	ldr	r2, [sp, #24]
 8008616:	9b06      	ldr	r3, [sp, #24]
 8008618:	2a00      	cmp	r2, #0
 800861a:	f1c3 0300 	rsb	r3, r3, #0
 800861e:	bfa8      	it	ge
 8008620:	2300      	movge	r3, #0
 8008622:	930e      	str	r3, [sp, #56]	; 0x38
 8008624:	2400      	movs	r4, #0
 8008626:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800862a:	9316      	str	r3, [sp, #88]	; 0x58
 800862c:	46a0      	mov	r8, r4
 800862e:	9b07      	ldr	r3, [sp, #28]
 8008630:	4648      	mov	r0, r9
 8008632:	6859      	ldr	r1, [r3, #4]
 8008634:	f001 fd13 	bl	800a05e <_Balloc>
 8008638:	9005      	str	r0, [sp, #20]
 800863a:	2800      	cmp	r0, #0
 800863c:	f43f aef6 	beq.w	800842c <_strtod_l+0x43c>
 8008640:	9b07      	ldr	r3, [sp, #28]
 8008642:	691a      	ldr	r2, [r3, #16]
 8008644:	3202      	adds	r2, #2
 8008646:	f103 010c 	add.w	r1, r3, #12
 800864a:	0092      	lsls	r2, r2, #2
 800864c:	300c      	adds	r0, #12
 800864e:	f001 fcfb 	bl	800a048 <memcpy>
 8008652:	aa1e      	add	r2, sp, #120	; 0x78
 8008654:	a91d      	add	r1, sp, #116	; 0x74
 8008656:	ec4b ab10 	vmov	d0, sl, fp
 800865a:	4648      	mov	r0, r9
 800865c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008660:	f002 f83e 	bl	800a6e0 <__d2b>
 8008664:	901c      	str	r0, [sp, #112]	; 0x70
 8008666:	2800      	cmp	r0, #0
 8008668:	f43f aee0 	beq.w	800842c <_strtod_l+0x43c>
 800866c:	2101      	movs	r1, #1
 800866e:	4648      	mov	r0, r9
 8008670:	f001 fe07 	bl	800a282 <__i2b>
 8008674:	4680      	mov	r8, r0
 8008676:	2800      	cmp	r0, #0
 8008678:	f43f aed8 	beq.w	800842c <_strtod_l+0x43c>
 800867c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800867e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008680:	2e00      	cmp	r6, #0
 8008682:	bfab      	itete	ge
 8008684:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008686:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008688:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800868a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800868c:	bfac      	ite	ge
 800868e:	18f7      	addge	r7, r6, r3
 8008690:	1b9d      	sublt	r5, r3, r6
 8008692:	9b04      	ldr	r3, [sp, #16]
 8008694:	1af6      	subs	r6, r6, r3
 8008696:	4416      	add	r6, r2
 8008698:	4b63      	ldr	r3, [pc, #396]	; (8008828 <_strtod_l+0x838>)
 800869a:	3e01      	subs	r6, #1
 800869c:	429e      	cmp	r6, r3
 800869e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80086a2:	f280 80af 	bge.w	8008804 <_strtod_l+0x814>
 80086a6:	1b9b      	subs	r3, r3, r6
 80086a8:	2b1f      	cmp	r3, #31
 80086aa:	eba2 0203 	sub.w	r2, r2, r3
 80086ae:	f04f 0101 	mov.w	r1, #1
 80086b2:	f300 809b 	bgt.w	80087ec <_strtod_l+0x7fc>
 80086b6:	fa01 f303 	lsl.w	r3, r1, r3
 80086ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80086bc:	2300      	movs	r3, #0
 80086be:	930a      	str	r3, [sp, #40]	; 0x28
 80086c0:	18be      	adds	r6, r7, r2
 80086c2:	9b04      	ldr	r3, [sp, #16]
 80086c4:	42b7      	cmp	r7, r6
 80086c6:	4415      	add	r5, r2
 80086c8:	441d      	add	r5, r3
 80086ca:	463b      	mov	r3, r7
 80086cc:	bfa8      	it	ge
 80086ce:	4633      	movge	r3, r6
 80086d0:	42ab      	cmp	r3, r5
 80086d2:	bfa8      	it	ge
 80086d4:	462b      	movge	r3, r5
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bfc2      	ittt	gt
 80086da:	1af6      	subgt	r6, r6, r3
 80086dc:	1aed      	subgt	r5, r5, r3
 80086de:	1aff      	subgt	r7, r7, r3
 80086e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086e2:	b1bb      	cbz	r3, 8008714 <_strtod_l+0x724>
 80086e4:	4641      	mov	r1, r8
 80086e6:	461a      	mov	r2, r3
 80086e8:	4648      	mov	r0, r9
 80086ea:	f001 fe69 	bl	800a3c0 <__pow5mult>
 80086ee:	4680      	mov	r8, r0
 80086f0:	2800      	cmp	r0, #0
 80086f2:	f43f ae9b 	beq.w	800842c <_strtod_l+0x43c>
 80086f6:	4601      	mov	r1, r0
 80086f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80086fa:	4648      	mov	r0, r9
 80086fc:	f001 fdca 	bl	800a294 <__multiply>
 8008700:	900c      	str	r0, [sp, #48]	; 0x30
 8008702:	2800      	cmp	r0, #0
 8008704:	f43f ae92 	beq.w	800842c <_strtod_l+0x43c>
 8008708:	991c      	ldr	r1, [sp, #112]	; 0x70
 800870a:	4648      	mov	r0, r9
 800870c:	f001 fcdb 	bl	800a0c6 <_Bfree>
 8008710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008712:	931c      	str	r3, [sp, #112]	; 0x70
 8008714:	2e00      	cmp	r6, #0
 8008716:	dc7a      	bgt.n	800880e <_strtod_l+0x81e>
 8008718:	9b06      	ldr	r3, [sp, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	dd08      	ble.n	8008730 <_strtod_l+0x740>
 800871e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008720:	9905      	ldr	r1, [sp, #20]
 8008722:	4648      	mov	r0, r9
 8008724:	f001 fe4c 	bl	800a3c0 <__pow5mult>
 8008728:	9005      	str	r0, [sp, #20]
 800872a:	2800      	cmp	r0, #0
 800872c:	f43f ae7e 	beq.w	800842c <_strtod_l+0x43c>
 8008730:	2d00      	cmp	r5, #0
 8008732:	dd08      	ble.n	8008746 <_strtod_l+0x756>
 8008734:	462a      	mov	r2, r5
 8008736:	9905      	ldr	r1, [sp, #20]
 8008738:	4648      	mov	r0, r9
 800873a:	f001 fe8f 	bl	800a45c <__lshift>
 800873e:	9005      	str	r0, [sp, #20]
 8008740:	2800      	cmp	r0, #0
 8008742:	f43f ae73 	beq.w	800842c <_strtod_l+0x43c>
 8008746:	2f00      	cmp	r7, #0
 8008748:	dd08      	ble.n	800875c <_strtod_l+0x76c>
 800874a:	4641      	mov	r1, r8
 800874c:	463a      	mov	r2, r7
 800874e:	4648      	mov	r0, r9
 8008750:	f001 fe84 	bl	800a45c <__lshift>
 8008754:	4680      	mov	r8, r0
 8008756:	2800      	cmp	r0, #0
 8008758:	f43f ae68 	beq.w	800842c <_strtod_l+0x43c>
 800875c:	9a05      	ldr	r2, [sp, #20]
 800875e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008760:	4648      	mov	r0, r9
 8008762:	f001 fee9 	bl	800a538 <__mdiff>
 8008766:	4604      	mov	r4, r0
 8008768:	2800      	cmp	r0, #0
 800876a:	f43f ae5f 	beq.w	800842c <_strtod_l+0x43c>
 800876e:	68c3      	ldr	r3, [r0, #12]
 8008770:	930c      	str	r3, [sp, #48]	; 0x30
 8008772:	2300      	movs	r3, #0
 8008774:	60c3      	str	r3, [r0, #12]
 8008776:	4641      	mov	r1, r8
 8008778:	f001 fec4 	bl	800a504 <__mcmp>
 800877c:	2800      	cmp	r0, #0
 800877e:	da55      	bge.n	800882c <_strtod_l+0x83c>
 8008780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008782:	b9e3      	cbnz	r3, 80087be <_strtod_l+0x7ce>
 8008784:	f1ba 0f00 	cmp.w	sl, #0
 8008788:	d119      	bne.n	80087be <_strtod_l+0x7ce>
 800878a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800878e:	b9b3      	cbnz	r3, 80087be <_strtod_l+0x7ce>
 8008790:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008794:	0d1b      	lsrs	r3, r3, #20
 8008796:	051b      	lsls	r3, r3, #20
 8008798:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800879c:	d90f      	bls.n	80087be <_strtod_l+0x7ce>
 800879e:	6963      	ldr	r3, [r4, #20]
 80087a0:	b913      	cbnz	r3, 80087a8 <_strtod_l+0x7b8>
 80087a2:	6923      	ldr	r3, [r4, #16]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	dd0a      	ble.n	80087be <_strtod_l+0x7ce>
 80087a8:	4621      	mov	r1, r4
 80087aa:	2201      	movs	r2, #1
 80087ac:	4648      	mov	r0, r9
 80087ae:	f001 fe55 	bl	800a45c <__lshift>
 80087b2:	4641      	mov	r1, r8
 80087b4:	4604      	mov	r4, r0
 80087b6:	f001 fea5 	bl	800a504 <__mcmp>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	dc67      	bgt.n	800888e <_strtod_l+0x89e>
 80087be:	9b04      	ldr	r3, [sp, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d171      	bne.n	80088a8 <_strtod_l+0x8b8>
 80087c4:	e63d      	b.n	8008442 <_strtod_l+0x452>
 80087c6:	f018 0f01 	tst.w	r8, #1
 80087ca:	d004      	beq.n	80087d6 <_strtod_l+0x7e6>
 80087cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80087d0:	f7f7 ff22 	bl	8000618 <__aeabi_dmul>
 80087d4:	2301      	movs	r3, #1
 80087d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80087da:	3508      	adds	r5, #8
 80087dc:	e6e5      	b.n	80085aa <_strtod_l+0x5ba>
 80087de:	f04f 32ff 	mov.w	r2, #4294967295
 80087e2:	fa02 f303 	lsl.w	r3, r2, r3
 80087e6:	ea03 0a0a 	and.w	sl, r3, sl
 80087ea:	e6ff      	b.n	80085ec <_strtod_l+0x5fc>
 80087ec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80087f0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80087f4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80087f8:	36e2      	adds	r6, #226	; 0xe2
 80087fa:	fa01 f306 	lsl.w	r3, r1, r6
 80087fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008800:	910f      	str	r1, [sp, #60]	; 0x3c
 8008802:	e75d      	b.n	80086c0 <_strtod_l+0x6d0>
 8008804:	2300      	movs	r3, #0
 8008806:	930a      	str	r3, [sp, #40]	; 0x28
 8008808:	2301      	movs	r3, #1
 800880a:	930f      	str	r3, [sp, #60]	; 0x3c
 800880c:	e758      	b.n	80086c0 <_strtod_l+0x6d0>
 800880e:	4632      	mov	r2, r6
 8008810:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008812:	4648      	mov	r0, r9
 8008814:	f001 fe22 	bl	800a45c <__lshift>
 8008818:	901c      	str	r0, [sp, #112]	; 0x70
 800881a:	2800      	cmp	r0, #0
 800881c:	f47f af7c 	bne.w	8008718 <_strtod_l+0x728>
 8008820:	e604      	b.n	800842c <_strtod_l+0x43c>
 8008822:	bf00      	nop
 8008824:	0800c918 	.word	0x0800c918
 8008828:	fffffc02 	.word	0xfffffc02
 800882c:	465d      	mov	r5, fp
 800882e:	f040 8086 	bne.w	800893e <_strtod_l+0x94e>
 8008832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008834:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008838:	b32a      	cbz	r2, 8008886 <_strtod_l+0x896>
 800883a:	4aaf      	ldr	r2, [pc, #700]	; (8008af8 <_strtod_l+0xb08>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d153      	bne.n	80088e8 <_strtod_l+0x8f8>
 8008840:	9b04      	ldr	r3, [sp, #16]
 8008842:	4650      	mov	r0, sl
 8008844:	b1d3      	cbz	r3, 800887c <_strtod_l+0x88c>
 8008846:	4aad      	ldr	r2, [pc, #692]	; (8008afc <_strtod_l+0xb0c>)
 8008848:	402a      	ands	r2, r5
 800884a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800884e:	f04f 31ff 	mov.w	r1, #4294967295
 8008852:	d816      	bhi.n	8008882 <_strtod_l+0x892>
 8008854:	0d12      	lsrs	r2, r2, #20
 8008856:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800885a:	fa01 f303 	lsl.w	r3, r1, r3
 800885e:	4298      	cmp	r0, r3
 8008860:	d142      	bne.n	80088e8 <_strtod_l+0x8f8>
 8008862:	4ba7      	ldr	r3, [pc, #668]	; (8008b00 <_strtod_l+0xb10>)
 8008864:	429d      	cmp	r5, r3
 8008866:	d102      	bne.n	800886e <_strtod_l+0x87e>
 8008868:	3001      	adds	r0, #1
 800886a:	f43f addf 	beq.w	800842c <_strtod_l+0x43c>
 800886e:	4ba3      	ldr	r3, [pc, #652]	; (8008afc <_strtod_l+0xb0c>)
 8008870:	402b      	ands	r3, r5
 8008872:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008876:	f04f 0a00 	mov.w	sl, #0
 800887a:	e7a0      	b.n	80087be <_strtod_l+0x7ce>
 800887c:	f04f 33ff 	mov.w	r3, #4294967295
 8008880:	e7ed      	b.n	800885e <_strtod_l+0x86e>
 8008882:	460b      	mov	r3, r1
 8008884:	e7eb      	b.n	800885e <_strtod_l+0x86e>
 8008886:	bb7b      	cbnz	r3, 80088e8 <_strtod_l+0x8f8>
 8008888:	f1ba 0f00 	cmp.w	sl, #0
 800888c:	d12c      	bne.n	80088e8 <_strtod_l+0x8f8>
 800888e:	9904      	ldr	r1, [sp, #16]
 8008890:	4a9a      	ldr	r2, [pc, #616]	; (8008afc <_strtod_l+0xb0c>)
 8008892:	465b      	mov	r3, fp
 8008894:	b1f1      	cbz	r1, 80088d4 <_strtod_l+0x8e4>
 8008896:	ea02 010b 	and.w	r1, r2, fp
 800889a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800889e:	dc19      	bgt.n	80088d4 <_strtod_l+0x8e4>
 80088a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80088a4:	f77f ae5b 	ble.w	800855e <_strtod_l+0x56e>
 80088a8:	4a96      	ldr	r2, [pc, #600]	; (8008b04 <_strtod_l+0xb14>)
 80088aa:	2300      	movs	r3, #0
 80088ac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80088b0:	4650      	mov	r0, sl
 80088b2:	4659      	mov	r1, fp
 80088b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80088b8:	f7f7 feae 	bl	8000618 <__aeabi_dmul>
 80088bc:	4682      	mov	sl, r0
 80088be:	468b      	mov	fp, r1
 80088c0:	2900      	cmp	r1, #0
 80088c2:	f47f adbe 	bne.w	8008442 <_strtod_l+0x452>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	f47f adbb 	bne.w	8008442 <_strtod_l+0x452>
 80088cc:	2322      	movs	r3, #34	; 0x22
 80088ce:	f8c9 3000 	str.w	r3, [r9]
 80088d2:	e5b6      	b.n	8008442 <_strtod_l+0x452>
 80088d4:	4013      	ands	r3, r2
 80088d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80088da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80088de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80088e2:	f04f 3aff 	mov.w	sl, #4294967295
 80088e6:	e76a      	b.n	80087be <_strtod_l+0x7ce>
 80088e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ea:	b193      	cbz	r3, 8008912 <_strtod_l+0x922>
 80088ec:	422b      	tst	r3, r5
 80088ee:	f43f af66 	beq.w	80087be <_strtod_l+0x7ce>
 80088f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088f4:	9a04      	ldr	r2, [sp, #16]
 80088f6:	4650      	mov	r0, sl
 80088f8:	4659      	mov	r1, fp
 80088fa:	b173      	cbz	r3, 800891a <_strtod_l+0x92a>
 80088fc:	f7ff fb5c 	bl	8007fb8 <sulp>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008908:	f7f7 fcd0 	bl	80002ac <__adddf3>
 800890c:	4682      	mov	sl, r0
 800890e:	468b      	mov	fp, r1
 8008910:	e755      	b.n	80087be <_strtod_l+0x7ce>
 8008912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008914:	ea13 0f0a 	tst.w	r3, sl
 8008918:	e7e9      	b.n	80088ee <_strtod_l+0x8fe>
 800891a:	f7ff fb4d 	bl	8007fb8 <sulp>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008926:	f7f7 fcbf 	bl	80002a8 <__aeabi_dsub>
 800892a:	2200      	movs	r2, #0
 800892c:	2300      	movs	r3, #0
 800892e:	4682      	mov	sl, r0
 8008930:	468b      	mov	fp, r1
 8008932:	f7f8 f8d9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008936:	2800      	cmp	r0, #0
 8008938:	f47f ae11 	bne.w	800855e <_strtod_l+0x56e>
 800893c:	e73f      	b.n	80087be <_strtod_l+0x7ce>
 800893e:	4641      	mov	r1, r8
 8008940:	4620      	mov	r0, r4
 8008942:	f001 ff1c 	bl	800a77e <__ratio>
 8008946:	ec57 6b10 	vmov	r6, r7, d0
 800894a:	2200      	movs	r2, #0
 800894c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008950:	ee10 0a10 	vmov	r0, s0
 8008954:	4639      	mov	r1, r7
 8008956:	f7f8 f8db 	bl	8000b10 <__aeabi_dcmple>
 800895a:	2800      	cmp	r0, #0
 800895c:	d077      	beq.n	8008a4e <_strtod_l+0xa5e>
 800895e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008960:	2b00      	cmp	r3, #0
 8008962:	d04a      	beq.n	80089fa <_strtod_l+0xa0a>
 8008964:	4b68      	ldr	r3, [pc, #416]	; (8008b08 <_strtod_l+0xb18>)
 8008966:	2200      	movs	r2, #0
 8008968:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800896c:	4f66      	ldr	r7, [pc, #408]	; (8008b08 <_strtod_l+0xb18>)
 800896e:	2600      	movs	r6, #0
 8008970:	4b62      	ldr	r3, [pc, #392]	; (8008afc <_strtod_l+0xb0c>)
 8008972:	402b      	ands	r3, r5
 8008974:	930f      	str	r3, [sp, #60]	; 0x3c
 8008976:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008978:	4b64      	ldr	r3, [pc, #400]	; (8008b0c <_strtod_l+0xb1c>)
 800897a:	429a      	cmp	r2, r3
 800897c:	f040 80ce 	bne.w	8008b1c <_strtod_l+0xb2c>
 8008980:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008984:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008988:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800898c:	ec4b ab10 	vmov	d0, sl, fp
 8008990:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008994:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008998:	f001 fe2c 	bl	800a5f4 <__ulp>
 800899c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80089a0:	ec53 2b10 	vmov	r2, r3, d0
 80089a4:	f7f7 fe38 	bl	8000618 <__aeabi_dmul>
 80089a8:	4652      	mov	r2, sl
 80089aa:	465b      	mov	r3, fp
 80089ac:	f7f7 fc7e 	bl	80002ac <__adddf3>
 80089b0:	460b      	mov	r3, r1
 80089b2:	4952      	ldr	r1, [pc, #328]	; (8008afc <_strtod_l+0xb0c>)
 80089b4:	4a56      	ldr	r2, [pc, #344]	; (8008b10 <_strtod_l+0xb20>)
 80089b6:	4019      	ands	r1, r3
 80089b8:	4291      	cmp	r1, r2
 80089ba:	4682      	mov	sl, r0
 80089bc:	d95b      	bls.n	8008a76 <_strtod_l+0xa86>
 80089be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d103      	bne.n	80089d0 <_strtod_l+0x9e0>
 80089c8:	9b08      	ldr	r3, [sp, #32]
 80089ca:	3301      	adds	r3, #1
 80089cc:	f43f ad2e 	beq.w	800842c <_strtod_l+0x43c>
 80089d0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008b00 <_strtod_l+0xb10>
 80089d4:	f04f 3aff 	mov.w	sl, #4294967295
 80089d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80089da:	4648      	mov	r0, r9
 80089dc:	f001 fb73 	bl	800a0c6 <_Bfree>
 80089e0:	9905      	ldr	r1, [sp, #20]
 80089e2:	4648      	mov	r0, r9
 80089e4:	f001 fb6f 	bl	800a0c6 <_Bfree>
 80089e8:	4641      	mov	r1, r8
 80089ea:	4648      	mov	r0, r9
 80089ec:	f001 fb6b 	bl	800a0c6 <_Bfree>
 80089f0:	4621      	mov	r1, r4
 80089f2:	4648      	mov	r0, r9
 80089f4:	f001 fb67 	bl	800a0c6 <_Bfree>
 80089f8:	e619      	b.n	800862e <_strtod_l+0x63e>
 80089fa:	f1ba 0f00 	cmp.w	sl, #0
 80089fe:	d11a      	bne.n	8008a36 <_strtod_l+0xa46>
 8008a00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a04:	b9eb      	cbnz	r3, 8008a42 <_strtod_l+0xa52>
 8008a06:	2200      	movs	r2, #0
 8008a08:	4b3f      	ldr	r3, [pc, #252]	; (8008b08 <_strtod_l+0xb18>)
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	f7f8 f875 	bl	8000afc <__aeabi_dcmplt>
 8008a12:	b9c8      	cbnz	r0, 8008a48 <_strtod_l+0xa58>
 8008a14:	4630      	mov	r0, r6
 8008a16:	4639      	mov	r1, r7
 8008a18:	2200      	movs	r2, #0
 8008a1a:	4b3e      	ldr	r3, [pc, #248]	; (8008b14 <_strtod_l+0xb24>)
 8008a1c:	f7f7 fdfc 	bl	8000618 <__aeabi_dmul>
 8008a20:	4606      	mov	r6, r0
 8008a22:	460f      	mov	r7, r1
 8008a24:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008a28:	9618      	str	r6, [sp, #96]	; 0x60
 8008a2a:	9319      	str	r3, [sp, #100]	; 0x64
 8008a2c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008a30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a34:	e79c      	b.n	8008970 <_strtod_l+0x980>
 8008a36:	f1ba 0f01 	cmp.w	sl, #1
 8008a3a:	d102      	bne.n	8008a42 <_strtod_l+0xa52>
 8008a3c:	2d00      	cmp	r5, #0
 8008a3e:	f43f ad8e 	beq.w	800855e <_strtod_l+0x56e>
 8008a42:	2200      	movs	r2, #0
 8008a44:	4b34      	ldr	r3, [pc, #208]	; (8008b18 <_strtod_l+0xb28>)
 8008a46:	e78f      	b.n	8008968 <_strtod_l+0x978>
 8008a48:	2600      	movs	r6, #0
 8008a4a:	4f32      	ldr	r7, [pc, #200]	; (8008b14 <_strtod_l+0xb24>)
 8008a4c:	e7ea      	b.n	8008a24 <_strtod_l+0xa34>
 8008a4e:	4b31      	ldr	r3, [pc, #196]	; (8008b14 <_strtod_l+0xb24>)
 8008a50:	4630      	mov	r0, r6
 8008a52:	4639      	mov	r1, r7
 8008a54:	2200      	movs	r2, #0
 8008a56:	f7f7 fddf 	bl	8000618 <__aeabi_dmul>
 8008a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	460f      	mov	r7, r1
 8008a60:	b933      	cbnz	r3, 8008a70 <_strtod_l+0xa80>
 8008a62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a66:	9010      	str	r0, [sp, #64]	; 0x40
 8008a68:	9311      	str	r3, [sp, #68]	; 0x44
 8008a6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a6e:	e7df      	b.n	8008a30 <_strtod_l+0xa40>
 8008a70:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008a74:	e7f9      	b.n	8008a6a <_strtod_l+0xa7a>
 8008a76:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008a7a:	9b04      	ldr	r3, [sp, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1ab      	bne.n	80089d8 <_strtod_l+0x9e8>
 8008a80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a84:	0d1b      	lsrs	r3, r3, #20
 8008a86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a88:	051b      	lsls	r3, r3, #20
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	465d      	mov	r5, fp
 8008a8e:	d1a3      	bne.n	80089d8 <_strtod_l+0x9e8>
 8008a90:	4639      	mov	r1, r7
 8008a92:	4630      	mov	r0, r6
 8008a94:	f7f8 f870 	bl	8000b78 <__aeabi_d2iz>
 8008a98:	f7f7 fd54 	bl	8000544 <__aeabi_i2d>
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7f7 fc00 	bl	80002a8 <__aeabi_dsub>
 8008aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aaa:	4606      	mov	r6, r0
 8008aac:	460f      	mov	r7, r1
 8008aae:	b933      	cbnz	r3, 8008abe <_strtod_l+0xace>
 8008ab0:	f1ba 0f00 	cmp.w	sl, #0
 8008ab4:	d103      	bne.n	8008abe <_strtod_l+0xace>
 8008ab6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008aba:	2d00      	cmp	r5, #0
 8008abc:	d06d      	beq.n	8008b9a <_strtod_l+0xbaa>
 8008abe:	a30a      	add	r3, pc, #40	; (adr r3, 8008ae8 <_strtod_l+0xaf8>)
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	f7f8 f818 	bl	8000afc <__aeabi_dcmplt>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f47f acb8 	bne.w	8008442 <_strtod_l+0x452>
 8008ad2:	a307      	add	r3, pc, #28	; (adr r3, 8008af0 <_strtod_l+0xb00>)
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	4630      	mov	r0, r6
 8008ada:	4639      	mov	r1, r7
 8008adc:	f7f8 f82c 	bl	8000b38 <__aeabi_dcmpgt>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	f43f af79 	beq.w	80089d8 <_strtod_l+0x9e8>
 8008ae6:	e4ac      	b.n	8008442 <_strtod_l+0x452>
 8008ae8:	94a03595 	.word	0x94a03595
 8008aec:	3fdfffff 	.word	0x3fdfffff
 8008af0:	35afe535 	.word	0x35afe535
 8008af4:	3fe00000 	.word	0x3fe00000
 8008af8:	000fffff 	.word	0x000fffff
 8008afc:	7ff00000 	.word	0x7ff00000
 8008b00:	7fefffff 	.word	0x7fefffff
 8008b04:	39500000 	.word	0x39500000
 8008b08:	3ff00000 	.word	0x3ff00000
 8008b0c:	7fe00000 	.word	0x7fe00000
 8008b10:	7c9fffff 	.word	0x7c9fffff
 8008b14:	3fe00000 	.word	0x3fe00000
 8008b18:	bff00000 	.word	0xbff00000
 8008b1c:	9b04      	ldr	r3, [sp, #16]
 8008b1e:	b333      	cbz	r3, 8008b6e <_strtod_l+0xb7e>
 8008b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b22:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b26:	d822      	bhi.n	8008b6e <_strtod_l+0xb7e>
 8008b28:	a327      	add	r3, pc, #156	; (adr r3, 8008bc8 <_strtod_l+0xbd8>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	4630      	mov	r0, r6
 8008b30:	4639      	mov	r1, r7
 8008b32:	f7f7 ffed 	bl	8000b10 <__aeabi_dcmple>
 8008b36:	b1a0      	cbz	r0, 8008b62 <_strtod_l+0xb72>
 8008b38:	4639      	mov	r1, r7
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f7f8 f844 	bl	8000bc8 <__aeabi_d2uiz>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	bf08      	it	eq
 8008b44:	2001      	moveq	r0, #1
 8008b46:	f7f7 fced 	bl	8000524 <__aeabi_ui2d>
 8008b4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	460f      	mov	r7, r1
 8008b50:	bb03      	cbnz	r3, 8008b94 <_strtod_l+0xba4>
 8008b52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b56:	9012      	str	r0, [sp, #72]	; 0x48
 8008b58:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b5a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008b5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b66:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008b6a:	1a9b      	subs	r3, r3, r2
 8008b6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b6e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008b72:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008b76:	f001 fd3d 	bl	800a5f4 <__ulp>
 8008b7a:	4650      	mov	r0, sl
 8008b7c:	ec53 2b10 	vmov	r2, r3, d0
 8008b80:	4659      	mov	r1, fp
 8008b82:	f7f7 fd49 	bl	8000618 <__aeabi_dmul>
 8008b86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b8a:	f7f7 fb8f 	bl	80002ac <__adddf3>
 8008b8e:	4682      	mov	sl, r0
 8008b90:	468b      	mov	fp, r1
 8008b92:	e772      	b.n	8008a7a <_strtod_l+0xa8a>
 8008b94:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008b98:	e7df      	b.n	8008b5a <_strtod_l+0xb6a>
 8008b9a:	a30d      	add	r3, pc, #52	; (adr r3, 8008bd0 <_strtod_l+0xbe0>)
 8008b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba0:	f7f7 ffac 	bl	8000afc <__aeabi_dcmplt>
 8008ba4:	e79c      	b.n	8008ae0 <_strtod_l+0xaf0>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	930d      	str	r3, [sp, #52]	; 0x34
 8008baa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008bac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	f7ff ba61 	b.w	8008076 <_strtod_l+0x86>
 8008bb4:	2b65      	cmp	r3, #101	; 0x65
 8008bb6:	f04f 0200 	mov.w	r2, #0
 8008bba:	f43f ab4e 	beq.w	800825a <_strtod_l+0x26a>
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	9104      	str	r1, [sp, #16]
 8008bc4:	f7ff bacb 	b.w	800815e <_strtod_l+0x16e>
 8008bc8:	ffc00000 	.word	0xffc00000
 8008bcc:	41dfffff 	.word	0x41dfffff
 8008bd0:	94a03595 	.word	0x94a03595
 8008bd4:	3fcfffff 	.word	0x3fcfffff

08008bd8 <_strtod_r>:
 8008bd8:	4b05      	ldr	r3, [pc, #20]	; (8008bf0 <_strtod_r+0x18>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	b410      	push	{r4}
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	4c04      	ldr	r4, [pc, #16]	; (8008bf4 <_strtod_r+0x1c>)
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	bf08      	it	eq
 8008be6:	4623      	moveq	r3, r4
 8008be8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bec:	f7ff ba00 	b.w	8007ff0 <_strtod_l>
 8008bf0:	20000054 	.word	0x20000054
 8008bf4:	200000b8 	.word	0x200000b8

08008bf8 <_strtol_l.isra.0>:
 8008bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	4689      	mov	r9, r1
 8008c00:	4692      	mov	sl, r2
 8008c02:	461e      	mov	r6, r3
 8008c04:	460f      	mov	r7, r1
 8008c06:	463d      	mov	r5, r7
 8008c08:	9808      	ldr	r0, [sp, #32]
 8008c0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c0e:	f001 f9ed 	bl	8009fec <__locale_ctype_ptr_l>
 8008c12:	4420      	add	r0, r4
 8008c14:	7843      	ldrb	r3, [r0, #1]
 8008c16:	f013 0308 	ands.w	r3, r3, #8
 8008c1a:	d132      	bne.n	8008c82 <_strtol_l.isra.0+0x8a>
 8008c1c:	2c2d      	cmp	r4, #45	; 0x2d
 8008c1e:	d132      	bne.n	8008c86 <_strtol_l.isra.0+0x8e>
 8008c20:	787c      	ldrb	r4, [r7, #1]
 8008c22:	1cbd      	adds	r5, r7, #2
 8008c24:	2201      	movs	r2, #1
 8008c26:	2e00      	cmp	r6, #0
 8008c28:	d05d      	beq.n	8008ce6 <_strtol_l.isra.0+0xee>
 8008c2a:	2e10      	cmp	r6, #16
 8008c2c:	d109      	bne.n	8008c42 <_strtol_l.isra.0+0x4a>
 8008c2e:	2c30      	cmp	r4, #48	; 0x30
 8008c30:	d107      	bne.n	8008c42 <_strtol_l.isra.0+0x4a>
 8008c32:	782b      	ldrb	r3, [r5, #0]
 8008c34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c38:	2b58      	cmp	r3, #88	; 0x58
 8008c3a:	d14f      	bne.n	8008cdc <_strtol_l.isra.0+0xe4>
 8008c3c:	786c      	ldrb	r4, [r5, #1]
 8008c3e:	2610      	movs	r6, #16
 8008c40:	3502      	adds	r5, #2
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	bf14      	ite	ne
 8008c46:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008c4a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008c4e:	2700      	movs	r7, #0
 8008c50:	fbb1 fcf6 	udiv	ip, r1, r6
 8008c54:	4638      	mov	r0, r7
 8008c56:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008c5a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008c5e:	2b09      	cmp	r3, #9
 8008c60:	d817      	bhi.n	8008c92 <_strtol_l.isra.0+0x9a>
 8008c62:	461c      	mov	r4, r3
 8008c64:	42a6      	cmp	r6, r4
 8008c66:	dd23      	ble.n	8008cb0 <_strtol_l.isra.0+0xb8>
 8008c68:	1c7b      	adds	r3, r7, #1
 8008c6a:	d007      	beq.n	8008c7c <_strtol_l.isra.0+0x84>
 8008c6c:	4584      	cmp	ip, r0
 8008c6e:	d31c      	bcc.n	8008caa <_strtol_l.isra.0+0xb2>
 8008c70:	d101      	bne.n	8008c76 <_strtol_l.isra.0+0x7e>
 8008c72:	45a6      	cmp	lr, r4
 8008c74:	db19      	blt.n	8008caa <_strtol_l.isra.0+0xb2>
 8008c76:	fb00 4006 	mla	r0, r0, r6, r4
 8008c7a:	2701      	movs	r7, #1
 8008c7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c80:	e7eb      	b.n	8008c5a <_strtol_l.isra.0+0x62>
 8008c82:	462f      	mov	r7, r5
 8008c84:	e7bf      	b.n	8008c06 <_strtol_l.isra.0+0xe>
 8008c86:	2c2b      	cmp	r4, #43	; 0x2b
 8008c88:	bf04      	itt	eq
 8008c8a:	1cbd      	addeq	r5, r7, #2
 8008c8c:	787c      	ldrbeq	r4, [r7, #1]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	e7c9      	b.n	8008c26 <_strtol_l.isra.0+0x2e>
 8008c92:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008c96:	2b19      	cmp	r3, #25
 8008c98:	d801      	bhi.n	8008c9e <_strtol_l.isra.0+0xa6>
 8008c9a:	3c37      	subs	r4, #55	; 0x37
 8008c9c:	e7e2      	b.n	8008c64 <_strtol_l.isra.0+0x6c>
 8008c9e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008ca2:	2b19      	cmp	r3, #25
 8008ca4:	d804      	bhi.n	8008cb0 <_strtol_l.isra.0+0xb8>
 8008ca6:	3c57      	subs	r4, #87	; 0x57
 8008ca8:	e7dc      	b.n	8008c64 <_strtol_l.isra.0+0x6c>
 8008caa:	f04f 37ff 	mov.w	r7, #4294967295
 8008cae:	e7e5      	b.n	8008c7c <_strtol_l.isra.0+0x84>
 8008cb0:	1c7b      	adds	r3, r7, #1
 8008cb2:	d108      	bne.n	8008cc6 <_strtol_l.isra.0+0xce>
 8008cb4:	2322      	movs	r3, #34	; 0x22
 8008cb6:	f8c8 3000 	str.w	r3, [r8]
 8008cba:	4608      	mov	r0, r1
 8008cbc:	f1ba 0f00 	cmp.w	sl, #0
 8008cc0:	d107      	bne.n	8008cd2 <_strtol_l.isra.0+0xda>
 8008cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc6:	b102      	cbz	r2, 8008cca <_strtol_l.isra.0+0xd2>
 8008cc8:	4240      	negs	r0, r0
 8008cca:	f1ba 0f00 	cmp.w	sl, #0
 8008cce:	d0f8      	beq.n	8008cc2 <_strtol_l.isra.0+0xca>
 8008cd0:	b10f      	cbz	r7, 8008cd6 <_strtol_l.isra.0+0xde>
 8008cd2:	f105 39ff 	add.w	r9, r5, #4294967295
 8008cd6:	f8ca 9000 	str.w	r9, [sl]
 8008cda:	e7f2      	b.n	8008cc2 <_strtol_l.isra.0+0xca>
 8008cdc:	2430      	movs	r4, #48	; 0x30
 8008cde:	2e00      	cmp	r6, #0
 8008ce0:	d1af      	bne.n	8008c42 <_strtol_l.isra.0+0x4a>
 8008ce2:	2608      	movs	r6, #8
 8008ce4:	e7ad      	b.n	8008c42 <_strtol_l.isra.0+0x4a>
 8008ce6:	2c30      	cmp	r4, #48	; 0x30
 8008ce8:	d0a3      	beq.n	8008c32 <_strtol_l.isra.0+0x3a>
 8008cea:	260a      	movs	r6, #10
 8008cec:	e7a9      	b.n	8008c42 <_strtol_l.isra.0+0x4a>
	...

08008cf0 <_strtol_r>:
 8008cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cf2:	4c06      	ldr	r4, [pc, #24]	; (8008d0c <_strtol_r+0x1c>)
 8008cf4:	4d06      	ldr	r5, [pc, #24]	; (8008d10 <_strtol_r+0x20>)
 8008cf6:	6824      	ldr	r4, [r4, #0]
 8008cf8:	6a24      	ldr	r4, [r4, #32]
 8008cfa:	2c00      	cmp	r4, #0
 8008cfc:	bf08      	it	eq
 8008cfe:	462c      	moveq	r4, r5
 8008d00:	9400      	str	r4, [sp, #0]
 8008d02:	f7ff ff79 	bl	8008bf8 <_strtol_l.isra.0>
 8008d06:	b003      	add	sp, #12
 8008d08:	bd30      	pop	{r4, r5, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000054 	.word	0x20000054
 8008d10:	200000b8 	.word	0x200000b8

08008d14 <quorem>:
 8008d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d18:	6903      	ldr	r3, [r0, #16]
 8008d1a:	690c      	ldr	r4, [r1, #16]
 8008d1c:	42a3      	cmp	r3, r4
 8008d1e:	4680      	mov	r8, r0
 8008d20:	f2c0 8082 	blt.w	8008e28 <quorem+0x114>
 8008d24:	3c01      	subs	r4, #1
 8008d26:	f101 0714 	add.w	r7, r1, #20
 8008d2a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008d2e:	f100 0614 	add.w	r6, r0, #20
 8008d32:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008d36:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008d3a:	eb06 030c 	add.w	r3, r6, ip
 8008d3e:	3501      	adds	r5, #1
 8008d40:	eb07 090c 	add.w	r9, r7, ip
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	fbb0 f5f5 	udiv	r5, r0, r5
 8008d4a:	b395      	cbz	r5, 8008db2 <quorem+0x9e>
 8008d4c:	f04f 0a00 	mov.w	sl, #0
 8008d50:	4638      	mov	r0, r7
 8008d52:	46b6      	mov	lr, r6
 8008d54:	46d3      	mov	fp, sl
 8008d56:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d5a:	b293      	uxth	r3, r2
 8008d5c:	fb05 a303 	mla	r3, r5, r3, sl
 8008d60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	ebab 0303 	sub.w	r3, fp, r3
 8008d6a:	0c12      	lsrs	r2, r2, #16
 8008d6c:	f8de b000 	ldr.w	fp, [lr]
 8008d70:	fb05 a202 	mla	r2, r5, r2, sl
 8008d74:	fa13 f38b 	uxtah	r3, r3, fp
 8008d78:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008d7c:	fa1f fb82 	uxth.w	fp, r2
 8008d80:	f8de 2000 	ldr.w	r2, [lr]
 8008d84:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d92:	4581      	cmp	r9, r0
 8008d94:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008d98:	f84e 3b04 	str.w	r3, [lr], #4
 8008d9c:	d2db      	bcs.n	8008d56 <quorem+0x42>
 8008d9e:	f856 300c 	ldr.w	r3, [r6, ip]
 8008da2:	b933      	cbnz	r3, 8008db2 <quorem+0x9e>
 8008da4:	9b01      	ldr	r3, [sp, #4]
 8008da6:	3b04      	subs	r3, #4
 8008da8:	429e      	cmp	r6, r3
 8008daa:	461a      	mov	r2, r3
 8008dac:	d330      	bcc.n	8008e10 <quorem+0xfc>
 8008dae:	f8c8 4010 	str.w	r4, [r8, #16]
 8008db2:	4640      	mov	r0, r8
 8008db4:	f001 fba6 	bl	800a504 <__mcmp>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	db25      	blt.n	8008e08 <quorem+0xf4>
 8008dbc:	3501      	adds	r5, #1
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f04f 0c00 	mov.w	ip, #0
 8008dc4:	f857 2b04 	ldr.w	r2, [r7], #4
 8008dc8:	f8d0 e000 	ldr.w	lr, [r0]
 8008dcc:	b293      	uxth	r3, r2
 8008dce:	ebac 0303 	sub.w	r3, ip, r3
 8008dd2:	0c12      	lsrs	r2, r2, #16
 8008dd4:	fa13 f38e 	uxtah	r3, r3, lr
 8008dd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ddc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008de6:	45b9      	cmp	r9, r7
 8008de8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008dec:	f840 3b04 	str.w	r3, [r0], #4
 8008df0:	d2e8      	bcs.n	8008dc4 <quorem+0xb0>
 8008df2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008df6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008dfa:	b92a      	cbnz	r2, 8008e08 <quorem+0xf4>
 8008dfc:	3b04      	subs	r3, #4
 8008dfe:	429e      	cmp	r6, r3
 8008e00:	461a      	mov	r2, r3
 8008e02:	d30b      	bcc.n	8008e1c <quorem+0x108>
 8008e04:	f8c8 4010 	str.w	r4, [r8, #16]
 8008e08:	4628      	mov	r0, r5
 8008e0a:	b003      	add	sp, #12
 8008e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e10:	6812      	ldr	r2, [r2, #0]
 8008e12:	3b04      	subs	r3, #4
 8008e14:	2a00      	cmp	r2, #0
 8008e16:	d1ca      	bne.n	8008dae <quorem+0x9a>
 8008e18:	3c01      	subs	r4, #1
 8008e1a:	e7c5      	b.n	8008da8 <quorem+0x94>
 8008e1c:	6812      	ldr	r2, [r2, #0]
 8008e1e:	3b04      	subs	r3, #4
 8008e20:	2a00      	cmp	r2, #0
 8008e22:	d1ef      	bne.n	8008e04 <quorem+0xf0>
 8008e24:	3c01      	subs	r4, #1
 8008e26:	e7ea      	b.n	8008dfe <quorem+0xea>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	e7ee      	b.n	8008e0a <quorem+0xf6>
 8008e2c:	0000      	movs	r0, r0
	...

08008e30 <_dtoa_r>:
 8008e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e34:	ec57 6b10 	vmov	r6, r7, d0
 8008e38:	b097      	sub	sp, #92	; 0x5c
 8008e3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e3c:	9106      	str	r1, [sp, #24]
 8008e3e:	4604      	mov	r4, r0
 8008e40:	920b      	str	r2, [sp, #44]	; 0x2c
 8008e42:	9312      	str	r3, [sp, #72]	; 0x48
 8008e44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e48:	e9cd 6700 	strd	r6, r7, [sp]
 8008e4c:	b93d      	cbnz	r5, 8008e5e <_dtoa_r+0x2e>
 8008e4e:	2010      	movs	r0, #16
 8008e50:	f001 f8e0 	bl	800a014 <malloc>
 8008e54:	6260      	str	r0, [r4, #36]	; 0x24
 8008e56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e5a:	6005      	str	r5, [r0, #0]
 8008e5c:	60c5      	str	r5, [r0, #12]
 8008e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e60:	6819      	ldr	r1, [r3, #0]
 8008e62:	b151      	cbz	r1, 8008e7a <_dtoa_r+0x4a>
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	604a      	str	r2, [r1, #4]
 8008e68:	2301      	movs	r3, #1
 8008e6a:	4093      	lsls	r3, r2
 8008e6c:	608b      	str	r3, [r1, #8]
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f001 f929 	bl	800a0c6 <_Bfree>
 8008e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e76:	2200      	movs	r2, #0
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	1e3b      	subs	r3, r7, #0
 8008e7c:	bfbb      	ittet	lt
 8008e7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e82:	9301      	strlt	r3, [sp, #4]
 8008e84:	2300      	movge	r3, #0
 8008e86:	2201      	movlt	r2, #1
 8008e88:	bfac      	ite	ge
 8008e8a:	f8c8 3000 	strge.w	r3, [r8]
 8008e8e:	f8c8 2000 	strlt.w	r2, [r8]
 8008e92:	4baf      	ldr	r3, [pc, #700]	; (8009150 <_dtoa_r+0x320>)
 8008e94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008e98:	ea33 0308 	bics.w	r3, r3, r8
 8008e9c:	d114      	bne.n	8008ec8 <_dtoa_r+0x98>
 8008e9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ea0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	9b00      	ldr	r3, [sp, #0]
 8008ea8:	b923      	cbnz	r3, 8008eb4 <_dtoa_r+0x84>
 8008eaa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	f000 8542 	beq.w	8009938 <_dtoa_r+0xb08>
 8008eb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eb6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009164 <_dtoa_r+0x334>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 8544 	beq.w	8009948 <_dtoa_r+0xb18>
 8008ec0:	f10b 0303 	add.w	r3, fp, #3
 8008ec4:	f000 bd3e 	b.w	8009944 <_dtoa_r+0xb14>
 8008ec8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	f7f7 fe08 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ed8:	4681      	mov	r9, r0
 8008eda:	b168      	cbz	r0, 8008ef8 <_dtoa_r+0xc8>
 8008edc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ede:	2301      	movs	r3, #1
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 8524 	beq.w	8009932 <_dtoa_r+0xb02>
 8008eea:	4b9a      	ldr	r3, [pc, #616]	; (8009154 <_dtoa_r+0x324>)
 8008eec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008eee:	f103 3bff 	add.w	fp, r3, #4294967295
 8008ef2:	6013      	str	r3, [r2, #0]
 8008ef4:	f000 bd28 	b.w	8009948 <_dtoa_r+0xb18>
 8008ef8:	aa14      	add	r2, sp, #80	; 0x50
 8008efa:	a915      	add	r1, sp, #84	; 0x54
 8008efc:	ec47 6b10 	vmov	d0, r6, r7
 8008f00:	4620      	mov	r0, r4
 8008f02:	f001 fbed 	bl	800a6e0 <__d2b>
 8008f06:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008f0a:	9004      	str	r0, [sp, #16]
 8008f0c:	2d00      	cmp	r5, #0
 8008f0e:	d07c      	beq.n	800900a <_dtoa_r+0x1da>
 8008f10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f14:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008f18:	46b2      	mov	sl, r6
 8008f1a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008f1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008f26:	2200      	movs	r2, #0
 8008f28:	4b8b      	ldr	r3, [pc, #556]	; (8009158 <_dtoa_r+0x328>)
 8008f2a:	4650      	mov	r0, sl
 8008f2c:	4659      	mov	r1, fp
 8008f2e:	f7f7 f9bb 	bl	80002a8 <__aeabi_dsub>
 8008f32:	a381      	add	r3, pc, #516	; (adr r3, 8009138 <_dtoa_r+0x308>)
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	f7f7 fb6e 	bl	8000618 <__aeabi_dmul>
 8008f3c:	a380      	add	r3, pc, #512	; (adr r3, 8009140 <_dtoa_r+0x310>)
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	f7f7 f9b3 	bl	80002ac <__adddf3>
 8008f46:	4606      	mov	r6, r0
 8008f48:	4628      	mov	r0, r5
 8008f4a:	460f      	mov	r7, r1
 8008f4c:	f7f7 fafa 	bl	8000544 <__aeabi_i2d>
 8008f50:	a37d      	add	r3, pc, #500	; (adr r3, 8009148 <_dtoa_r+0x318>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f7f7 fb5f 	bl	8000618 <__aeabi_dmul>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4630      	mov	r0, r6
 8008f60:	4639      	mov	r1, r7
 8008f62:	f7f7 f9a3 	bl	80002ac <__adddf3>
 8008f66:	4606      	mov	r6, r0
 8008f68:	460f      	mov	r7, r1
 8008f6a:	f7f7 fe05 	bl	8000b78 <__aeabi_d2iz>
 8008f6e:	2200      	movs	r2, #0
 8008f70:	4682      	mov	sl, r0
 8008f72:	2300      	movs	r3, #0
 8008f74:	4630      	mov	r0, r6
 8008f76:	4639      	mov	r1, r7
 8008f78:	f7f7 fdc0 	bl	8000afc <__aeabi_dcmplt>
 8008f7c:	b148      	cbz	r0, 8008f92 <_dtoa_r+0x162>
 8008f7e:	4650      	mov	r0, sl
 8008f80:	f7f7 fae0 	bl	8000544 <__aeabi_i2d>
 8008f84:	4632      	mov	r2, r6
 8008f86:	463b      	mov	r3, r7
 8008f88:	f7f7 fdae 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f8c:	b908      	cbnz	r0, 8008f92 <_dtoa_r+0x162>
 8008f8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f92:	f1ba 0f16 	cmp.w	sl, #22
 8008f96:	d859      	bhi.n	800904c <_dtoa_r+0x21c>
 8008f98:	4970      	ldr	r1, [pc, #448]	; (800915c <_dtoa_r+0x32c>)
 8008f9a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008f9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fa6:	f7f7 fdc7 	bl	8000b38 <__aeabi_dcmpgt>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d050      	beq.n	8009050 <_dtoa_r+0x220>
 8008fae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fb8:	1b5d      	subs	r5, r3, r5
 8008fba:	f1b5 0801 	subs.w	r8, r5, #1
 8008fbe:	bf49      	itett	mi
 8008fc0:	f1c5 0301 	rsbmi	r3, r5, #1
 8008fc4:	2300      	movpl	r3, #0
 8008fc6:	9305      	strmi	r3, [sp, #20]
 8008fc8:	f04f 0800 	movmi.w	r8, #0
 8008fcc:	bf58      	it	pl
 8008fce:	9305      	strpl	r3, [sp, #20]
 8008fd0:	f1ba 0f00 	cmp.w	sl, #0
 8008fd4:	db3e      	blt.n	8009054 <_dtoa_r+0x224>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	44d0      	add	r8, sl
 8008fda:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008fde:	9307      	str	r3, [sp, #28]
 8008fe0:	9b06      	ldr	r3, [sp, #24]
 8008fe2:	2b09      	cmp	r3, #9
 8008fe4:	f200 8090 	bhi.w	8009108 <_dtoa_r+0x2d8>
 8008fe8:	2b05      	cmp	r3, #5
 8008fea:	bfc4      	itt	gt
 8008fec:	3b04      	subgt	r3, #4
 8008fee:	9306      	strgt	r3, [sp, #24]
 8008ff0:	9b06      	ldr	r3, [sp, #24]
 8008ff2:	f1a3 0302 	sub.w	r3, r3, #2
 8008ff6:	bfcc      	ite	gt
 8008ff8:	2500      	movgt	r5, #0
 8008ffa:	2501      	movle	r5, #1
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	f200 808f 	bhi.w	8009120 <_dtoa_r+0x2f0>
 8009002:	e8df f003 	tbb	[pc, r3]
 8009006:	7f7d      	.short	0x7f7d
 8009008:	7131      	.short	0x7131
 800900a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800900e:	441d      	add	r5, r3
 8009010:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009014:	2820      	cmp	r0, #32
 8009016:	dd13      	ble.n	8009040 <_dtoa_r+0x210>
 8009018:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800901c:	9b00      	ldr	r3, [sp, #0]
 800901e:	fa08 f800 	lsl.w	r8, r8, r0
 8009022:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009026:	fa23 f000 	lsr.w	r0, r3, r0
 800902a:	ea48 0000 	orr.w	r0, r8, r0
 800902e:	f7f7 fa79 	bl	8000524 <__aeabi_ui2d>
 8009032:	2301      	movs	r3, #1
 8009034:	4682      	mov	sl, r0
 8009036:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800903a:	3d01      	subs	r5, #1
 800903c:	9313      	str	r3, [sp, #76]	; 0x4c
 800903e:	e772      	b.n	8008f26 <_dtoa_r+0xf6>
 8009040:	9b00      	ldr	r3, [sp, #0]
 8009042:	f1c0 0020 	rsb	r0, r0, #32
 8009046:	fa03 f000 	lsl.w	r0, r3, r0
 800904a:	e7f0      	b.n	800902e <_dtoa_r+0x1fe>
 800904c:	2301      	movs	r3, #1
 800904e:	e7b1      	b.n	8008fb4 <_dtoa_r+0x184>
 8009050:	900f      	str	r0, [sp, #60]	; 0x3c
 8009052:	e7b0      	b.n	8008fb6 <_dtoa_r+0x186>
 8009054:	9b05      	ldr	r3, [sp, #20]
 8009056:	eba3 030a 	sub.w	r3, r3, sl
 800905a:	9305      	str	r3, [sp, #20]
 800905c:	f1ca 0300 	rsb	r3, sl, #0
 8009060:	9307      	str	r3, [sp, #28]
 8009062:	2300      	movs	r3, #0
 8009064:	930e      	str	r3, [sp, #56]	; 0x38
 8009066:	e7bb      	b.n	8008fe0 <_dtoa_r+0x1b0>
 8009068:	2301      	movs	r3, #1
 800906a:	930a      	str	r3, [sp, #40]	; 0x28
 800906c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800906e:	2b00      	cmp	r3, #0
 8009070:	dd59      	ble.n	8009126 <_dtoa_r+0x2f6>
 8009072:	9302      	str	r3, [sp, #8]
 8009074:	4699      	mov	r9, r3
 8009076:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009078:	2200      	movs	r2, #0
 800907a:	6072      	str	r2, [r6, #4]
 800907c:	2204      	movs	r2, #4
 800907e:	f102 0014 	add.w	r0, r2, #20
 8009082:	4298      	cmp	r0, r3
 8009084:	6871      	ldr	r1, [r6, #4]
 8009086:	d953      	bls.n	8009130 <_dtoa_r+0x300>
 8009088:	4620      	mov	r0, r4
 800908a:	f000 ffe8 	bl	800a05e <_Balloc>
 800908e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009090:	6030      	str	r0, [r6, #0]
 8009092:	f1b9 0f0e 	cmp.w	r9, #14
 8009096:	f8d3 b000 	ldr.w	fp, [r3]
 800909a:	f200 80e6 	bhi.w	800926a <_dtoa_r+0x43a>
 800909e:	2d00      	cmp	r5, #0
 80090a0:	f000 80e3 	beq.w	800926a <_dtoa_r+0x43a>
 80090a4:	ed9d 7b00 	vldr	d7, [sp]
 80090a8:	f1ba 0f00 	cmp.w	sl, #0
 80090ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80090b0:	dd74      	ble.n	800919c <_dtoa_r+0x36c>
 80090b2:	4a2a      	ldr	r2, [pc, #168]	; (800915c <_dtoa_r+0x32c>)
 80090b4:	f00a 030f 	and.w	r3, sl, #15
 80090b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80090bc:	ed93 7b00 	vldr	d7, [r3]
 80090c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80090c4:	06f0      	lsls	r0, r6, #27
 80090c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80090ca:	d565      	bpl.n	8009198 <_dtoa_r+0x368>
 80090cc:	4b24      	ldr	r3, [pc, #144]	; (8009160 <_dtoa_r+0x330>)
 80090ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090d6:	f7f7 fbc9 	bl	800086c <__aeabi_ddiv>
 80090da:	e9cd 0100 	strd	r0, r1, [sp]
 80090de:	f006 060f 	and.w	r6, r6, #15
 80090e2:	2503      	movs	r5, #3
 80090e4:	4f1e      	ldr	r7, [pc, #120]	; (8009160 <_dtoa_r+0x330>)
 80090e6:	e04c      	b.n	8009182 <_dtoa_r+0x352>
 80090e8:	2301      	movs	r3, #1
 80090ea:	930a      	str	r3, [sp, #40]	; 0x28
 80090ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ee:	4453      	add	r3, sl
 80090f0:	f103 0901 	add.w	r9, r3, #1
 80090f4:	9302      	str	r3, [sp, #8]
 80090f6:	464b      	mov	r3, r9
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	bfb8      	it	lt
 80090fc:	2301      	movlt	r3, #1
 80090fe:	e7ba      	b.n	8009076 <_dtoa_r+0x246>
 8009100:	2300      	movs	r3, #0
 8009102:	e7b2      	b.n	800906a <_dtoa_r+0x23a>
 8009104:	2300      	movs	r3, #0
 8009106:	e7f0      	b.n	80090ea <_dtoa_r+0x2ba>
 8009108:	2501      	movs	r5, #1
 800910a:	2300      	movs	r3, #0
 800910c:	9306      	str	r3, [sp, #24]
 800910e:	950a      	str	r5, [sp, #40]	; 0x28
 8009110:	f04f 33ff 	mov.w	r3, #4294967295
 8009114:	9302      	str	r3, [sp, #8]
 8009116:	4699      	mov	r9, r3
 8009118:	2200      	movs	r2, #0
 800911a:	2312      	movs	r3, #18
 800911c:	920b      	str	r2, [sp, #44]	; 0x2c
 800911e:	e7aa      	b.n	8009076 <_dtoa_r+0x246>
 8009120:	2301      	movs	r3, #1
 8009122:	930a      	str	r3, [sp, #40]	; 0x28
 8009124:	e7f4      	b.n	8009110 <_dtoa_r+0x2e0>
 8009126:	2301      	movs	r3, #1
 8009128:	9302      	str	r3, [sp, #8]
 800912a:	4699      	mov	r9, r3
 800912c:	461a      	mov	r2, r3
 800912e:	e7f5      	b.n	800911c <_dtoa_r+0x2ec>
 8009130:	3101      	adds	r1, #1
 8009132:	6071      	str	r1, [r6, #4]
 8009134:	0052      	lsls	r2, r2, #1
 8009136:	e7a2      	b.n	800907e <_dtoa_r+0x24e>
 8009138:	636f4361 	.word	0x636f4361
 800913c:	3fd287a7 	.word	0x3fd287a7
 8009140:	8b60c8b3 	.word	0x8b60c8b3
 8009144:	3fc68a28 	.word	0x3fc68a28
 8009148:	509f79fb 	.word	0x509f79fb
 800914c:	3fd34413 	.word	0x3fd34413
 8009150:	7ff00000 	.word	0x7ff00000
 8009154:	0800c8c5 	.word	0x0800c8c5
 8009158:	3ff80000 	.word	0x3ff80000
 800915c:	0800c980 	.word	0x0800c980
 8009160:	0800c958 	.word	0x0800c958
 8009164:	0800c949 	.word	0x0800c949
 8009168:	07f1      	lsls	r1, r6, #31
 800916a:	d508      	bpl.n	800917e <_dtoa_r+0x34e>
 800916c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009174:	f7f7 fa50 	bl	8000618 <__aeabi_dmul>
 8009178:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800917c:	3501      	adds	r5, #1
 800917e:	1076      	asrs	r6, r6, #1
 8009180:	3708      	adds	r7, #8
 8009182:	2e00      	cmp	r6, #0
 8009184:	d1f0      	bne.n	8009168 <_dtoa_r+0x338>
 8009186:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800918a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800918e:	f7f7 fb6d 	bl	800086c <__aeabi_ddiv>
 8009192:	e9cd 0100 	strd	r0, r1, [sp]
 8009196:	e01a      	b.n	80091ce <_dtoa_r+0x39e>
 8009198:	2502      	movs	r5, #2
 800919a:	e7a3      	b.n	80090e4 <_dtoa_r+0x2b4>
 800919c:	f000 80a0 	beq.w	80092e0 <_dtoa_r+0x4b0>
 80091a0:	f1ca 0600 	rsb	r6, sl, #0
 80091a4:	4b9f      	ldr	r3, [pc, #636]	; (8009424 <_dtoa_r+0x5f4>)
 80091a6:	4fa0      	ldr	r7, [pc, #640]	; (8009428 <_dtoa_r+0x5f8>)
 80091a8:	f006 020f 	and.w	r2, r6, #15
 80091ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80091b8:	f7f7 fa2e 	bl	8000618 <__aeabi_dmul>
 80091bc:	e9cd 0100 	strd	r0, r1, [sp]
 80091c0:	1136      	asrs	r6, r6, #4
 80091c2:	2300      	movs	r3, #0
 80091c4:	2502      	movs	r5, #2
 80091c6:	2e00      	cmp	r6, #0
 80091c8:	d17f      	bne.n	80092ca <_dtoa_r+0x49a>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1e1      	bne.n	8009192 <_dtoa_r+0x362>
 80091ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 8087 	beq.w	80092e4 <_dtoa_r+0x4b4>
 80091d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80091da:	2200      	movs	r2, #0
 80091dc:	4b93      	ldr	r3, [pc, #588]	; (800942c <_dtoa_r+0x5fc>)
 80091de:	4630      	mov	r0, r6
 80091e0:	4639      	mov	r1, r7
 80091e2:	f7f7 fc8b 	bl	8000afc <__aeabi_dcmplt>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d07c      	beq.n	80092e4 <_dtoa_r+0x4b4>
 80091ea:	f1b9 0f00 	cmp.w	r9, #0
 80091ee:	d079      	beq.n	80092e4 <_dtoa_r+0x4b4>
 80091f0:	9b02      	ldr	r3, [sp, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dd35      	ble.n	8009262 <_dtoa_r+0x432>
 80091f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80091fa:	9308      	str	r3, [sp, #32]
 80091fc:	4639      	mov	r1, r7
 80091fe:	2200      	movs	r2, #0
 8009200:	4b8b      	ldr	r3, [pc, #556]	; (8009430 <_dtoa_r+0x600>)
 8009202:	4630      	mov	r0, r6
 8009204:	f7f7 fa08 	bl	8000618 <__aeabi_dmul>
 8009208:	e9cd 0100 	strd	r0, r1, [sp]
 800920c:	9f02      	ldr	r7, [sp, #8]
 800920e:	3501      	adds	r5, #1
 8009210:	4628      	mov	r0, r5
 8009212:	f7f7 f997 	bl	8000544 <__aeabi_i2d>
 8009216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800921a:	f7f7 f9fd 	bl	8000618 <__aeabi_dmul>
 800921e:	2200      	movs	r2, #0
 8009220:	4b84      	ldr	r3, [pc, #528]	; (8009434 <_dtoa_r+0x604>)
 8009222:	f7f7 f843 	bl	80002ac <__adddf3>
 8009226:	4605      	mov	r5, r0
 8009228:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800922c:	2f00      	cmp	r7, #0
 800922e:	d15d      	bne.n	80092ec <_dtoa_r+0x4bc>
 8009230:	2200      	movs	r2, #0
 8009232:	4b81      	ldr	r3, [pc, #516]	; (8009438 <_dtoa_r+0x608>)
 8009234:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009238:	f7f7 f836 	bl	80002a8 <__aeabi_dsub>
 800923c:	462a      	mov	r2, r5
 800923e:	4633      	mov	r3, r6
 8009240:	e9cd 0100 	strd	r0, r1, [sp]
 8009244:	f7f7 fc78 	bl	8000b38 <__aeabi_dcmpgt>
 8009248:	2800      	cmp	r0, #0
 800924a:	f040 8288 	bne.w	800975e <_dtoa_r+0x92e>
 800924e:	462a      	mov	r2, r5
 8009250:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009254:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009258:	f7f7 fc50 	bl	8000afc <__aeabi_dcmplt>
 800925c:	2800      	cmp	r0, #0
 800925e:	f040 827c 	bne.w	800975a <_dtoa_r+0x92a>
 8009262:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009266:	e9cd 2300 	strd	r2, r3, [sp]
 800926a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800926c:	2b00      	cmp	r3, #0
 800926e:	f2c0 8150 	blt.w	8009512 <_dtoa_r+0x6e2>
 8009272:	f1ba 0f0e 	cmp.w	sl, #14
 8009276:	f300 814c 	bgt.w	8009512 <_dtoa_r+0x6e2>
 800927a:	4b6a      	ldr	r3, [pc, #424]	; (8009424 <_dtoa_r+0x5f4>)
 800927c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009280:	ed93 7b00 	vldr	d7, [r3]
 8009284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009286:	2b00      	cmp	r3, #0
 8009288:	ed8d 7b02 	vstr	d7, [sp, #8]
 800928c:	f280 80d8 	bge.w	8009440 <_dtoa_r+0x610>
 8009290:	f1b9 0f00 	cmp.w	r9, #0
 8009294:	f300 80d4 	bgt.w	8009440 <_dtoa_r+0x610>
 8009298:	f040 825e 	bne.w	8009758 <_dtoa_r+0x928>
 800929c:	2200      	movs	r2, #0
 800929e:	4b66      	ldr	r3, [pc, #408]	; (8009438 <_dtoa_r+0x608>)
 80092a0:	ec51 0b17 	vmov	r0, r1, d7
 80092a4:	f7f7 f9b8 	bl	8000618 <__aeabi_dmul>
 80092a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092ac:	f7f7 fc3a 	bl	8000b24 <__aeabi_dcmpge>
 80092b0:	464f      	mov	r7, r9
 80092b2:	464e      	mov	r6, r9
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f040 8234 	bne.w	8009722 <_dtoa_r+0x8f2>
 80092ba:	2331      	movs	r3, #49	; 0x31
 80092bc:	f10b 0501 	add.w	r5, fp, #1
 80092c0:	f88b 3000 	strb.w	r3, [fp]
 80092c4:	f10a 0a01 	add.w	sl, sl, #1
 80092c8:	e22f      	b.n	800972a <_dtoa_r+0x8fa>
 80092ca:	07f2      	lsls	r2, r6, #31
 80092cc:	d505      	bpl.n	80092da <_dtoa_r+0x4aa>
 80092ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d2:	f7f7 f9a1 	bl	8000618 <__aeabi_dmul>
 80092d6:	3501      	adds	r5, #1
 80092d8:	2301      	movs	r3, #1
 80092da:	1076      	asrs	r6, r6, #1
 80092dc:	3708      	adds	r7, #8
 80092de:	e772      	b.n	80091c6 <_dtoa_r+0x396>
 80092e0:	2502      	movs	r5, #2
 80092e2:	e774      	b.n	80091ce <_dtoa_r+0x39e>
 80092e4:	f8cd a020 	str.w	sl, [sp, #32]
 80092e8:	464f      	mov	r7, r9
 80092ea:	e791      	b.n	8009210 <_dtoa_r+0x3e0>
 80092ec:	4b4d      	ldr	r3, [pc, #308]	; (8009424 <_dtoa_r+0x5f4>)
 80092ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80092f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d047      	beq.n	800938c <_dtoa_r+0x55c>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	2000      	movs	r0, #0
 8009302:	494e      	ldr	r1, [pc, #312]	; (800943c <_dtoa_r+0x60c>)
 8009304:	f7f7 fab2 	bl	800086c <__aeabi_ddiv>
 8009308:	462a      	mov	r2, r5
 800930a:	4633      	mov	r3, r6
 800930c:	f7f6 ffcc 	bl	80002a8 <__aeabi_dsub>
 8009310:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009314:	465d      	mov	r5, fp
 8009316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800931a:	f7f7 fc2d 	bl	8000b78 <__aeabi_d2iz>
 800931e:	4606      	mov	r6, r0
 8009320:	f7f7 f910 	bl	8000544 <__aeabi_i2d>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800932c:	f7f6 ffbc 	bl	80002a8 <__aeabi_dsub>
 8009330:	3630      	adds	r6, #48	; 0x30
 8009332:	f805 6b01 	strb.w	r6, [r5], #1
 8009336:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800933a:	e9cd 0100 	strd	r0, r1, [sp]
 800933e:	f7f7 fbdd 	bl	8000afc <__aeabi_dcmplt>
 8009342:	2800      	cmp	r0, #0
 8009344:	d163      	bne.n	800940e <_dtoa_r+0x5de>
 8009346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800934a:	2000      	movs	r0, #0
 800934c:	4937      	ldr	r1, [pc, #220]	; (800942c <_dtoa_r+0x5fc>)
 800934e:	f7f6 ffab 	bl	80002a8 <__aeabi_dsub>
 8009352:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009356:	f7f7 fbd1 	bl	8000afc <__aeabi_dcmplt>
 800935a:	2800      	cmp	r0, #0
 800935c:	f040 80b7 	bne.w	80094ce <_dtoa_r+0x69e>
 8009360:	eba5 030b 	sub.w	r3, r5, fp
 8009364:	429f      	cmp	r7, r3
 8009366:	f77f af7c 	ble.w	8009262 <_dtoa_r+0x432>
 800936a:	2200      	movs	r2, #0
 800936c:	4b30      	ldr	r3, [pc, #192]	; (8009430 <_dtoa_r+0x600>)
 800936e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009372:	f7f7 f951 	bl	8000618 <__aeabi_dmul>
 8009376:	2200      	movs	r2, #0
 8009378:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800937c:	4b2c      	ldr	r3, [pc, #176]	; (8009430 <_dtoa_r+0x600>)
 800937e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009382:	f7f7 f949 	bl	8000618 <__aeabi_dmul>
 8009386:	e9cd 0100 	strd	r0, r1, [sp]
 800938a:	e7c4      	b.n	8009316 <_dtoa_r+0x4e6>
 800938c:	462a      	mov	r2, r5
 800938e:	4633      	mov	r3, r6
 8009390:	f7f7 f942 	bl	8000618 <__aeabi_dmul>
 8009394:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009398:	eb0b 0507 	add.w	r5, fp, r7
 800939c:	465e      	mov	r6, fp
 800939e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093a2:	f7f7 fbe9 	bl	8000b78 <__aeabi_d2iz>
 80093a6:	4607      	mov	r7, r0
 80093a8:	f7f7 f8cc 	bl	8000544 <__aeabi_i2d>
 80093ac:	3730      	adds	r7, #48	; 0x30
 80093ae:	4602      	mov	r2, r0
 80093b0:	460b      	mov	r3, r1
 80093b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093b6:	f7f6 ff77 	bl	80002a8 <__aeabi_dsub>
 80093ba:	f806 7b01 	strb.w	r7, [r6], #1
 80093be:	42ae      	cmp	r6, r5
 80093c0:	e9cd 0100 	strd	r0, r1, [sp]
 80093c4:	f04f 0200 	mov.w	r2, #0
 80093c8:	d126      	bne.n	8009418 <_dtoa_r+0x5e8>
 80093ca:	4b1c      	ldr	r3, [pc, #112]	; (800943c <_dtoa_r+0x60c>)
 80093cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093d0:	f7f6 ff6c 	bl	80002ac <__adddf3>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093dc:	f7f7 fbac 	bl	8000b38 <__aeabi_dcmpgt>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d174      	bne.n	80094ce <_dtoa_r+0x69e>
 80093e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80093e8:	2000      	movs	r0, #0
 80093ea:	4914      	ldr	r1, [pc, #80]	; (800943c <_dtoa_r+0x60c>)
 80093ec:	f7f6 ff5c 	bl	80002a8 <__aeabi_dsub>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093f8:	f7f7 fb80 	bl	8000afc <__aeabi_dcmplt>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	f43f af30 	beq.w	8009262 <_dtoa_r+0x432>
 8009402:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009406:	2b30      	cmp	r3, #48	; 0x30
 8009408:	f105 32ff 	add.w	r2, r5, #4294967295
 800940c:	d002      	beq.n	8009414 <_dtoa_r+0x5e4>
 800940e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009412:	e04a      	b.n	80094aa <_dtoa_r+0x67a>
 8009414:	4615      	mov	r5, r2
 8009416:	e7f4      	b.n	8009402 <_dtoa_r+0x5d2>
 8009418:	4b05      	ldr	r3, [pc, #20]	; (8009430 <_dtoa_r+0x600>)
 800941a:	f7f7 f8fd 	bl	8000618 <__aeabi_dmul>
 800941e:	e9cd 0100 	strd	r0, r1, [sp]
 8009422:	e7bc      	b.n	800939e <_dtoa_r+0x56e>
 8009424:	0800c980 	.word	0x0800c980
 8009428:	0800c958 	.word	0x0800c958
 800942c:	3ff00000 	.word	0x3ff00000
 8009430:	40240000 	.word	0x40240000
 8009434:	401c0000 	.word	0x401c0000
 8009438:	40140000 	.word	0x40140000
 800943c:	3fe00000 	.word	0x3fe00000
 8009440:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009444:	465d      	mov	r5, fp
 8009446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800944a:	4630      	mov	r0, r6
 800944c:	4639      	mov	r1, r7
 800944e:	f7f7 fa0d 	bl	800086c <__aeabi_ddiv>
 8009452:	f7f7 fb91 	bl	8000b78 <__aeabi_d2iz>
 8009456:	4680      	mov	r8, r0
 8009458:	f7f7 f874 	bl	8000544 <__aeabi_i2d>
 800945c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009460:	f7f7 f8da 	bl	8000618 <__aeabi_dmul>
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	4630      	mov	r0, r6
 800946a:	4639      	mov	r1, r7
 800946c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009470:	f7f6 ff1a 	bl	80002a8 <__aeabi_dsub>
 8009474:	f805 6b01 	strb.w	r6, [r5], #1
 8009478:	eba5 060b 	sub.w	r6, r5, fp
 800947c:	45b1      	cmp	r9, r6
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	d139      	bne.n	80094f8 <_dtoa_r+0x6c8>
 8009484:	f7f6 ff12 	bl	80002ac <__adddf3>
 8009488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800948c:	4606      	mov	r6, r0
 800948e:	460f      	mov	r7, r1
 8009490:	f7f7 fb52 	bl	8000b38 <__aeabi_dcmpgt>
 8009494:	b9c8      	cbnz	r0, 80094ca <_dtoa_r+0x69a>
 8009496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800949a:	4630      	mov	r0, r6
 800949c:	4639      	mov	r1, r7
 800949e:	f7f7 fb23 	bl	8000ae8 <__aeabi_dcmpeq>
 80094a2:	b110      	cbz	r0, 80094aa <_dtoa_r+0x67a>
 80094a4:	f018 0f01 	tst.w	r8, #1
 80094a8:	d10f      	bne.n	80094ca <_dtoa_r+0x69a>
 80094aa:	9904      	ldr	r1, [sp, #16]
 80094ac:	4620      	mov	r0, r4
 80094ae:	f000 fe0a 	bl	800a0c6 <_Bfree>
 80094b2:	2300      	movs	r3, #0
 80094b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094b6:	702b      	strb	r3, [r5, #0]
 80094b8:	f10a 0301 	add.w	r3, sl, #1
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 8241 	beq.w	8009948 <_dtoa_r+0xb18>
 80094c6:	601d      	str	r5, [r3, #0]
 80094c8:	e23e      	b.n	8009948 <_dtoa_r+0xb18>
 80094ca:	f8cd a020 	str.w	sl, [sp, #32]
 80094ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094d2:	2a39      	cmp	r2, #57	; 0x39
 80094d4:	f105 33ff 	add.w	r3, r5, #4294967295
 80094d8:	d108      	bne.n	80094ec <_dtoa_r+0x6bc>
 80094da:	459b      	cmp	fp, r3
 80094dc:	d10a      	bne.n	80094f4 <_dtoa_r+0x6c4>
 80094de:	9b08      	ldr	r3, [sp, #32]
 80094e0:	3301      	adds	r3, #1
 80094e2:	9308      	str	r3, [sp, #32]
 80094e4:	2330      	movs	r3, #48	; 0x30
 80094e6:	f88b 3000 	strb.w	r3, [fp]
 80094ea:	465b      	mov	r3, fp
 80094ec:	781a      	ldrb	r2, [r3, #0]
 80094ee:	3201      	adds	r2, #1
 80094f0:	701a      	strb	r2, [r3, #0]
 80094f2:	e78c      	b.n	800940e <_dtoa_r+0x5de>
 80094f4:	461d      	mov	r5, r3
 80094f6:	e7ea      	b.n	80094ce <_dtoa_r+0x69e>
 80094f8:	2200      	movs	r2, #0
 80094fa:	4b9b      	ldr	r3, [pc, #620]	; (8009768 <_dtoa_r+0x938>)
 80094fc:	f7f7 f88c 	bl	8000618 <__aeabi_dmul>
 8009500:	2200      	movs	r2, #0
 8009502:	2300      	movs	r3, #0
 8009504:	4606      	mov	r6, r0
 8009506:	460f      	mov	r7, r1
 8009508:	f7f7 faee 	bl	8000ae8 <__aeabi_dcmpeq>
 800950c:	2800      	cmp	r0, #0
 800950e:	d09a      	beq.n	8009446 <_dtoa_r+0x616>
 8009510:	e7cb      	b.n	80094aa <_dtoa_r+0x67a>
 8009512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009514:	2a00      	cmp	r2, #0
 8009516:	f000 808b 	beq.w	8009630 <_dtoa_r+0x800>
 800951a:	9a06      	ldr	r2, [sp, #24]
 800951c:	2a01      	cmp	r2, #1
 800951e:	dc6e      	bgt.n	80095fe <_dtoa_r+0x7ce>
 8009520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009522:	2a00      	cmp	r2, #0
 8009524:	d067      	beq.n	80095f6 <_dtoa_r+0x7c6>
 8009526:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800952a:	9f07      	ldr	r7, [sp, #28]
 800952c:	9d05      	ldr	r5, [sp, #20]
 800952e:	9a05      	ldr	r2, [sp, #20]
 8009530:	2101      	movs	r1, #1
 8009532:	441a      	add	r2, r3
 8009534:	4620      	mov	r0, r4
 8009536:	9205      	str	r2, [sp, #20]
 8009538:	4498      	add	r8, r3
 800953a:	f000 fea2 	bl	800a282 <__i2b>
 800953e:	4606      	mov	r6, r0
 8009540:	2d00      	cmp	r5, #0
 8009542:	dd0c      	ble.n	800955e <_dtoa_r+0x72e>
 8009544:	f1b8 0f00 	cmp.w	r8, #0
 8009548:	dd09      	ble.n	800955e <_dtoa_r+0x72e>
 800954a:	4545      	cmp	r5, r8
 800954c:	9a05      	ldr	r2, [sp, #20]
 800954e:	462b      	mov	r3, r5
 8009550:	bfa8      	it	ge
 8009552:	4643      	movge	r3, r8
 8009554:	1ad2      	subs	r2, r2, r3
 8009556:	9205      	str	r2, [sp, #20]
 8009558:	1aed      	subs	r5, r5, r3
 800955a:	eba8 0803 	sub.w	r8, r8, r3
 800955e:	9b07      	ldr	r3, [sp, #28]
 8009560:	b1eb      	cbz	r3, 800959e <_dtoa_r+0x76e>
 8009562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009564:	2b00      	cmp	r3, #0
 8009566:	d067      	beq.n	8009638 <_dtoa_r+0x808>
 8009568:	b18f      	cbz	r7, 800958e <_dtoa_r+0x75e>
 800956a:	4631      	mov	r1, r6
 800956c:	463a      	mov	r2, r7
 800956e:	4620      	mov	r0, r4
 8009570:	f000 ff26 	bl	800a3c0 <__pow5mult>
 8009574:	9a04      	ldr	r2, [sp, #16]
 8009576:	4601      	mov	r1, r0
 8009578:	4606      	mov	r6, r0
 800957a:	4620      	mov	r0, r4
 800957c:	f000 fe8a 	bl	800a294 <__multiply>
 8009580:	9904      	ldr	r1, [sp, #16]
 8009582:	9008      	str	r0, [sp, #32]
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fd9e 	bl	800a0c6 <_Bfree>
 800958a:	9b08      	ldr	r3, [sp, #32]
 800958c:	9304      	str	r3, [sp, #16]
 800958e:	9b07      	ldr	r3, [sp, #28]
 8009590:	1bda      	subs	r2, r3, r7
 8009592:	d004      	beq.n	800959e <_dtoa_r+0x76e>
 8009594:	9904      	ldr	r1, [sp, #16]
 8009596:	4620      	mov	r0, r4
 8009598:	f000 ff12 	bl	800a3c0 <__pow5mult>
 800959c:	9004      	str	r0, [sp, #16]
 800959e:	2101      	movs	r1, #1
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 fe6e 	bl	800a282 <__i2b>
 80095a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095a8:	4607      	mov	r7, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f000 81d0 	beq.w	8009950 <_dtoa_r+0xb20>
 80095b0:	461a      	mov	r2, r3
 80095b2:	4601      	mov	r1, r0
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 ff03 	bl	800a3c0 <__pow5mult>
 80095ba:	9b06      	ldr	r3, [sp, #24]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	4607      	mov	r7, r0
 80095c0:	dc40      	bgt.n	8009644 <_dtoa_r+0x814>
 80095c2:	9b00      	ldr	r3, [sp, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d139      	bne.n	800963c <_dtoa_r+0x80c>
 80095c8:	9b01      	ldr	r3, [sp, #4]
 80095ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d136      	bne.n	8009640 <_dtoa_r+0x810>
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095d8:	0d1b      	lsrs	r3, r3, #20
 80095da:	051b      	lsls	r3, r3, #20
 80095dc:	b12b      	cbz	r3, 80095ea <_dtoa_r+0x7ba>
 80095de:	9b05      	ldr	r3, [sp, #20]
 80095e0:	3301      	adds	r3, #1
 80095e2:	9305      	str	r3, [sp, #20]
 80095e4:	f108 0801 	add.w	r8, r8, #1
 80095e8:	2301      	movs	r3, #1
 80095ea:	9307      	str	r3, [sp, #28]
 80095ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d12a      	bne.n	8009648 <_dtoa_r+0x818>
 80095f2:	2001      	movs	r0, #1
 80095f4:	e030      	b.n	8009658 <_dtoa_r+0x828>
 80095f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095fc:	e795      	b.n	800952a <_dtoa_r+0x6fa>
 80095fe:	9b07      	ldr	r3, [sp, #28]
 8009600:	f109 37ff 	add.w	r7, r9, #4294967295
 8009604:	42bb      	cmp	r3, r7
 8009606:	bfbf      	itttt	lt
 8009608:	9b07      	ldrlt	r3, [sp, #28]
 800960a:	9707      	strlt	r7, [sp, #28]
 800960c:	1afa      	sublt	r2, r7, r3
 800960e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009610:	bfbb      	ittet	lt
 8009612:	189b      	addlt	r3, r3, r2
 8009614:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009616:	1bdf      	subge	r7, r3, r7
 8009618:	2700      	movlt	r7, #0
 800961a:	f1b9 0f00 	cmp.w	r9, #0
 800961e:	bfb5      	itete	lt
 8009620:	9b05      	ldrlt	r3, [sp, #20]
 8009622:	9d05      	ldrge	r5, [sp, #20]
 8009624:	eba3 0509 	sublt.w	r5, r3, r9
 8009628:	464b      	movge	r3, r9
 800962a:	bfb8      	it	lt
 800962c:	2300      	movlt	r3, #0
 800962e:	e77e      	b.n	800952e <_dtoa_r+0x6fe>
 8009630:	9f07      	ldr	r7, [sp, #28]
 8009632:	9d05      	ldr	r5, [sp, #20]
 8009634:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009636:	e783      	b.n	8009540 <_dtoa_r+0x710>
 8009638:	9a07      	ldr	r2, [sp, #28]
 800963a:	e7ab      	b.n	8009594 <_dtoa_r+0x764>
 800963c:	2300      	movs	r3, #0
 800963e:	e7d4      	b.n	80095ea <_dtoa_r+0x7ba>
 8009640:	9b00      	ldr	r3, [sp, #0]
 8009642:	e7d2      	b.n	80095ea <_dtoa_r+0x7ba>
 8009644:	2300      	movs	r3, #0
 8009646:	9307      	str	r3, [sp, #28]
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800964e:	6918      	ldr	r0, [r3, #16]
 8009650:	f000 fdc9 	bl	800a1e6 <__hi0bits>
 8009654:	f1c0 0020 	rsb	r0, r0, #32
 8009658:	4440      	add	r0, r8
 800965a:	f010 001f 	ands.w	r0, r0, #31
 800965e:	d047      	beq.n	80096f0 <_dtoa_r+0x8c0>
 8009660:	f1c0 0320 	rsb	r3, r0, #32
 8009664:	2b04      	cmp	r3, #4
 8009666:	dd3b      	ble.n	80096e0 <_dtoa_r+0x8b0>
 8009668:	9b05      	ldr	r3, [sp, #20]
 800966a:	f1c0 001c 	rsb	r0, r0, #28
 800966e:	4403      	add	r3, r0
 8009670:	9305      	str	r3, [sp, #20]
 8009672:	4405      	add	r5, r0
 8009674:	4480      	add	r8, r0
 8009676:	9b05      	ldr	r3, [sp, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	dd05      	ble.n	8009688 <_dtoa_r+0x858>
 800967c:	461a      	mov	r2, r3
 800967e:	9904      	ldr	r1, [sp, #16]
 8009680:	4620      	mov	r0, r4
 8009682:	f000 feeb 	bl	800a45c <__lshift>
 8009686:	9004      	str	r0, [sp, #16]
 8009688:	f1b8 0f00 	cmp.w	r8, #0
 800968c:	dd05      	ble.n	800969a <_dtoa_r+0x86a>
 800968e:	4639      	mov	r1, r7
 8009690:	4642      	mov	r2, r8
 8009692:	4620      	mov	r0, r4
 8009694:	f000 fee2 	bl	800a45c <__lshift>
 8009698:	4607      	mov	r7, r0
 800969a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800969c:	b353      	cbz	r3, 80096f4 <_dtoa_r+0x8c4>
 800969e:	4639      	mov	r1, r7
 80096a0:	9804      	ldr	r0, [sp, #16]
 80096a2:	f000 ff2f 	bl	800a504 <__mcmp>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	da24      	bge.n	80096f4 <_dtoa_r+0x8c4>
 80096aa:	2300      	movs	r3, #0
 80096ac:	220a      	movs	r2, #10
 80096ae:	9904      	ldr	r1, [sp, #16]
 80096b0:	4620      	mov	r0, r4
 80096b2:	f000 fd1f 	bl	800a0f4 <__multadd>
 80096b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b8:	9004      	str	r0, [sp, #16]
 80096ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 814d 	beq.w	800995e <_dtoa_r+0xb2e>
 80096c4:	2300      	movs	r3, #0
 80096c6:	4631      	mov	r1, r6
 80096c8:	220a      	movs	r2, #10
 80096ca:	4620      	mov	r0, r4
 80096cc:	f000 fd12 	bl	800a0f4 <__multadd>
 80096d0:	9b02      	ldr	r3, [sp, #8]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	4606      	mov	r6, r0
 80096d6:	dc4f      	bgt.n	8009778 <_dtoa_r+0x948>
 80096d8:	9b06      	ldr	r3, [sp, #24]
 80096da:	2b02      	cmp	r3, #2
 80096dc:	dd4c      	ble.n	8009778 <_dtoa_r+0x948>
 80096de:	e011      	b.n	8009704 <_dtoa_r+0x8d4>
 80096e0:	d0c9      	beq.n	8009676 <_dtoa_r+0x846>
 80096e2:	9a05      	ldr	r2, [sp, #20]
 80096e4:	331c      	adds	r3, #28
 80096e6:	441a      	add	r2, r3
 80096e8:	9205      	str	r2, [sp, #20]
 80096ea:	441d      	add	r5, r3
 80096ec:	4498      	add	r8, r3
 80096ee:	e7c2      	b.n	8009676 <_dtoa_r+0x846>
 80096f0:	4603      	mov	r3, r0
 80096f2:	e7f6      	b.n	80096e2 <_dtoa_r+0x8b2>
 80096f4:	f1b9 0f00 	cmp.w	r9, #0
 80096f8:	dc38      	bgt.n	800976c <_dtoa_r+0x93c>
 80096fa:	9b06      	ldr	r3, [sp, #24]
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	dd35      	ble.n	800976c <_dtoa_r+0x93c>
 8009700:	f8cd 9008 	str.w	r9, [sp, #8]
 8009704:	9b02      	ldr	r3, [sp, #8]
 8009706:	b963      	cbnz	r3, 8009722 <_dtoa_r+0x8f2>
 8009708:	4639      	mov	r1, r7
 800970a:	2205      	movs	r2, #5
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fcf1 	bl	800a0f4 <__multadd>
 8009712:	4601      	mov	r1, r0
 8009714:	4607      	mov	r7, r0
 8009716:	9804      	ldr	r0, [sp, #16]
 8009718:	f000 fef4 	bl	800a504 <__mcmp>
 800971c:	2800      	cmp	r0, #0
 800971e:	f73f adcc 	bgt.w	80092ba <_dtoa_r+0x48a>
 8009722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009724:	465d      	mov	r5, fp
 8009726:	ea6f 0a03 	mvn.w	sl, r3
 800972a:	f04f 0900 	mov.w	r9, #0
 800972e:	4639      	mov	r1, r7
 8009730:	4620      	mov	r0, r4
 8009732:	f000 fcc8 	bl	800a0c6 <_Bfree>
 8009736:	2e00      	cmp	r6, #0
 8009738:	f43f aeb7 	beq.w	80094aa <_dtoa_r+0x67a>
 800973c:	f1b9 0f00 	cmp.w	r9, #0
 8009740:	d005      	beq.n	800974e <_dtoa_r+0x91e>
 8009742:	45b1      	cmp	r9, r6
 8009744:	d003      	beq.n	800974e <_dtoa_r+0x91e>
 8009746:	4649      	mov	r1, r9
 8009748:	4620      	mov	r0, r4
 800974a:	f000 fcbc 	bl	800a0c6 <_Bfree>
 800974e:	4631      	mov	r1, r6
 8009750:	4620      	mov	r0, r4
 8009752:	f000 fcb8 	bl	800a0c6 <_Bfree>
 8009756:	e6a8      	b.n	80094aa <_dtoa_r+0x67a>
 8009758:	2700      	movs	r7, #0
 800975a:	463e      	mov	r6, r7
 800975c:	e7e1      	b.n	8009722 <_dtoa_r+0x8f2>
 800975e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009762:	463e      	mov	r6, r7
 8009764:	e5a9      	b.n	80092ba <_dtoa_r+0x48a>
 8009766:	bf00      	nop
 8009768:	40240000 	.word	0x40240000
 800976c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800976e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 80fa 	beq.w	800996c <_dtoa_r+0xb3c>
 8009778:	2d00      	cmp	r5, #0
 800977a:	dd05      	ble.n	8009788 <_dtoa_r+0x958>
 800977c:	4631      	mov	r1, r6
 800977e:	462a      	mov	r2, r5
 8009780:	4620      	mov	r0, r4
 8009782:	f000 fe6b 	bl	800a45c <__lshift>
 8009786:	4606      	mov	r6, r0
 8009788:	9b07      	ldr	r3, [sp, #28]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d04c      	beq.n	8009828 <_dtoa_r+0x9f8>
 800978e:	6871      	ldr	r1, [r6, #4]
 8009790:	4620      	mov	r0, r4
 8009792:	f000 fc64 	bl	800a05e <_Balloc>
 8009796:	6932      	ldr	r2, [r6, #16]
 8009798:	3202      	adds	r2, #2
 800979a:	4605      	mov	r5, r0
 800979c:	0092      	lsls	r2, r2, #2
 800979e:	f106 010c 	add.w	r1, r6, #12
 80097a2:	300c      	adds	r0, #12
 80097a4:	f000 fc50 	bl	800a048 <memcpy>
 80097a8:	2201      	movs	r2, #1
 80097aa:	4629      	mov	r1, r5
 80097ac:	4620      	mov	r0, r4
 80097ae:	f000 fe55 	bl	800a45c <__lshift>
 80097b2:	9b00      	ldr	r3, [sp, #0]
 80097b4:	f8cd b014 	str.w	fp, [sp, #20]
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	46b1      	mov	r9, r6
 80097be:	9307      	str	r3, [sp, #28]
 80097c0:	4606      	mov	r6, r0
 80097c2:	4639      	mov	r1, r7
 80097c4:	9804      	ldr	r0, [sp, #16]
 80097c6:	f7ff faa5 	bl	8008d14 <quorem>
 80097ca:	4649      	mov	r1, r9
 80097cc:	4605      	mov	r5, r0
 80097ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80097d2:	9804      	ldr	r0, [sp, #16]
 80097d4:	f000 fe96 	bl	800a504 <__mcmp>
 80097d8:	4632      	mov	r2, r6
 80097da:	9000      	str	r0, [sp, #0]
 80097dc:	4639      	mov	r1, r7
 80097de:	4620      	mov	r0, r4
 80097e0:	f000 feaa 	bl	800a538 <__mdiff>
 80097e4:	68c3      	ldr	r3, [r0, #12]
 80097e6:	4602      	mov	r2, r0
 80097e8:	bb03      	cbnz	r3, 800982c <_dtoa_r+0x9fc>
 80097ea:	4601      	mov	r1, r0
 80097ec:	9008      	str	r0, [sp, #32]
 80097ee:	9804      	ldr	r0, [sp, #16]
 80097f0:	f000 fe88 	bl	800a504 <__mcmp>
 80097f4:	9a08      	ldr	r2, [sp, #32]
 80097f6:	4603      	mov	r3, r0
 80097f8:	4611      	mov	r1, r2
 80097fa:	4620      	mov	r0, r4
 80097fc:	9308      	str	r3, [sp, #32]
 80097fe:	f000 fc62 	bl	800a0c6 <_Bfree>
 8009802:	9b08      	ldr	r3, [sp, #32]
 8009804:	b9a3      	cbnz	r3, 8009830 <_dtoa_r+0xa00>
 8009806:	9a06      	ldr	r2, [sp, #24]
 8009808:	b992      	cbnz	r2, 8009830 <_dtoa_r+0xa00>
 800980a:	9a07      	ldr	r2, [sp, #28]
 800980c:	b982      	cbnz	r2, 8009830 <_dtoa_r+0xa00>
 800980e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009812:	d029      	beq.n	8009868 <_dtoa_r+0xa38>
 8009814:	9b00      	ldr	r3, [sp, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	dd01      	ble.n	800981e <_dtoa_r+0x9ee>
 800981a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800981e:	9b05      	ldr	r3, [sp, #20]
 8009820:	1c5d      	adds	r5, r3, #1
 8009822:	f883 8000 	strb.w	r8, [r3]
 8009826:	e782      	b.n	800972e <_dtoa_r+0x8fe>
 8009828:	4630      	mov	r0, r6
 800982a:	e7c2      	b.n	80097b2 <_dtoa_r+0x982>
 800982c:	2301      	movs	r3, #1
 800982e:	e7e3      	b.n	80097f8 <_dtoa_r+0x9c8>
 8009830:	9a00      	ldr	r2, [sp, #0]
 8009832:	2a00      	cmp	r2, #0
 8009834:	db04      	blt.n	8009840 <_dtoa_r+0xa10>
 8009836:	d125      	bne.n	8009884 <_dtoa_r+0xa54>
 8009838:	9a06      	ldr	r2, [sp, #24]
 800983a:	bb1a      	cbnz	r2, 8009884 <_dtoa_r+0xa54>
 800983c:	9a07      	ldr	r2, [sp, #28]
 800983e:	bb0a      	cbnz	r2, 8009884 <_dtoa_r+0xa54>
 8009840:	2b00      	cmp	r3, #0
 8009842:	ddec      	ble.n	800981e <_dtoa_r+0x9ee>
 8009844:	2201      	movs	r2, #1
 8009846:	9904      	ldr	r1, [sp, #16]
 8009848:	4620      	mov	r0, r4
 800984a:	f000 fe07 	bl	800a45c <__lshift>
 800984e:	4639      	mov	r1, r7
 8009850:	9004      	str	r0, [sp, #16]
 8009852:	f000 fe57 	bl	800a504 <__mcmp>
 8009856:	2800      	cmp	r0, #0
 8009858:	dc03      	bgt.n	8009862 <_dtoa_r+0xa32>
 800985a:	d1e0      	bne.n	800981e <_dtoa_r+0x9ee>
 800985c:	f018 0f01 	tst.w	r8, #1
 8009860:	d0dd      	beq.n	800981e <_dtoa_r+0x9ee>
 8009862:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009866:	d1d8      	bne.n	800981a <_dtoa_r+0x9ea>
 8009868:	9b05      	ldr	r3, [sp, #20]
 800986a:	9a05      	ldr	r2, [sp, #20]
 800986c:	1c5d      	adds	r5, r3, #1
 800986e:	2339      	movs	r3, #57	; 0x39
 8009870:	7013      	strb	r3, [r2, #0]
 8009872:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009876:	2b39      	cmp	r3, #57	; 0x39
 8009878:	f105 32ff 	add.w	r2, r5, #4294967295
 800987c:	d04f      	beq.n	800991e <_dtoa_r+0xaee>
 800987e:	3301      	adds	r3, #1
 8009880:	7013      	strb	r3, [r2, #0]
 8009882:	e754      	b.n	800972e <_dtoa_r+0x8fe>
 8009884:	9a05      	ldr	r2, [sp, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	f102 0501 	add.w	r5, r2, #1
 800988c:	dd06      	ble.n	800989c <_dtoa_r+0xa6c>
 800988e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009892:	d0e9      	beq.n	8009868 <_dtoa_r+0xa38>
 8009894:	f108 0801 	add.w	r8, r8, #1
 8009898:	9b05      	ldr	r3, [sp, #20]
 800989a:	e7c2      	b.n	8009822 <_dtoa_r+0x9f2>
 800989c:	9a02      	ldr	r2, [sp, #8]
 800989e:	f805 8c01 	strb.w	r8, [r5, #-1]
 80098a2:	eba5 030b 	sub.w	r3, r5, fp
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d021      	beq.n	80098ee <_dtoa_r+0xabe>
 80098aa:	2300      	movs	r3, #0
 80098ac:	220a      	movs	r2, #10
 80098ae:	9904      	ldr	r1, [sp, #16]
 80098b0:	4620      	mov	r0, r4
 80098b2:	f000 fc1f 	bl	800a0f4 <__multadd>
 80098b6:	45b1      	cmp	r9, r6
 80098b8:	9004      	str	r0, [sp, #16]
 80098ba:	f04f 0300 	mov.w	r3, #0
 80098be:	f04f 020a 	mov.w	r2, #10
 80098c2:	4649      	mov	r1, r9
 80098c4:	4620      	mov	r0, r4
 80098c6:	d105      	bne.n	80098d4 <_dtoa_r+0xaa4>
 80098c8:	f000 fc14 	bl	800a0f4 <__multadd>
 80098cc:	4681      	mov	r9, r0
 80098ce:	4606      	mov	r6, r0
 80098d0:	9505      	str	r5, [sp, #20]
 80098d2:	e776      	b.n	80097c2 <_dtoa_r+0x992>
 80098d4:	f000 fc0e 	bl	800a0f4 <__multadd>
 80098d8:	4631      	mov	r1, r6
 80098da:	4681      	mov	r9, r0
 80098dc:	2300      	movs	r3, #0
 80098de:	220a      	movs	r2, #10
 80098e0:	4620      	mov	r0, r4
 80098e2:	f000 fc07 	bl	800a0f4 <__multadd>
 80098e6:	4606      	mov	r6, r0
 80098e8:	e7f2      	b.n	80098d0 <_dtoa_r+0xaa0>
 80098ea:	f04f 0900 	mov.w	r9, #0
 80098ee:	2201      	movs	r2, #1
 80098f0:	9904      	ldr	r1, [sp, #16]
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 fdb2 	bl	800a45c <__lshift>
 80098f8:	4639      	mov	r1, r7
 80098fa:	9004      	str	r0, [sp, #16]
 80098fc:	f000 fe02 	bl	800a504 <__mcmp>
 8009900:	2800      	cmp	r0, #0
 8009902:	dcb6      	bgt.n	8009872 <_dtoa_r+0xa42>
 8009904:	d102      	bne.n	800990c <_dtoa_r+0xadc>
 8009906:	f018 0f01 	tst.w	r8, #1
 800990a:	d1b2      	bne.n	8009872 <_dtoa_r+0xa42>
 800990c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009910:	2b30      	cmp	r3, #48	; 0x30
 8009912:	f105 32ff 	add.w	r2, r5, #4294967295
 8009916:	f47f af0a 	bne.w	800972e <_dtoa_r+0x8fe>
 800991a:	4615      	mov	r5, r2
 800991c:	e7f6      	b.n	800990c <_dtoa_r+0xadc>
 800991e:	4593      	cmp	fp, r2
 8009920:	d105      	bne.n	800992e <_dtoa_r+0xafe>
 8009922:	2331      	movs	r3, #49	; 0x31
 8009924:	f10a 0a01 	add.w	sl, sl, #1
 8009928:	f88b 3000 	strb.w	r3, [fp]
 800992c:	e6ff      	b.n	800972e <_dtoa_r+0x8fe>
 800992e:	4615      	mov	r5, r2
 8009930:	e79f      	b.n	8009872 <_dtoa_r+0xa42>
 8009932:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009998 <_dtoa_r+0xb68>
 8009936:	e007      	b.n	8009948 <_dtoa_r+0xb18>
 8009938:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800993a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800999c <_dtoa_r+0xb6c>
 800993e:	b11b      	cbz	r3, 8009948 <_dtoa_r+0xb18>
 8009940:	f10b 0308 	add.w	r3, fp, #8
 8009944:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	4658      	mov	r0, fp
 800994a:	b017      	add	sp, #92	; 0x5c
 800994c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009950:	9b06      	ldr	r3, [sp, #24]
 8009952:	2b01      	cmp	r3, #1
 8009954:	f77f ae35 	ble.w	80095c2 <_dtoa_r+0x792>
 8009958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800995a:	9307      	str	r3, [sp, #28]
 800995c:	e649      	b.n	80095f2 <_dtoa_r+0x7c2>
 800995e:	9b02      	ldr	r3, [sp, #8]
 8009960:	2b00      	cmp	r3, #0
 8009962:	dc03      	bgt.n	800996c <_dtoa_r+0xb3c>
 8009964:	9b06      	ldr	r3, [sp, #24]
 8009966:	2b02      	cmp	r3, #2
 8009968:	f73f aecc 	bgt.w	8009704 <_dtoa_r+0x8d4>
 800996c:	465d      	mov	r5, fp
 800996e:	4639      	mov	r1, r7
 8009970:	9804      	ldr	r0, [sp, #16]
 8009972:	f7ff f9cf 	bl	8008d14 <quorem>
 8009976:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800997a:	f805 8b01 	strb.w	r8, [r5], #1
 800997e:	9a02      	ldr	r2, [sp, #8]
 8009980:	eba5 030b 	sub.w	r3, r5, fp
 8009984:	429a      	cmp	r2, r3
 8009986:	ddb0      	ble.n	80098ea <_dtoa_r+0xaba>
 8009988:	2300      	movs	r3, #0
 800998a:	220a      	movs	r2, #10
 800998c:	9904      	ldr	r1, [sp, #16]
 800998e:	4620      	mov	r0, r4
 8009990:	f000 fbb0 	bl	800a0f4 <__multadd>
 8009994:	9004      	str	r0, [sp, #16]
 8009996:	e7ea      	b.n	800996e <_dtoa_r+0xb3e>
 8009998:	0800c8c4 	.word	0x0800c8c4
 800999c:	0800c940 	.word	0x0800c940

080099a0 <rshift>:
 80099a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099a2:	6906      	ldr	r6, [r0, #16]
 80099a4:	114b      	asrs	r3, r1, #5
 80099a6:	429e      	cmp	r6, r3
 80099a8:	f100 0414 	add.w	r4, r0, #20
 80099ac:	dd30      	ble.n	8009a10 <rshift+0x70>
 80099ae:	f011 011f 	ands.w	r1, r1, #31
 80099b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80099b6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80099ba:	d108      	bne.n	80099ce <rshift+0x2e>
 80099bc:	4621      	mov	r1, r4
 80099be:	42b2      	cmp	r2, r6
 80099c0:	460b      	mov	r3, r1
 80099c2:	d211      	bcs.n	80099e8 <rshift+0x48>
 80099c4:	f852 3b04 	ldr.w	r3, [r2], #4
 80099c8:	f841 3b04 	str.w	r3, [r1], #4
 80099cc:	e7f7      	b.n	80099be <rshift+0x1e>
 80099ce:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80099d2:	f1c1 0c20 	rsb	ip, r1, #32
 80099d6:	40cd      	lsrs	r5, r1
 80099d8:	3204      	adds	r2, #4
 80099da:	4623      	mov	r3, r4
 80099dc:	42b2      	cmp	r2, r6
 80099de:	4617      	mov	r7, r2
 80099e0:	d30c      	bcc.n	80099fc <rshift+0x5c>
 80099e2:	601d      	str	r5, [r3, #0]
 80099e4:	b105      	cbz	r5, 80099e8 <rshift+0x48>
 80099e6:	3304      	adds	r3, #4
 80099e8:	1b1a      	subs	r2, r3, r4
 80099ea:	42a3      	cmp	r3, r4
 80099ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80099f0:	bf08      	it	eq
 80099f2:	2300      	moveq	r3, #0
 80099f4:	6102      	str	r2, [r0, #16]
 80099f6:	bf08      	it	eq
 80099f8:	6143      	streq	r3, [r0, #20]
 80099fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099fc:	683f      	ldr	r7, [r7, #0]
 80099fe:	fa07 f70c 	lsl.w	r7, r7, ip
 8009a02:	433d      	orrs	r5, r7
 8009a04:	f843 5b04 	str.w	r5, [r3], #4
 8009a08:	f852 5b04 	ldr.w	r5, [r2], #4
 8009a0c:	40cd      	lsrs	r5, r1
 8009a0e:	e7e5      	b.n	80099dc <rshift+0x3c>
 8009a10:	4623      	mov	r3, r4
 8009a12:	e7e9      	b.n	80099e8 <rshift+0x48>

08009a14 <__hexdig_fun>:
 8009a14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009a18:	2b09      	cmp	r3, #9
 8009a1a:	d802      	bhi.n	8009a22 <__hexdig_fun+0xe>
 8009a1c:	3820      	subs	r0, #32
 8009a1e:	b2c0      	uxtb	r0, r0
 8009a20:	4770      	bx	lr
 8009a22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a26:	2b05      	cmp	r3, #5
 8009a28:	d801      	bhi.n	8009a2e <__hexdig_fun+0x1a>
 8009a2a:	3847      	subs	r0, #71	; 0x47
 8009a2c:	e7f7      	b.n	8009a1e <__hexdig_fun+0xa>
 8009a2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a32:	2b05      	cmp	r3, #5
 8009a34:	d801      	bhi.n	8009a3a <__hexdig_fun+0x26>
 8009a36:	3827      	subs	r0, #39	; 0x27
 8009a38:	e7f1      	b.n	8009a1e <__hexdig_fun+0xa>
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	4770      	bx	lr

08009a3e <__gethex>:
 8009a3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a42:	b08b      	sub	sp, #44	; 0x2c
 8009a44:	468a      	mov	sl, r1
 8009a46:	9002      	str	r0, [sp, #8]
 8009a48:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009a4a:	9306      	str	r3, [sp, #24]
 8009a4c:	4690      	mov	r8, r2
 8009a4e:	f000 fad0 	bl	8009ff2 <__localeconv_l>
 8009a52:	6803      	ldr	r3, [r0, #0]
 8009a54:	9303      	str	r3, [sp, #12]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7f6 fbca 	bl	80001f0 <strlen>
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	9001      	str	r0, [sp, #4]
 8009a60:	4403      	add	r3, r0
 8009a62:	f04f 0b00 	mov.w	fp, #0
 8009a66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009a6a:	9307      	str	r3, [sp, #28]
 8009a6c:	f8da 3000 	ldr.w	r3, [sl]
 8009a70:	3302      	adds	r3, #2
 8009a72:	461f      	mov	r7, r3
 8009a74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a78:	2830      	cmp	r0, #48	; 0x30
 8009a7a:	d06c      	beq.n	8009b56 <__gethex+0x118>
 8009a7c:	f7ff ffca 	bl	8009a14 <__hexdig_fun>
 8009a80:	4604      	mov	r4, r0
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d16a      	bne.n	8009b5c <__gethex+0x11e>
 8009a86:	9a01      	ldr	r2, [sp, #4]
 8009a88:	9903      	ldr	r1, [sp, #12]
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	f001 f8fe 	bl	800ac8c <strncmp>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d166      	bne.n	8009b62 <__gethex+0x124>
 8009a94:	9b01      	ldr	r3, [sp, #4]
 8009a96:	5cf8      	ldrb	r0, [r7, r3]
 8009a98:	18fe      	adds	r6, r7, r3
 8009a9a:	f7ff ffbb 	bl	8009a14 <__hexdig_fun>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d062      	beq.n	8009b68 <__gethex+0x12a>
 8009aa2:	4633      	mov	r3, r6
 8009aa4:	7818      	ldrb	r0, [r3, #0]
 8009aa6:	2830      	cmp	r0, #48	; 0x30
 8009aa8:	461f      	mov	r7, r3
 8009aaa:	f103 0301 	add.w	r3, r3, #1
 8009aae:	d0f9      	beq.n	8009aa4 <__gethex+0x66>
 8009ab0:	f7ff ffb0 	bl	8009a14 <__hexdig_fun>
 8009ab4:	fab0 f580 	clz	r5, r0
 8009ab8:	096d      	lsrs	r5, r5, #5
 8009aba:	4634      	mov	r4, r6
 8009abc:	f04f 0b01 	mov.w	fp, #1
 8009ac0:	463a      	mov	r2, r7
 8009ac2:	4616      	mov	r6, r2
 8009ac4:	3201      	adds	r2, #1
 8009ac6:	7830      	ldrb	r0, [r6, #0]
 8009ac8:	f7ff ffa4 	bl	8009a14 <__hexdig_fun>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d1f8      	bne.n	8009ac2 <__gethex+0x84>
 8009ad0:	9a01      	ldr	r2, [sp, #4]
 8009ad2:	9903      	ldr	r1, [sp, #12]
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f001 f8d9 	bl	800ac8c <strncmp>
 8009ada:	b950      	cbnz	r0, 8009af2 <__gethex+0xb4>
 8009adc:	b954      	cbnz	r4, 8009af4 <__gethex+0xb6>
 8009ade:	9b01      	ldr	r3, [sp, #4]
 8009ae0:	18f4      	adds	r4, r6, r3
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	4616      	mov	r6, r2
 8009ae6:	3201      	adds	r2, #1
 8009ae8:	7830      	ldrb	r0, [r6, #0]
 8009aea:	f7ff ff93 	bl	8009a14 <__hexdig_fun>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d1f8      	bne.n	8009ae4 <__gethex+0xa6>
 8009af2:	b10c      	cbz	r4, 8009af8 <__gethex+0xba>
 8009af4:	1ba4      	subs	r4, r4, r6
 8009af6:	00a4      	lsls	r4, r4, #2
 8009af8:	7833      	ldrb	r3, [r6, #0]
 8009afa:	2b50      	cmp	r3, #80	; 0x50
 8009afc:	d001      	beq.n	8009b02 <__gethex+0xc4>
 8009afe:	2b70      	cmp	r3, #112	; 0x70
 8009b00:	d140      	bne.n	8009b84 <__gethex+0x146>
 8009b02:	7873      	ldrb	r3, [r6, #1]
 8009b04:	2b2b      	cmp	r3, #43	; 0x2b
 8009b06:	d031      	beq.n	8009b6c <__gethex+0x12e>
 8009b08:	2b2d      	cmp	r3, #45	; 0x2d
 8009b0a:	d033      	beq.n	8009b74 <__gethex+0x136>
 8009b0c:	1c71      	adds	r1, r6, #1
 8009b0e:	f04f 0900 	mov.w	r9, #0
 8009b12:	7808      	ldrb	r0, [r1, #0]
 8009b14:	f7ff ff7e 	bl	8009a14 <__hexdig_fun>
 8009b18:	1e43      	subs	r3, r0, #1
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b18      	cmp	r3, #24
 8009b1e:	d831      	bhi.n	8009b84 <__gethex+0x146>
 8009b20:	f1a0 0210 	sub.w	r2, r0, #16
 8009b24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b28:	f7ff ff74 	bl	8009a14 <__hexdig_fun>
 8009b2c:	1e43      	subs	r3, r0, #1
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b18      	cmp	r3, #24
 8009b32:	d922      	bls.n	8009b7a <__gethex+0x13c>
 8009b34:	f1b9 0f00 	cmp.w	r9, #0
 8009b38:	d000      	beq.n	8009b3c <__gethex+0xfe>
 8009b3a:	4252      	negs	r2, r2
 8009b3c:	4414      	add	r4, r2
 8009b3e:	f8ca 1000 	str.w	r1, [sl]
 8009b42:	b30d      	cbz	r5, 8009b88 <__gethex+0x14a>
 8009b44:	f1bb 0f00 	cmp.w	fp, #0
 8009b48:	bf0c      	ite	eq
 8009b4a:	2706      	moveq	r7, #6
 8009b4c:	2700      	movne	r7, #0
 8009b4e:	4638      	mov	r0, r7
 8009b50:	b00b      	add	sp, #44	; 0x2c
 8009b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b56:	f10b 0b01 	add.w	fp, fp, #1
 8009b5a:	e78a      	b.n	8009a72 <__gethex+0x34>
 8009b5c:	2500      	movs	r5, #0
 8009b5e:	462c      	mov	r4, r5
 8009b60:	e7ae      	b.n	8009ac0 <__gethex+0x82>
 8009b62:	463e      	mov	r6, r7
 8009b64:	2501      	movs	r5, #1
 8009b66:	e7c7      	b.n	8009af8 <__gethex+0xba>
 8009b68:	4604      	mov	r4, r0
 8009b6a:	e7fb      	b.n	8009b64 <__gethex+0x126>
 8009b6c:	f04f 0900 	mov.w	r9, #0
 8009b70:	1cb1      	adds	r1, r6, #2
 8009b72:	e7ce      	b.n	8009b12 <__gethex+0xd4>
 8009b74:	f04f 0901 	mov.w	r9, #1
 8009b78:	e7fa      	b.n	8009b70 <__gethex+0x132>
 8009b7a:	230a      	movs	r3, #10
 8009b7c:	fb03 0202 	mla	r2, r3, r2, r0
 8009b80:	3a10      	subs	r2, #16
 8009b82:	e7cf      	b.n	8009b24 <__gethex+0xe6>
 8009b84:	4631      	mov	r1, r6
 8009b86:	e7da      	b.n	8009b3e <__gethex+0x100>
 8009b88:	1bf3      	subs	r3, r6, r7
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	2b07      	cmp	r3, #7
 8009b90:	dc49      	bgt.n	8009c26 <__gethex+0x1e8>
 8009b92:	9802      	ldr	r0, [sp, #8]
 8009b94:	f000 fa63 	bl	800a05e <_Balloc>
 8009b98:	9b01      	ldr	r3, [sp, #4]
 8009b9a:	f100 0914 	add.w	r9, r0, #20
 8009b9e:	f04f 0b00 	mov.w	fp, #0
 8009ba2:	f1c3 0301 	rsb	r3, r3, #1
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	f8cd 9010 	str.w	r9, [sp, #16]
 8009bac:	46da      	mov	sl, fp
 8009bae:	9308      	str	r3, [sp, #32]
 8009bb0:	42b7      	cmp	r7, r6
 8009bb2:	d33b      	bcc.n	8009c2c <__gethex+0x1ee>
 8009bb4:	9804      	ldr	r0, [sp, #16]
 8009bb6:	f840 ab04 	str.w	sl, [r0], #4
 8009bba:	eba0 0009 	sub.w	r0, r0, r9
 8009bbe:	1080      	asrs	r0, r0, #2
 8009bc0:	6128      	str	r0, [r5, #16]
 8009bc2:	0147      	lsls	r7, r0, #5
 8009bc4:	4650      	mov	r0, sl
 8009bc6:	f000 fb0e 	bl	800a1e6 <__hi0bits>
 8009bca:	f8d8 6000 	ldr.w	r6, [r8]
 8009bce:	1a3f      	subs	r7, r7, r0
 8009bd0:	42b7      	cmp	r7, r6
 8009bd2:	dd64      	ble.n	8009c9e <__gethex+0x260>
 8009bd4:	1bbf      	subs	r7, r7, r6
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	4628      	mov	r0, r5
 8009bda:	f000 fe1d 	bl	800a818 <__any_on>
 8009bde:	4682      	mov	sl, r0
 8009be0:	b178      	cbz	r0, 8009c02 <__gethex+0x1c4>
 8009be2:	1e7b      	subs	r3, r7, #1
 8009be4:	1159      	asrs	r1, r3, #5
 8009be6:	f003 021f 	and.w	r2, r3, #31
 8009bea:	f04f 0a01 	mov.w	sl, #1
 8009bee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009bf2:	fa0a f202 	lsl.w	r2, sl, r2
 8009bf6:	420a      	tst	r2, r1
 8009bf8:	d003      	beq.n	8009c02 <__gethex+0x1c4>
 8009bfa:	4553      	cmp	r3, sl
 8009bfc:	dc46      	bgt.n	8009c8c <__gethex+0x24e>
 8009bfe:	f04f 0a02 	mov.w	sl, #2
 8009c02:	4639      	mov	r1, r7
 8009c04:	4628      	mov	r0, r5
 8009c06:	f7ff fecb 	bl	80099a0 <rshift>
 8009c0a:	443c      	add	r4, r7
 8009c0c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	da52      	bge.n	8009cba <__gethex+0x27c>
 8009c14:	4629      	mov	r1, r5
 8009c16:	9802      	ldr	r0, [sp, #8]
 8009c18:	f000 fa55 	bl	800a0c6 <_Bfree>
 8009c1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c1e:	2300      	movs	r3, #0
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	27a3      	movs	r7, #163	; 0xa3
 8009c24:	e793      	b.n	8009b4e <__gethex+0x110>
 8009c26:	3101      	adds	r1, #1
 8009c28:	105b      	asrs	r3, r3, #1
 8009c2a:	e7b0      	b.n	8009b8e <__gethex+0x150>
 8009c2c:	1e73      	subs	r3, r6, #1
 8009c2e:	9305      	str	r3, [sp, #20]
 8009c30:	9a07      	ldr	r2, [sp, #28]
 8009c32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d018      	beq.n	8009c6c <__gethex+0x22e>
 8009c3a:	f1bb 0f20 	cmp.w	fp, #32
 8009c3e:	d107      	bne.n	8009c50 <__gethex+0x212>
 8009c40:	9b04      	ldr	r3, [sp, #16]
 8009c42:	f8c3 a000 	str.w	sl, [r3]
 8009c46:	3304      	adds	r3, #4
 8009c48:	f04f 0a00 	mov.w	sl, #0
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	46d3      	mov	fp, sl
 8009c50:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009c54:	f7ff fede 	bl	8009a14 <__hexdig_fun>
 8009c58:	f000 000f 	and.w	r0, r0, #15
 8009c5c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009c60:	ea4a 0a00 	orr.w	sl, sl, r0
 8009c64:	f10b 0b04 	add.w	fp, fp, #4
 8009c68:	9b05      	ldr	r3, [sp, #20]
 8009c6a:	e00d      	b.n	8009c88 <__gethex+0x24a>
 8009c6c:	9b05      	ldr	r3, [sp, #20]
 8009c6e:	9a08      	ldr	r2, [sp, #32]
 8009c70:	4413      	add	r3, r2
 8009c72:	42bb      	cmp	r3, r7
 8009c74:	d3e1      	bcc.n	8009c3a <__gethex+0x1fc>
 8009c76:	4618      	mov	r0, r3
 8009c78:	9a01      	ldr	r2, [sp, #4]
 8009c7a:	9903      	ldr	r1, [sp, #12]
 8009c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7e:	f001 f805 	bl	800ac8c <strncmp>
 8009c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d1d8      	bne.n	8009c3a <__gethex+0x1fc>
 8009c88:	461e      	mov	r6, r3
 8009c8a:	e791      	b.n	8009bb0 <__gethex+0x172>
 8009c8c:	1eb9      	subs	r1, r7, #2
 8009c8e:	4628      	mov	r0, r5
 8009c90:	f000 fdc2 	bl	800a818 <__any_on>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d0b2      	beq.n	8009bfe <__gethex+0x1c0>
 8009c98:	f04f 0a03 	mov.w	sl, #3
 8009c9c:	e7b1      	b.n	8009c02 <__gethex+0x1c4>
 8009c9e:	da09      	bge.n	8009cb4 <__gethex+0x276>
 8009ca0:	1bf7      	subs	r7, r6, r7
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	463a      	mov	r2, r7
 8009ca6:	9802      	ldr	r0, [sp, #8]
 8009ca8:	f000 fbd8 	bl	800a45c <__lshift>
 8009cac:	1be4      	subs	r4, r4, r7
 8009cae:	4605      	mov	r5, r0
 8009cb0:	f100 0914 	add.w	r9, r0, #20
 8009cb4:	f04f 0a00 	mov.w	sl, #0
 8009cb8:	e7a8      	b.n	8009c0c <__gethex+0x1ce>
 8009cba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009cbe:	42a0      	cmp	r0, r4
 8009cc0:	dd6a      	ble.n	8009d98 <__gethex+0x35a>
 8009cc2:	1b04      	subs	r4, r0, r4
 8009cc4:	42a6      	cmp	r6, r4
 8009cc6:	dc2e      	bgt.n	8009d26 <__gethex+0x2e8>
 8009cc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d022      	beq.n	8009d16 <__gethex+0x2d8>
 8009cd0:	2b03      	cmp	r3, #3
 8009cd2:	d024      	beq.n	8009d1e <__gethex+0x2e0>
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d115      	bne.n	8009d04 <__gethex+0x2c6>
 8009cd8:	42a6      	cmp	r6, r4
 8009cda:	d113      	bne.n	8009d04 <__gethex+0x2c6>
 8009cdc:	2e01      	cmp	r6, #1
 8009cde:	dc0b      	bgt.n	8009cf8 <__gethex+0x2ba>
 8009ce0:	9a06      	ldr	r2, [sp, #24]
 8009ce2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	2301      	movs	r3, #1
 8009cea:	612b      	str	r3, [r5, #16]
 8009cec:	f8c9 3000 	str.w	r3, [r9]
 8009cf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cf2:	2762      	movs	r7, #98	; 0x62
 8009cf4:	601d      	str	r5, [r3, #0]
 8009cf6:	e72a      	b.n	8009b4e <__gethex+0x110>
 8009cf8:	1e71      	subs	r1, r6, #1
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	f000 fd8c 	bl	800a818 <__any_on>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d1ed      	bne.n	8009ce0 <__gethex+0x2a2>
 8009d04:	4629      	mov	r1, r5
 8009d06:	9802      	ldr	r0, [sp, #8]
 8009d08:	f000 f9dd 	bl	800a0c6 <_Bfree>
 8009d0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d0e:	2300      	movs	r3, #0
 8009d10:	6013      	str	r3, [r2, #0]
 8009d12:	2750      	movs	r7, #80	; 0x50
 8009d14:	e71b      	b.n	8009b4e <__gethex+0x110>
 8009d16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0e1      	beq.n	8009ce0 <__gethex+0x2a2>
 8009d1c:	e7f2      	b.n	8009d04 <__gethex+0x2c6>
 8009d1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1dd      	bne.n	8009ce0 <__gethex+0x2a2>
 8009d24:	e7ee      	b.n	8009d04 <__gethex+0x2c6>
 8009d26:	1e67      	subs	r7, r4, #1
 8009d28:	f1ba 0f00 	cmp.w	sl, #0
 8009d2c:	d131      	bne.n	8009d92 <__gethex+0x354>
 8009d2e:	b127      	cbz	r7, 8009d3a <__gethex+0x2fc>
 8009d30:	4639      	mov	r1, r7
 8009d32:	4628      	mov	r0, r5
 8009d34:	f000 fd70 	bl	800a818 <__any_on>
 8009d38:	4682      	mov	sl, r0
 8009d3a:	117a      	asrs	r2, r7, #5
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	f007 071f 	and.w	r7, r7, #31
 8009d42:	fa03 f707 	lsl.w	r7, r3, r7
 8009d46:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	421f      	tst	r7, r3
 8009d4e:	4628      	mov	r0, r5
 8009d50:	bf18      	it	ne
 8009d52:	f04a 0a02 	orrne.w	sl, sl, #2
 8009d56:	1b36      	subs	r6, r6, r4
 8009d58:	f7ff fe22 	bl	80099a0 <rshift>
 8009d5c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009d60:	2702      	movs	r7, #2
 8009d62:	f1ba 0f00 	cmp.w	sl, #0
 8009d66:	d048      	beq.n	8009dfa <__gethex+0x3bc>
 8009d68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d015      	beq.n	8009d9c <__gethex+0x35e>
 8009d70:	2b03      	cmp	r3, #3
 8009d72:	d017      	beq.n	8009da4 <__gethex+0x366>
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d109      	bne.n	8009d8c <__gethex+0x34e>
 8009d78:	f01a 0f02 	tst.w	sl, #2
 8009d7c:	d006      	beq.n	8009d8c <__gethex+0x34e>
 8009d7e:	f8d9 3000 	ldr.w	r3, [r9]
 8009d82:	ea4a 0a03 	orr.w	sl, sl, r3
 8009d86:	f01a 0f01 	tst.w	sl, #1
 8009d8a:	d10e      	bne.n	8009daa <__gethex+0x36c>
 8009d8c:	f047 0710 	orr.w	r7, r7, #16
 8009d90:	e033      	b.n	8009dfa <__gethex+0x3bc>
 8009d92:	f04f 0a01 	mov.w	sl, #1
 8009d96:	e7d0      	b.n	8009d3a <__gethex+0x2fc>
 8009d98:	2701      	movs	r7, #1
 8009d9a:	e7e2      	b.n	8009d62 <__gethex+0x324>
 8009d9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d9e:	f1c3 0301 	rsb	r3, r3, #1
 8009da2:	9315      	str	r3, [sp, #84]	; 0x54
 8009da4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0f0      	beq.n	8009d8c <__gethex+0x34e>
 8009daa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009dae:	f105 0314 	add.w	r3, r5, #20
 8009db2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009db6:	eb03 010a 	add.w	r1, r3, sl
 8009dba:	f04f 0c00 	mov.w	ip, #0
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dc4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009dc8:	d01c      	beq.n	8009e04 <__gethex+0x3c6>
 8009dca:	3201      	adds	r2, #1
 8009dcc:	6002      	str	r2, [r0, #0]
 8009dce:	2f02      	cmp	r7, #2
 8009dd0:	f105 0314 	add.w	r3, r5, #20
 8009dd4:	d138      	bne.n	8009e48 <__gethex+0x40a>
 8009dd6:	f8d8 2000 	ldr.w	r2, [r8]
 8009dda:	3a01      	subs	r2, #1
 8009ddc:	42b2      	cmp	r2, r6
 8009dde:	d10a      	bne.n	8009df6 <__gethex+0x3b8>
 8009de0:	1171      	asrs	r1, r6, #5
 8009de2:	2201      	movs	r2, #1
 8009de4:	f006 061f 	and.w	r6, r6, #31
 8009de8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009dec:	fa02 f606 	lsl.w	r6, r2, r6
 8009df0:	421e      	tst	r6, r3
 8009df2:	bf18      	it	ne
 8009df4:	4617      	movne	r7, r2
 8009df6:	f047 0720 	orr.w	r7, r7, #32
 8009dfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009dfc:	601d      	str	r5, [r3, #0]
 8009dfe:	9b06      	ldr	r3, [sp, #24]
 8009e00:	601c      	str	r4, [r3, #0]
 8009e02:	e6a4      	b.n	8009b4e <__gethex+0x110>
 8009e04:	4299      	cmp	r1, r3
 8009e06:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e0a:	d8d8      	bhi.n	8009dbe <__gethex+0x380>
 8009e0c:	68ab      	ldr	r3, [r5, #8]
 8009e0e:	4599      	cmp	r9, r3
 8009e10:	db12      	blt.n	8009e38 <__gethex+0x3fa>
 8009e12:	6869      	ldr	r1, [r5, #4]
 8009e14:	9802      	ldr	r0, [sp, #8]
 8009e16:	3101      	adds	r1, #1
 8009e18:	f000 f921 	bl	800a05e <_Balloc>
 8009e1c:	692a      	ldr	r2, [r5, #16]
 8009e1e:	3202      	adds	r2, #2
 8009e20:	f105 010c 	add.w	r1, r5, #12
 8009e24:	4683      	mov	fp, r0
 8009e26:	0092      	lsls	r2, r2, #2
 8009e28:	300c      	adds	r0, #12
 8009e2a:	f000 f90d 	bl	800a048 <memcpy>
 8009e2e:	4629      	mov	r1, r5
 8009e30:	9802      	ldr	r0, [sp, #8]
 8009e32:	f000 f948 	bl	800a0c6 <_Bfree>
 8009e36:	465d      	mov	r5, fp
 8009e38:	692b      	ldr	r3, [r5, #16]
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009e40:	612a      	str	r2, [r5, #16]
 8009e42:	2201      	movs	r2, #1
 8009e44:	615a      	str	r2, [r3, #20]
 8009e46:	e7c2      	b.n	8009dce <__gethex+0x390>
 8009e48:	692a      	ldr	r2, [r5, #16]
 8009e4a:	454a      	cmp	r2, r9
 8009e4c:	dd0b      	ble.n	8009e66 <__gethex+0x428>
 8009e4e:	2101      	movs	r1, #1
 8009e50:	4628      	mov	r0, r5
 8009e52:	f7ff fda5 	bl	80099a0 <rshift>
 8009e56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e5a:	3401      	adds	r4, #1
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	f6ff aed9 	blt.w	8009c14 <__gethex+0x1d6>
 8009e62:	2701      	movs	r7, #1
 8009e64:	e7c7      	b.n	8009df6 <__gethex+0x3b8>
 8009e66:	f016 061f 	ands.w	r6, r6, #31
 8009e6a:	d0fa      	beq.n	8009e62 <__gethex+0x424>
 8009e6c:	449a      	add	sl, r3
 8009e6e:	f1c6 0620 	rsb	r6, r6, #32
 8009e72:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009e76:	f000 f9b6 	bl	800a1e6 <__hi0bits>
 8009e7a:	42b0      	cmp	r0, r6
 8009e7c:	dbe7      	blt.n	8009e4e <__gethex+0x410>
 8009e7e:	e7f0      	b.n	8009e62 <__gethex+0x424>

08009e80 <L_shift>:
 8009e80:	f1c2 0208 	rsb	r2, r2, #8
 8009e84:	0092      	lsls	r2, r2, #2
 8009e86:	b570      	push	{r4, r5, r6, lr}
 8009e88:	f1c2 0620 	rsb	r6, r2, #32
 8009e8c:	6843      	ldr	r3, [r0, #4]
 8009e8e:	6804      	ldr	r4, [r0, #0]
 8009e90:	fa03 f506 	lsl.w	r5, r3, r6
 8009e94:	432c      	orrs	r4, r5
 8009e96:	40d3      	lsrs	r3, r2
 8009e98:	6004      	str	r4, [r0, #0]
 8009e9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e9e:	4288      	cmp	r0, r1
 8009ea0:	d3f4      	bcc.n	8009e8c <L_shift+0xc>
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}

08009ea4 <__match>:
 8009ea4:	b530      	push	{r4, r5, lr}
 8009ea6:	6803      	ldr	r3, [r0, #0]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eae:	b914      	cbnz	r4, 8009eb6 <__match+0x12>
 8009eb0:	6003      	str	r3, [r0, #0]
 8009eb2:	2001      	movs	r0, #1
 8009eb4:	bd30      	pop	{r4, r5, pc}
 8009eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009ebe:	2d19      	cmp	r5, #25
 8009ec0:	bf98      	it	ls
 8009ec2:	3220      	addls	r2, #32
 8009ec4:	42a2      	cmp	r2, r4
 8009ec6:	d0f0      	beq.n	8009eaa <__match+0x6>
 8009ec8:	2000      	movs	r0, #0
 8009eca:	e7f3      	b.n	8009eb4 <__match+0x10>

08009ecc <__hexnan>:
 8009ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed0:	680b      	ldr	r3, [r1, #0]
 8009ed2:	6801      	ldr	r1, [r0, #0]
 8009ed4:	115f      	asrs	r7, r3, #5
 8009ed6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009eda:	f013 031f 	ands.w	r3, r3, #31
 8009ede:	b087      	sub	sp, #28
 8009ee0:	bf18      	it	ne
 8009ee2:	3704      	addne	r7, #4
 8009ee4:	2500      	movs	r5, #0
 8009ee6:	1f3e      	subs	r6, r7, #4
 8009ee8:	4682      	mov	sl, r0
 8009eea:	4690      	mov	r8, r2
 8009eec:	9301      	str	r3, [sp, #4]
 8009eee:	f847 5c04 	str.w	r5, [r7, #-4]
 8009ef2:	46b1      	mov	r9, r6
 8009ef4:	4634      	mov	r4, r6
 8009ef6:	9502      	str	r5, [sp, #8]
 8009ef8:	46ab      	mov	fp, r5
 8009efa:	784a      	ldrb	r2, [r1, #1]
 8009efc:	1c4b      	adds	r3, r1, #1
 8009efe:	9303      	str	r3, [sp, #12]
 8009f00:	b342      	cbz	r2, 8009f54 <__hexnan+0x88>
 8009f02:	4610      	mov	r0, r2
 8009f04:	9105      	str	r1, [sp, #20]
 8009f06:	9204      	str	r2, [sp, #16]
 8009f08:	f7ff fd84 	bl	8009a14 <__hexdig_fun>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d143      	bne.n	8009f98 <__hexnan+0xcc>
 8009f10:	9a04      	ldr	r2, [sp, #16]
 8009f12:	9905      	ldr	r1, [sp, #20]
 8009f14:	2a20      	cmp	r2, #32
 8009f16:	d818      	bhi.n	8009f4a <__hexnan+0x7e>
 8009f18:	9b02      	ldr	r3, [sp, #8]
 8009f1a:	459b      	cmp	fp, r3
 8009f1c:	dd13      	ble.n	8009f46 <__hexnan+0x7a>
 8009f1e:	454c      	cmp	r4, r9
 8009f20:	d206      	bcs.n	8009f30 <__hexnan+0x64>
 8009f22:	2d07      	cmp	r5, #7
 8009f24:	dc04      	bgt.n	8009f30 <__hexnan+0x64>
 8009f26:	462a      	mov	r2, r5
 8009f28:	4649      	mov	r1, r9
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f7ff ffa8 	bl	8009e80 <L_shift>
 8009f30:	4544      	cmp	r4, r8
 8009f32:	d944      	bls.n	8009fbe <__hexnan+0xf2>
 8009f34:	2300      	movs	r3, #0
 8009f36:	f1a4 0904 	sub.w	r9, r4, #4
 8009f3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f3e:	f8cd b008 	str.w	fp, [sp, #8]
 8009f42:	464c      	mov	r4, r9
 8009f44:	461d      	mov	r5, r3
 8009f46:	9903      	ldr	r1, [sp, #12]
 8009f48:	e7d7      	b.n	8009efa <__hexnan+0x2e>
 8009f4a:	2a29      	cmp	r2, #41	; 0x29
 8009f4c:	d14a      	bne.n	8009fe4 <__hexnan+0x118>
 8009f4e:	3102      	adds	r1, #2
 8009f50:	f8ca 1000 	str.w	r1, [sl]
 8009f54:	f1bb 0f00 	cmp.w	fp, #0
 8009f58:	d044      	beq.n	8009fe4 <__hexnan+0x118>
 8009f5a:	454c      	cmp	r4, r9
 8009f5c:	d206      	bcs.n	8009f6c <__hexnan+0xa0>
 8009f5e:	2d07      	cmp	r5, #7
 8009f60:	dc04      	bgt.n	8009f6c <__hexnan+0xa0>
 8009f62:	462a      	mov	r2, r5
 8009f64:	4649      	mov	r1, r9
 8009f66:	4620      	mov	r0, r4
 8009f68:	f7ff ff8a 	bl	8009e80 <L_shift>
 8009f6c:	4544      	cmp	r4, r8
 8009f6e:	d928      	bls.n	8009fc2 <__hexnan+0xf6>
 8009f70:	4643      	mov	r3, r8
 8009f72:	f854 2b04 	ldr.w	r2, [r4], #4
 8009f76:	f843 2b04 	str.w	r2, [r3], #4
 8009f7a:	42a6      	cmp	r6, r4
 8009f7c:	d2f9      	bcs.n	8009f72 <__hexnan+0xa6>
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f843 2b04 	str.w	r2, [r3], #4
 8009f84:	429e      	cmp	r6, r3
 8009f86:	d2fb      	bcs.n	8009f80 <__hexnan+0xb4>
 8009f88:	6833      	ldr	r3, [r6, #0]
 8009f8a:	b91b      	cbnz	r3, 8009f94 <__hexnan+0xc8>
 8009f8c:	4546      	cmp	r6, r8
 8009f8e:	d127      	bne.n	8009fe0 <__hexnan+0x114>
 8009f90:	2301      	movs	r3, #1
 8009f92:	6033      	str	r3, [r6, #0]
 8009f94:	2005      	movs	r0, #5
 8009f96:	e026      	b.n	8009fe6 <__hexnan+0x11a>
 8009f98:	3501      	adds	r5, #1
 8009f9a:	2d08      	cmp	r5, #8
 8009f9c:	f10b 0b01 	add.w	fp, fp, #1
 8009fa0:	dd06      	ble.n	8009fb0 <__hexnan+0xe4>
 8009fa2:	4544      	cmp	r4, r8
 8009fa4:	d9cf      	bls.n	8009f46 <__hexnan+0x7a>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fac:	2501      	movs	r5, #1
 8009fae:	3c04      	subs	r4, #4
 8009fb0:	6822      	ldr	r2, [r4, #0]
 8009fb2:	f000 000f 	and.w	r0, r0, #15
 8009fb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009fba:	6020      	str	r0, [r4, #0]
 8009fbc:	e7c3      	b.n	8009f46 <__hexnan+0x7a>
 8009fbe:	2508      	movs	r5, #8
 8009fc0:	e7c1      	b.n	8009f46 <__hexnan+0x7a>
 8009fc2:	9b01      	ldr	r3, [sp, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d0df      	beq.n	8009f88 <__hexnan+0xbc>
 8009fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fcc:	f1c3 0320 	rsb	r3, r3, #32
 8009fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009fd8:	401a      	ands	r2, r3
 8009fda:	f847 2c04 	str.w	r2, [r7, #-4]
 8009fde:	e7d3      	b.n	8009f88 <__hexnan+0xbc>
 8009fe0:	3e04      	subs	r6, #4
 8009fe2:	e7d1      	b.n	8009f88 <__hexnan+0xbc>
 8009fe4:	2004      	movs	r0, #4
 8009fe6:	b007      	add	sp, #28
 8009fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fec <__locale_ctype_ptr_l>:
 8009fec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009ff0:	4770      	bx	lr

08009ff2 <__localeconv_l>:
 8009ff2:	30f0      	adds	r0, #240	; 0xf0
 8009ff4:	4770      	bx	lr
	...

08009ff8 <_localeconv_r>:
 8009ff8:	4b04      	ldr	r3, [pc, #16]	; (800a00c <_localeconv_r+0x14>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6a18      	ldr	r0, [r3, #32]
 8009ffe:	4b04      	ldr	r3, [pc, #16]	; (800a010 <_localeconv_r+0x18>)
 800a000:	2800      	cmp	r0, #0
 800a002:	bf08      	it	eq
 800a004:	4618      	moveq	r0, r3
 800a006:	30f0      	adds	r0, #240	; 0xf0
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	20000054 	.word	0x20000054
 800a010:	200000b8 	.word	0x200000b8

0800a014 <malloc>:
 800a014:	4b02      	ldr	r3, [pc, #8]	; (800a020 <malloc+0xc>)
 800a016:	4601      	mov	r1, r0
 800a018:	6818      	ldr	r0, [r3, #0]
 800a01a:	f000 bc7b 	b.w	800a914 <_malloc_r>
 800a01e:	bf00      	nop
 800a020:	20000054 	.word	0x20000054

0800a024 <__ascii_mbtowc>:
 800a024:	b082      	sub	sp, #8
 800a026:	b901      	cbnz	r1, 800a02a <__ascii_mbtowc+0x6>
 800a028:	a901      	add	r1, sp, #4
 800a02a:	b142      	cbz	r2, 800a03e <__ascii_mbtowc+0x1a>
 800a02c:	b14b      	cbz	r3, 800a042 <__ascii_mbtowc+0x1e>
 800a02e:	7813      	ldrb	r3, [r2, #0]
 800a030:	600b      	str	r3, [r1, #0]
 800a032:	7812      	ldrb	r2, [r2, #0]
 800a034:	1c10      	adds	r0, r2, #0
 800a036:	bf18      	it	ne
 800a038:	2001      	movne	r0, #1
 800a03a:	b002      	add	sp, #8
 800a03c:	4770      	bx	lr
 800a03e:	4610      	mov	r0, r2
 800a040:	e7fb      	b.n	800a03a <__ascii_mbtowc+0x16>
 800a042:	f06f 0001 	mvn.w	r0, #1
 800a046:	e7f8      	b.n	800a03a <__ascii_mbtowc+0x16>

0800a048 <memcpy>:
 800a048:	b510      	push	{r4, lr}
 800a04a:	1e43      	subs	r3, r0, #1
 800a04c:	440a      	add	r2, r1
 800a04e:	4291      	cmp	r1, r2
 800a050:	d100      	bne.n	800a054 <memcpy+0xc>
 800a052:	bd10      	pop	{r4, pc}
 800a054:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a058:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a05c:	e7f7      	b.n	800a04e <memcpy+0x6>

0800a05e <_Balloc>:
 800a05e:	b570      	push	{r4, r5, r6, lr}
 800a060:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a062:	4604      	mov	r4, r0
 800a064:	460e      	mov	r6, r1
 800a066:	b93d      	cbnz	r5, 800a078 <_Balloc+0x1a>
 800a068:	2010      	movs	r0, #16
 800a06a:	f7ff ffd3 	bl	800a014 <malloc>
 800a06e:	6260      	str	r0, [r4, #36]	; 0x24
 800a070:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a074:	6005      	str	r5, [r0, #0]
 800a076:	60c5      	str	r5, [r0, #12]
 800a078:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a07a:	68eb      	ldr	r3, [r5, #12]
 800a07c:	b183      	cbz	r3, 800a0a0 <_Balloc+0x42>
 800a07e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a086:	b9b8      	cbnz	r0, 800a0b8 <_Balloc+0x5a>
 800a088:	2101      	movs	r1, #1
 800a08a:	fa01 f506 	lsl.w	r5, r1, r6
 800a08e:	1d6a      	adds	r2, r5, #5
 800a090:	0092      	lsls	r2, r2, #2
 800a092:	4620      	mov	r0, r4
 800a094:	f000 fbe1 	bl	800a85a <_calloc_r>
 800a098:	b160      	cbz	r0, 800a0b4 <_Balloc+0x56>
 800a09a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a09e:	e00e      	b.n	800a0be <_Balloc+0x60>
 800a0a0:	2221      	movs	r2, #33	; 0x21
 800a0a2:	2104      	movs	r1, #4
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f000 fbd8 	bl	800a85a <_calloc_r>
 800a0aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0ac:	60e8      	str	r0, [r5, #12]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1e4      	bne.n	800a07e <_Balloc+0x20>
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	bd70      	pop	{r4, r5, r6, pc}
 800a0b8:	6802      	ldr	r2, [r0, #0]
 800a0ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0c4:	e7f7      	b.n	800a0b6 <_Balloc+0x58>

0800a0c6 <_Bfree>:
 800a0c6:	b570      	push	{r4, r5, r6, lr}
 800a0c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	460d      	mov	r5, r1
 800a0ce:	b93c      	cbnz	r4, 800a0e0 <_Bfree+0x1a>
 800a0d0:	2010      	movs	r0, #16
 800a0d2:	f7ff ff9f 	bl	800a014 <malloc>
 800a0d6:	6270      	str	r0, [r6, #36]	; 0x24
 800a0d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0dc:	6004      	str	r4, [r0, #0]
 800a0de:	60c4      	str	r4, [r0, #12]
 800a0e0:	b13d      	cbz	r5, 800a0f2 <_Bfree+0x2c>
 800a0e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a0e4:	686a      	ldr	r2, [r5, #4]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0ec:	6029      	str	r1, [r5, #0]
 800a0ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a0f2:	bd70      	pop	{r4, r5, r6, pc}

0800a0f4 <__multadd>:
 800a0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f8:	690d      	ldr	r5, [r1, #16]
 800a0fa:	461f      	mov	r7, r3
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	460c      	mov	r4, r1
 800a100:	f101 0c14 	add.w	ip, r1, #20
 800a104:	2300      	movs	r3, #0
 800a106:	f8dc 0000 	ldr.w	r0, [ip]
 800a10a:	b281      	uxth	r1, r0
 800a10c:	fb02 7101 	mla	r1, r2, r1, r7
 800a110:	0c0f      	lsrs	r7, r1, #16
 800a112:	0c00      	lsrs	r0, r0, #16
 800a114:	fb02 7000 	mla	r0, r2, r0, r7
 800a118:	b289      	uxth	r1, r1
 800a11a:	3301      	adds	r3, #1
 800a11c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a120:	429d      	cmp	r5, r3
 800a122:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a126:	f84c 1b04 	str.w	r1, [ip], #4
 800a12a:	dcec      	bgt.n	800a106 <__multadd+0x12>
 800a12c:	b1d7      	cbz	r7, 800a164 <__multadd+0x70>
 800a12e:	68a3      	ldr	r3, [r4, #8]
 800a130:	42ab      	cmp	r3, r5
 800a132:	dc12      	bgt.n	800a15a <__multadd+0x66>
 800a134:	6861      	ldr	r1, [r4, #4]
 800a136:	4630      	mov	r0, r6
 800a138:	3101      	adds	r1, #1
 800a13a:	f7ff ff90 	bl	800a05e <_Balloc>
 800a13e:	6922      	ldr	r2, [r4, #16]
 800a140:	3202      	adds	r2, #2
 800a142:	f104 010c 	add.w	r1, r4, #12
 800a146:	4680      	mov	r8, r0
 800a148:	0092      	lsls	r2, r2, #2
 800a14a:	300c      	adds	r0, #12
 800a14c:	f7ff ff7c 	bl	800a048 <memcpy>
 800a150:	4621      	mov	r1, r4
 800a152:	4630      	mov	r0, r6
 800a154:	f7ff ffb7 	bl	800a0c6 <_Bfree>
 800a158:	4644      	mov	r4, r8
 800a15a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a15e:	3501      	adds	r5, #1
 800a160:	615f      	str	r7, [r3, #20]
 800a162:	6125      	str	r5, [r4, #16]
 800a164:	4620      	mov	r0, r4
 800a166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a16a <__s2b>:
 800a16a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a16e:	460c      	mov	r4, r1
 800a170:	4615      	mov	r5, r2
 800a172:	461f      	mov	r7, r3
 800a174:	2209      	movs	r2, #9
 800a176:	3308      	adds	r3, #8
 800a178:	4606      	mov	r6, r0
 800a17a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a17e:	2100      	movs	r1, #0
 800a180:	2201      	movs	r2, #1
 800a182:	429a      	cmp	r2, r3
 800a184:	db20      	blt.n	800a1c8 <__s2b+0x5e>
 800a186:	4630      	mov	r0, r6
 800a188:	f7ff ff69 	bl	800a05e <_Balloc>
 800a18c:	9b08      	ldr	r3, [sp, #32]
 800a18e:	6143      	str	r3, [r0, #20]
 800a190:	2d09      	cmp	r5, #9
 800a192:	f04f 0301 	mov.w	r3, #1
 800a196:	6103      	str	r3, [r0, #16]
 800a198:	dd19      	ble.n	800a1ce <__s2b+0x64>
 800a19a:	f104 0809 	add.w	r8, r4, #9
 800a19e:	46c1      	mov	r9, r8
 800a1a0:	442c      	add	r4, r5
 800a1a2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a1a6:	4601      	mov	r1, r0
 800a1a8:	3b30      	subs	r3, #48	; 0x30
 800a1aa:	220a      	movs	r2, #10
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7ff ffa1 	bl	800a0f4 <__multadd>
 800a1b2:	45a1      	cmp	r9, r4
 800a1b4:	d1f5      	bne.n	800a1a2 <__s2b+0x38>
 800a1b6:	eb08 0405 	add.w	r4, r8, r5
 800a1ba:	3c08      	subs	r4, #8
 800a1bc:	1b2d      	subs	r5, r5, r4
 800a1be:	1963      	adds	r3, r4, r5
 800a1c0:	42bb      	cmp	r3, r7
 800a1c2:	db07      	blt.n	800a1d4 <__s2b+0x6a>
 800a1c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1c8:	0052      	lsls	r2, r2, #1
 800a1ca:	3101      	adds	r1, #1
 800a1cc:	e7d9      	b.n	800a182 <__s2b+0x18>
 800a1ce:	340a      	adds	r4, #10
 800a1d0:	2509      	movs	r5, #9
 800a1d2:	e7f3      	b.n	800a1bc <__s2b+0x52>
 800a1d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1d8:	4601      	mov	r1, r0
 800a1da:	3b30      	subs	r3, #48	; 0x30
 800a1dc:	220a      	movs	r2, #10
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f7ff ff88 	bl	800a0f4 <__multadd>
 800a1e4:	e7eb      	b.n	800a1be <__s2b+0x54>

0800a1e6 <__hi0bits>:
 800a1e6:	0c02      	lsrs	r2, r0, #16
 800a1e8:	0412      	lsls	r2, r2, #16
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	b9b2      	cbnz	r2, 800a21c <__hi0bits+0x36>
 800a1ee:	0403      	lsls	r3, r0, #16
 800a1f0:	2010      	movs	r0, #16
 800a1f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a1f6:	bf04      	itt	eq
 800a1f8:	021b      	lsleq	r3, r3, #8
 800a1fa:	3008      	addeq	r0, #8
 800a1fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a200:	bf04      	itt	eq
 800a202:	011b      	lsleq	r3, r3, #4
 800a204:	3004      	addeq	r0, #4
 800a206:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a20a:	bf04      	itt	eq
 800a20c:	009b      	lsleq	r3, r3, #2
 800a20e:	3002      	addeq	r0, #2
 800a210:	2b00      	cmp	r3, #0
 800a212:	db06      	blt.n	800a222 <__hi0bits+0x3c>
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	d503      	bpl.n	800a220 <__hi0bits+0x3a>
 800a218:	3001      	adds	r0, #1
 800a21a:	4770      	bx	lr
 800a21c:	2000      	movs	r0, #0
 800a21e:	e7e8      	b.n	800a1f2 <__hi0bits+0xc>
 800a220:	2020      	movs	r0, #32
 800a222:	4770      	bx	lr

0800a224 <__lo0bits>:
 800a224:	6803      	ldr	r3, [r0, #0]
 800a226:	f013 0207 	ands.w	r2, r3, #7
 800a22a:	4601      	mov	r1, r0
 800a22c:	d00b      	beq.n	800a246 <__lo0bits+0x22>
 800a22e:	07da      	lsls	r2, r3, #31
 800a230:	d423      	bmi.n	800a27a <__lo0bits+0x56>
 800a232:	0798      	lsls	r0, r3, #30
 800a234:	bf49      	itett	mi
 800a236:	085b      	lsrmi	r3, r3, #1
 800a238:	089b      	lsrpl	r3, r3, #2
 800a23a:	2001      	movmi	r0, #1
 800a23c:	600b      	strmi	r3, [r1, #0]
 800a23e:	bf5c      	itt	pl
 800a240:	600b      	strpl	r3, [r1, #0]
 800a242:	2002      	movpl	r0, #2
 800a244:	4770      	bx	lr
 800a246:	b298      	uxth	r0, r3
 800a248:	b9a8      	cbnz	r0, 800a276 <__lo0bits+0x52>
 800a24a:	0c1b      	lsrs	r3, r3, #16
 800a24c:	2010      	movs	r0, #16
 800a24e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a252:	bf04      	itt	eq
 800a254:	0a1b      	lsreq	r3, r3, #8
 800a256:	3008      	addeq	r0, #8
 800a258:	071a      	lsls	r2, r3, #28
 800a25a:	bf04      	itt	eq
 800a25c:	091b      	lsreq	r3, r3, #4
 800a25e:	3004      	addeq	r0, #4
 800a260:	079a      	lsls	r2, r3, #30
 800a262:	bf04      	itt	eq
 800a264:	089b      	lsreq	r3, r3, #2
 800a266:	3002      	addeq	r0, #2
 800a268:	07da      	lsls	r2, r3, #31
 800a26a:	d402      	bmi.n	800a272 <__lo0bits+0x4e>
 800a26c:	085b      	lsrs	r3, r3, #1
 800a26e:	d006      	beq.n	800a27e <__lo0bits+0x5a>
 800a270:	3001      	adds	r0, #1
 800a272:	600b      	str	r3, [r1, #0]
 800a274:	4770      	bx	lr
 800a276:	4610      	mov	r0, r2
 800a278:	e7e9      	b.n	800a24e <__lo0bits+0x2a>
 800a27a:	2000      	movs	r0, #0
 800a27c:	4770      	bx	lr
 800a27e:	2020      	movs	r0, #32
 800a280:	4770      	bx	lr

0800a282 <__i2b>:
 800a282:	b510      	push	{r4, lr}
 800a284:	460c      	mov	r4, r1
 800a286:	2101      	movs	r1, #1
 800a288:	f7ff fee9 	bl	800a05e <_Balloc>
 800a28c:	2201      	movs	r2, #1
 800a28e:	6144      	str	r4, [r0, #20]
 800a290:	6102      	str	r2, [r0, #16]
 800a292:	bd10      	pop	{r4, pc}

0800a294 <__multiply>:
 800a294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a298:	4614      	mov	r4, r2
 800a29a:	690a      	ldr	r2, [r1, #16]
 800a29c:	6923      	ldr	r3, [r4, #16]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	bfb8      	it	lt
 800a2a2:	460b      	movlt	r3, r1
 800a2a4:	4688      	mov	r8, r1
 800a2a6:	bfbc      	itt	lt
 800a2a8:	46a0      	movlt	r8, r4
 800a2aa:	461c      	movlt	r4, r3
 800a2ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a2b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a2b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2bc:	eb07 0609 	add.w	r6, r7, r9
 800a2c0:	42b3      	cmp	r3, r6
 800a2c2:	bfb8      	it	lt
 800a2c4:	3101      	addlt	r1, #1
 800a2c6:	f7ff feca 	bl	800a05e <_Balloc>
 800a2ca:	f100 0514 	add.w	r5, r0, #20
 800a2ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a2d2:	462b      	mov	r3, r5
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	4573      	cmp	r3, lr
 800a2d8:	d316      	bcc.n	800a308 <__multiply+0x74>
 800a2da:	f104 0214 	add.w	r2, r4, #20
 800a2de:	f108 0114 	add.w	r1, r8, #20
 800a2e2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a2e6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	9b00      	ldr	r3, [sp, #0]
 800a2ee:	9201      	str	r2, [sp, #4]
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d80c      	bhi.n	800a30e <__multiply+0x7a>
 800a2f4:	2e00      	cmp	r6, #0
 800a2f6:	dd03      	ble.n	800a300 <__multiply+0x6c>
 800a2f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d05d      	beq.n	800a3bc <__multiply+0x128>
 800a300:	6106      	str	r6, [r0, #16]
 800a302:	b003      	add	sp, #12
 800a304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a308:	f843 2b04 	str.w	r2, [r3], #4
 800a30c:	e7e3      	b.n	800a2d6 <__multiply+0x42>
 800a30e:	f8b2 b000 	ldrh.w	fp, [r2]
 800a312:	f1bb 0f00 	cmp.w	fp, #0
 800a316:	d023      	beq.n	800a360 <__multiply+0xcc>
 800a318:	4689      	mov	r9, r1
 800a31a:	46ac      	mov	ip, r5
 800a31c:	f04f 0800 	mov.w	r8, #0
 800a320:	f859 4b04 	ldr.w	r4, [r9], #4
 800a324:	f8dc a000 	ldr.w	sl, [ip]
 800a328:	b2a3      	uxth	r3, r4
 800a32a:	fa1f fa8a 	uxth.w	sl, sl
 800a32e:	fb0b a303 	mla	r3, fp, r3, sl
 800a332:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a336:	f8dc 4000 	ldr.w	r4, [ip]
 800a33a:	4443      	add	r3, r8
 800a33c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a340:	fb0b 840a 	mla	r4, fp, sl, r8
 800a344:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a348:	46e2      	mov	sl, ip
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a350:	454f      	cmp	r7, r9
 800a352:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a356:	f84a 3b04 	str.w	r3, [sl], #4
 800a35a:	d82b      	bhi.n	800a3b4 <__multiply+0x120>
 800a35c:	f8cc 8004 	str.w	r8, [ip, #4]
 800a360:	9b01      	ldr	r3, [sp, #4]
 800a362:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a366:	3204      	adds	r2, #4
 800a368:	f1ba 0f00 	cmp.w	sl, #0
 800a36c:	d020      	beq.n	800a3b0 <__multiply+0x11c>
 800a36e:	682b      	ldr	r3, [r5, #0]
 800a370:	4689      	mov	r9, r1
 800a372:	46a8      	mov	r8, r5
 800a374:	f04f 0b00 	mov.w	fp, #0
 800a378:	f8b9 c000 	ldrh.w	ip, [r9]
 800a37c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a380:	fb0a 440c 	mla	r4, sl, ip, r4
 800a384:	445c      	add	r4, fp
 800a386:	46c4      	mov	ip, r8
 800a388:	b29b      	uxth	r3, r3
 800a38a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a38e:	f84c 3b04 	str.w	r3, [ip], #4
 800a392:	f859 3b04 	ldr.w	r3, [r9], #4
 800a396:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a39a:	0c1b      	lsrs	r3, r3, #16
 800a39c:	fb0a b303 	mla	r3, sl, r3, fp
 800a3a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a3a4:	454f      	cmp	r7, r9
 800a3a6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a3aa:	d805      	bhi.n	800a3b8 <__multiply+0x124>
 800a3ac:	f8c8 3004 	str.w	r3, [r8, #4]
 800a3b0:	3504      	adds	r5, #4
 800a3b2:	e79b      	b.n	800a2ec <__multiply+0x58>
 800a3b4:	46d4      	mov	ip, sl
 800a3b6:	e7b3      	b.n	800a320 <__multiply+0x8c>
 800a3b8:	46e0      	mov	r8, ip
 800a3ba:	e7dd      	b.n	800a378 <__multiply+0xe4>
 800a3bc:	3e01      	subs	r6, #1
 800a3be:	e799      	b.n	800a2f4 <__multiply+0x60>

0800a3c0 <__pow5mult>:
 800a3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c4:	4615      	mov	r5, r2
 800a3c6:	f012 0203 	ands.w	r2, r2, #3
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	460f      	mov	r7, r1
 800a3ce:	d007      	beq.n	800a3e0 <__pow5mult+0x20>
 800a3d0:	3a01      	subs	r2, #1
 800a3d2:	4c21      	ldr	r4, [pc, #132]	; (800a458 <__pow5mult+0x98>)
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3da:	f7ff fe8b 	bl	800a0f4 <__multadd>
 800a3de:	4607      	mov	r7, r0
 800a3e0:	10ad      	asrs	r5, r5, #2
 800a3e2:	d035      	beq.n	800a450 <__pow5mult+0x90>
 800a3e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a3e6:	b93c      	cbnz	r4, 800a3f8 <__pow5mult+0x38>
 800a3e8:	2010      	movs	r0, #16
 800a3ea:	f7ff fe13 	bl	800a014 <malloc>
 800a3ee:	6270      	str	r0, [r6, #36]	; 0x24
 800a3f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3f4:	6004      	str	r4, [r0, #0]
 800a3f6:	60c4      	str	r4, [r0, #12]
 800a3f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a400:	b94c      	cbnz	r4, 800a416 <__pow5mult+0x56>
 800a402:	f240 2171 	movw	r1, #625	; 0x271
 800a406:	4630      	mov	r0, r6
 800a408:	f7ff ff3b 	bl	800a282 <__i2b>
 800a40c:	2300      	movs	r3, #0
 800a40e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a412:	4604      	mov	r4, r0
 800a414:	6003      	str	r3, [r0, #0]
 800a416:	f04f 0800 	mov.w	r8, #0
 800a41a:	07eb      	lsls	r3, r5, #31
 800a41c:	d50a      	bpl.n	800a434 <__pow5mult+0x74>
 800a41e:	4639      	mov	r1, r7
 800a420:	4622      	mov	r2, r4
 800a422:	4630      	mov	r0, r6
 800a424:	f7ff ff36 	bl	800a294 <__multiply>
 800a428:	4639      	mov	r1, r7
 800a42a:	4681      	mov	r9, r0
 800a42c:	4630      	mov	r0, r6
 800a42e:	f7ff fe4a 	bl	800a0c6 <_Bfree>
 800a432:	464f      	mov	r7, r9
 800a434:	106d      	asrs	r5, r5, #1
 800a436:	d00b      	beq.n	800a450 <__pow5mult+0x90>
 800a438:	6820      	ldr	r0, [r4, #0]
 800a43a:	b938      	cbnz	r0, 800a44c <__pow5mult+0x8c>
 800a43c:	4622      	mov	r2, r4
 800a43e:	4621      	mov	r1, r4
 800a440:	4630      	mov	r0, r6
 800a442:	f7ff ff27 	bl	800a294 <__multiply>
 800a446:	6020      	str	r0, [r4, #0]
 800a448:	f8c0 8000 	str.w	r8, [r0]
 800a44c:	4604      	mov	r4, r0
 800a44e:	e7e4      	b.n	800a41a <__pow5mult+0x5a>
 800a450:	4638      	mov	r0, r7
 800a452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a456:	bf00      	nop
 800a458:	0800ca48 	.word	0x0800ca48

0800a45c <__lshift>:
 800a45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a460:	460c      	mov	r4, r1
 800a462:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a466:	6923      	ldr	r3, [r4, #16]
 800a468:	6849      	ldr	r1, [r1, #4]
 800a46a:	eb0a 0903 	add.w	r9, sl, r3
 800a46e:	68a3      	ldr	r3, [r4, #8]
 800a470:	4607      	mov	r7, r0
 800a472:	4616      	mov	r6, r2
 800a474:	f109 0501 	add.w	r5, r9, #1
 800a478:	42ab      	cmp	r3, r5
 800a47a:	db32      	blt.n	800a4e2 <__lshift+0x86>
 800a47c:	4638      	mov	r0, r7
 800a47e:	f7ff fdee 	bl	800a05e <_Balloc>
 800a482:	2300      	movs	r3, #0
 800a484:	4680      	mov	r8, r0
 800a486:	f100 0114 	add.w	r1, r0, #20
 800a48a:	461a      	mov	r2, r3
 800a48c:	4553      	cmp	r3, sl
 800a48e:	db2b      	blt.n	800a4e8 <__lshift+0x8c>
 800a490:	6920      	ldr	r0, [r4, #16]
 800a492:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a496:	f104 0314 	add.w	r3, r4, #20
 800a49a:	f016 021f 	ands.w	r2, r6, #31
 800a49e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4a6:	d025      	beq.n	800a4f4 <__lshift+0x98>
 800a4a8:	f1c2 0e20 	rsb	lr, r2, #32
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	681e      	ldr	r6, [r3, #0]
 800a4b0:	468a      	mov	sl, r1
 800a4b2:	4096      	lsls	r6, r2
 800a4b4:	4330      	orrs	r0, r6
 800a4b6:	f84a 0b04 	str.w	r0, [sl], #4
 800a4ba:	f853 0b04 	ldr.w	r0, [r3], #4
 800a4be:	459c      	cmp	ip, r3
 800a4c0:	fa20 f00e 	lsr.w	r0, r0, lr
 800a4c4:	d814      	bhi.n	800a4f0 <__lshift+0x94>
 800a4c6:	6048      	str	r0, [r1, #4]
 800a4c8:	b108      	cbz	r0, 800a4ce <__lshift+0x72>
 800a4ca:	f109 0502 	add.w	r5, r9, #2
 800a4ce:	3d01      	subs	r5, #1
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	f8c8 5010 	str.w	r5, [r8, #16]
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	f7ff fdf5 	bl	800a0c6 <_Bfree>
 800a4dc:	4640      	mov	r0, r8
 800a4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e2:	3101      	adds	r1, #1
 800a4e4:	005b      	lsls	r3, r3, #1
 800a4e6:	e7c7      	b.n	800a478 <__lshift+0x1c>
 800a4e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	e7cd      	b.n	800a48c <__lshift+0x30>
 800a4f0:	4651      	mov	r1, sl
 800a4f2:	e7dc      	b.n	800a4ae <__lshift+0x52>
 800a4f4:	3904      	subs	r1, #4
 800a4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4fa:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4fe:	459c      	cmp	ip, r3
 800a500:	d8f9      	bhi.n	800a4f6 <__lshift+0x9a>
 800a502:	e7e4      	b.n	800a4ce <__lshift+0x72>

0800a504 <__mcmp>:
 800a504:	6903      	ldr	r3, [r0, #16]
 800a506:	690a      	ldr	r2, [r1, #16]
 800a508:	1a9b      	subs	r3, r3, r2
 800a50a:	b530      	push	{r4, r5, lr}
 800a50c:	d10c      	bne.n	800a528 <__mcmp+0x24>
 800a50e:	0092      	lsls	r2, r2, #2
 800a510:	3014      	adds	r0, #20
 800a512:	3114      	adds	r1, #20
 800a514:	1884      	adds	r4, r0, r2
 800a516:	4411      	add	r1, r2
 800a518:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a51c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a520:	4295      	cmp	r5, r2
 800a522:	d003      	beq.n	800a52c <__mcmp+0x28>
 800a524:	d305      	bcc.n	800a532 <__mcmp+0x2e>
 800a526:	2301      	movs	r3, #1
 800a528:	4618      	mov	r0, r3
 800a52a:	bd30      	pop	{r4, r5, pc}
 800a52c:	42a0      	cmp	r0, r4
 800a52e:	d3f3      	bcc.n	800a518 <__mcmp+0x14>
 800a530:	e7fa      	b.n	800a528 <__mcmp+0x24>
 800a532:	f04f 33ff 	mov.w	r3, #4294967295
 800a536:	e7f7      	b.n	800a528 <__mcmp+0x24>

0800a538 <__mdiff>:
 800a538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a53c:	460d      	mov	r5, r1
 800a53e:	4607      	mov	r7, r0
 800a540:	4611      	mov	r1, r2
 800a542:	4628      	mov	r0, r5
 800a544:	4614      	mov	r4, r2
 800a546:	f7ff ffdd 	bl	800a504 <__mcmp>
 800a54a:	1e06      	subs	r6, r0, #0
 800a54c:	d108      	bne.n	800a560 <__mdiff+0x28>
 800a54e:	4631      	mov	r1, r6
 800a550:	4638      	mov	r0, r7
 800a552:	f7ff fd84 	bl	800a05e <_Balloc>
 800a556:	2301      	movs	r3, #1
 800a558:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a560:	bfa4      	itt	ge
 800a562:	4623      	movge	r3, r4
 800a564:	462c      	movge	r4, r5
 800a566:	4638      	mov	r0, r7
 800a568:	6861      	ldr	r1, [r4, #4]
 800a56a:	bfa6      	itte	ge
 800a56c:	461d      	movge	r5, r3
 800a56e:	2600      	movge	r6, #0
 800a570:	2601      	movlt	r6, #1
 800a572:	f7ff fd74 	bl	800a05e <_Balloc>
 800a576:	692b      	ldr	r3, [r5, #16]
 800a578:	60c6      	str	r6, [r0, #12]
 800a57a:	6926      	ldr	r6, [r4, #16]
 800a57c:	f105 0914 	add.w	r9, r5, #20
 800a580:	f104 0214 	add.w	r2, r4, #20
 800a584:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a588:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a58c:	f100 0514 	add.w	r5, r0, #20
 800a590:	f04f 0e00 	mov.w	lr, #0
 800a594:	f852 ab04 	ldr.w	sl, [r2], #4
 800a598:	f859 4b04 	ldr.w	r4, [r9], #4
 800a59c:	fa1e f18a 	uxtah	r1, lr, sl
 800a5a0:	b2a3      	uxth	r3, r4
 800a5a2:	1ac9      	subs	r1, r1, r3
 800a5a4:	0c23      	lsrs	r3, r4, #16
 800a5a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a5aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a5ae:	b289      	uxth	r1, r1
 800a5b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a5b4:	45c8      	cmp	r8, r9
 800a5b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a5ba:	4694      	mov	ip, r2
 800a5bc:	f845 3b04 	str.w	r3, [r5], #4
 800a5c0:	d8e8      	bhi.n	800a594 <__mdiff+0x5c>
 800a5c2:	45bc      	cmp	ip, r7
 800a5c4:	d304      	bcc.n	800a5d0 <__mdiff+0x98>
 800a5c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a5ca:	b183      	cbz	r3, 800a5ee <__mdiff+0xb6>
 800a5cc:	6106      	str	r6, [r0, #16]
 800a5ce:	e7c5      	b.n	800a55c <__mdiff+0x24>
 800a5d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a5d4:	fa1e f381 	uxtah	r3, lr, r1
 800a5d8:	141a      	asrs	r2, r3, #16
 800a5da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a5e8:	f845 3b04 	str.w	r3, [r5], #4
 800a5ec:	e7e9      	b.n	800a5c2 <__mdiff+0x8a>
 800a5ee:	3e01      	subs	r6, #1
 800a5f0:	e7e9      	b.n	800a5c6 <__mdiff+0x8e>
	...

0800a5f4 <__ulp>:
 800a5f4:	4b12      	ldr	r3, [pc, #72]	; (800a640 <__ulp+0x4c>)
 800a5f6:	ee10 2a90 	vmov	r2, s1
 800a5fa:	401a      	ands	r2, r3
 800a5fc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a600:	2b00      	cmp	r3, #0
 800a602:	dd04      	ble.n	800a60e <__ulp+0x1a>
 800a604:	2000      	movs	r0, #0
 800a606:	4619      	mov	r1, r3
 800a608:	ec41 0b10 	vmov	d0, r0, r1
 800a60c:	4770      	bx	lr
 800a60e:	425b      	negs	r3, r3
 800a610:	151b      	asrs	r3, r3, #20
 800a612:	2b13      	cmp	r3, #19
 800a614:	f04f 0000 	mov.w	r0, #0
 800a618:	f04f 0100 	mov.w	r1, #0
 800a61c:	dc04      	bgt.n	800a628 <__ulp+0x34>
 800a61e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a622:	fa42 f103 	asr.w	r1, r2, r3
 800a626:	e7ef      	b.n	800a608 <__ulp+0x14>
 800a628:	3b14      	subs	r3, #20
 800a62a:	2b1e      	cmp	r3, #30
 800a62c:	f04f 0201 	mov.w	r2, #1
 800a630:	bfda      	itte	le
 800a632:	f1c3 031f 	rsble	r3, r3, #31
 800a636:	fa02 f303 	lslle.w	r3, r2, r3
 800a63a:	4613      	movgt	r3, r2
 800a63c:	4618      	mov	r0, r3
 800a63e:	e7e3      	b.n	800a608 <__ulp+0x14>
 800a640:	7ff00000 	.word	0x7ff00000

0800a644 <__b2d>:
 800a644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a646:	6905      	ldr	r5, [r0, #16]
 800a648:	f100 0714 	add.w	r7, r0, #20
 800a64c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a650:	1f2e      	subs	r6, r5, #4
 800a652:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a656:	4620      	mov	r0, r4
 800a658:	f7ff fdc5 	bl	800a1e6 <__hi0bits>
 800a65c:	f1c0 0320 	rsb	r3, r0, #32
 800a660:	280a      	cmp	r0, #10
 800a662:	600b      	str	r3, [r1, #0]
 800a664:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a6dc <__b2d+0x98>
 800a668:	dc14      	bgt.n	800a694 <__b2d+0x50>
 800a66a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a66e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a672:	42b7      	cmp	r7, r6
 800a674:	ea41 030c 	orr.w	r3, r1, ip
 800a678:	bf34      	ite	cc
 800a67a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a67e:	2100      	movcs	r1, #0
 800a680:	3015      	adds	r0, #21
 800a682:	fa04 f000 	lsl.w	r0, r4, r0
 800a686:	fa21 f10e 	lsr.w	r1, r1, lr
 800a68a:	ea40 0201 	orr.w	r2, r0, r1
 800a68e:	ec43 2b10 	vmov	d0, r2, r3
 800a692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a694:	42b7      	cmp	r7, r6
 800a696:	bf3a      	itte	cc
 800a698:	f1a5 0608 	subcc.w	r6, r5, #8
 800a69c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a6a0:	2100      	movcs	r1, #0
 800a6a2:	380b      	subs	r0, #11
 800a6a4:	d015      	beq.n	800a6d2 <__b2d+0x8e>
 800a6a6:	4084      	lsls	r4, r0
 800a6a8:	f1c0 0520 	rsb	r5, r0, #32
 800a6ac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a6b0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a6b4:	42be      	cmp	r6, r7
 800a6b6:	fa21 fc05 	lsr.w	ip, r1, r5
 800a6ba:	ea44 030c 	orr.w	r3, r4, ip
 800a6be:	bf8c      	ite	hi
 800a6c0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a6c4:	2400      	movls	r4, #0
 800a6c6:	fa01 f000 	lsl.w	r0, r1, r0
 800a6ca:	40ec      	lsrs	r4, r5
 800a6cc:	ea40 0204 	orr.w	r2, r0, r4
 800a6d0:	e7dd      	b.n	800a68e <__b2d+0x4a>
 800a6d2:	ea44 030c 	orr.w	r3, r4, ip
 800a6d6:	460a      	mov	r2, r1
 800a6d8:	e7d9      	b.n	800a68e <__b2d+0x4a>
 800a6da:	bf00      	nop
 800a6dc:	3ff00000 	.word	0x3ff00000

0800a6e0 <__d2b>:
 800a6e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6e4:	460e      	mov	r6, r1
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	ec59 8b10 	vmov	r8, r9, d0
 800a6ec:	4615      	mov	r5, r2
 800a6ee:	f7ff fcb6 	bl	800a05e <_Balloc>
 800a6f2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a6f6:	4607      	mov	r7, r0
 800a6f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6fc:	bb34      	cbnz	r4, 800a74c <__d2b+0x6c>
 800a6fe:	9301      	str	r3, [sp, #4]
 800a700:	f1b8 0300 	subs.w	r3, r8, #0
 800a704:	d027      	beq.n	800a756 <__d2b+0x76>
 800a706:	a802      	add	r0, sp, #8
 800a708:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a70c:	f7ff fd8a 	bl	800a224 <__lo0bits>
 800a710:	9900      	ldr	r1, [sp, #0]
 800a712:	b1f0      	cbz	r0, 800a752 <__d2b+0x72>
 800a714:	9a01      	ldr	r2, [sp, #4]
 800a716:	f1c0 0320 	rsb	r3, r0, #32
 800a71a:	fa02 f303 	lsl.w	r3, r2, r3
 800a71e:	430b      	orrs	r3, r1
 800a720:	40c2      	lsrs	r2, r0
 800a722:	617b      	str	r3, [r7, #20]
 800a724:	9201      	str	r2, [sp, #4]
 800a726:	9b01      	ldr	r3, [sp, #4]
 800a728:	61bb      	str	r3, [r7, #24]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	bf14      	ite	ne
 800a72e:	2102      	movne	r1, #2
 800a730:	2101      	moveq	r1, #1
 800a732:	6139      	str	r1, [r7, #16]
 800a734:	b1c4      	cbz	r4, 800a768 <__d2b+0x88>
 800a736:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a73a:	4404      	add	r4, r0
 800a73c:	6034      	str	r4, [r6, #0]
 800a73e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a742:	6028      	str	r0, [r5, #0]
 800a744:	4638      	mov	r0, r7
 800a746:	b003      	add	sp, #12
 800a748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a74c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a750:	e7d5      	b.n	800a6fe <__d2b+0x1e>
 800a752:	6179      	str	r1, [r7, #20]
 800a754:	e7e7      	b.n	800a726 <__d2b+0x46>
 800a756:	a801      	add	r0, sp, #4
 800a758:	f7ff fd64 	bl	800a224 <__lo0bits>
 800a75c:	9b01      	ldr	r3, [sp, #4]
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	2101      	movs	r1, #1
 800a762:	6139      	str	r1, [r7, #16]
 800a764:	3020      	adds	r0, #32
 800a766:	e7e5      	b.n	800a734 <__d2b+0x54>
 800a768:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a76c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a770:	6030      	str	r0, [r6, #0]
 800a772:	6918      	ldr	r0, [r3, #16]
 800a774:	f7ff fd37 	bl	800a1e6 <__hi0bits>
 800a778:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a77c:	e7e1      	b.n	800a742 <__d2b+0x62>

0800a77e <__ratio>:
 800a77e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a782:	4688      	mov	r8, r1
 800a784:	4669      	mov	r1, sp
 800a786:	4681      	mov	r9, r0
 800a788:	f7ff ff5c 	bl	800a644 <__b2d>
 800a78c:	a901      	add	r1, sp, #4
 800a78e:	4640      	mov	r0, r8
 800a790:	ec57 6b10 	vmov	r6, r7, d0
 800a794:	f7ff ff56 	bl	800a644 <__b2d>
 800a798:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a79c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a7a0:	eba3 0c02 	sub.w	ip, r3, r2
 800a7a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a7a8:	1a9b      	subs	r3, r3, r2
 800a7aa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a7ae:	ec5b ab10 	vmov	sl, fp, d0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	bfce      	itee	gt
 800a7b6:	463a      	movgt	r2, r7
 800a7b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a7bc:	465a      	movle	r2, fp
 800a7be:	4659      	mov	r1, fp
 800a7c0:	463d      	mov	r5, r7
 800a7c2:	bfd4      	ite	le
 800a7c4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a7c8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	ee10 2a10 	vmov	r2, s0
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	f7f6 f849 	bl	800086c <__aeabi_ddiv>
 800a7da:	ec41 0b10 	vmov	d0, r0, r1
 800a7de:	b003      	add	sp, #12
 800a7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a7e4 <__copybits>:
 800a7e4:	3901      	subs	r1, #1
 800a7e6:	b510      	push	{r4, lr}
 800a7e8:	1149      	asrs	r1, r1, #5
 800a7ea:	6914      	ldr	r4, [r2, #16]
 800a7ec:	3101      	adds	r1, #1
 800a7ee:	f102 0314 	add.w	r3, r2, #20
 800a7f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a7f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a7fa:	42a3      	cmp	r3, r4
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	d303      	bcc.n	800a808 <__copybits+0x24>
 800a800:	2300      	movs	r3, #0
 800a802:	428a      	cmp	r2, r1
 800a804:	d305      	bcc.n	800a812 <__copybits+0x2e>
 800a806:	bd10      	pop	{r4, pc}
 800a808:	f853 2b04 	ldr.w	r2, [r3], #4
 800a80c:	f840 2b04 	str.w	r2, [r0], #4
 800a810:	e7f3      	b.n	800a7fa <__copybits+0x16>
 800a812:	f842 3b04 	str.w	r3, [r2], #4
 800a816:	e7f4      	b.n	800a802 <__copybits+0x1e>

0800a818 <__any_on>:
 800a818:	f100 0214 	add.w	r2, r0, #20
 800a81c:	6900      	ldr	r0, [r0, #16]
 800a81e:	114b      	asrs	r3, r1, #5
 800a820:	4298      	cmp	r0, r3
 800a822:	b510      	push	{r4, lr}
 800a824:	db11      	blt.n	800a84a <__any_on+0x32>
 800a826:	dd0a      	ble.n	800a83e <__any_on+0x26>
 800a828:	f011 011f 	ands.w	r1, r1, #31
 800a82c:	d007      	beq.n	800a83e <__any_on+0x26>
 800a82e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a832:	fa24 f001 	lsr.w	r0, r4, r1
 800a836:	fa00 f101 	lsl.w	r1, r0, r1
 800a83a:	428c      	cmp	r4, r1
 800a83c:	d10b      	bne.n	800a856 <__any_on+0x3e>
 800a83e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a842:	4293      	cmp	r3, r2
 800a844:	d803      	bhi.n	800a84e <__any_on+0x36>
 800a846:	2000      	movs	r0, #0
 800a848:	bd10      	pop	{r4, pc}
 800a84a:	4603      	mov	r3, r0
 800a84c:	e7f7      	b.n	800a83e <__any_on+0x26>
 800a84e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a852:	2900      	cmp	r1, #0
 800a854:	d0f5      	beq.n	800a842 <__any_on+0x2a>
 800a856:	2001      	movs	r0, #1
 800a858:	e7f6      	b.n	800a848 <__any_on+0x30>

0800a85a <_calloc_r>:
 800a85a:	b538      	push	{r3, r4, r5, lr}
 800a85c:	fb02 f401 	mul.w	r4, r2, r1
 800a860:	4621      	mov	r1, r4
 800a862:	f000 f857 	bl	800a914 <_malloc_r>
 800a866:	4605      	mov	r5, r0
 800a868:	b118      	cbz	r0, 800a872 <_calloc_r+0x18>
 800a86a:	4622      	mov	r2, r4
 800a86c:	2100      	movs	r1, #0
 800a86e:	f7fc fd37 	bl	80072e0 <memset>
 800a872:	4628      	mov	r0, r5
 800a874:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a878 <_free_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	4605      	mov	r5, r0
 800a87c:	2900      	cmp	r1, #0
 800a87e:	d045      	beq.n	800a90c <_free_r+0x94>
 800a880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a884:	1f0c      	subs	r4, r1, #4
 800a886:	2b00      	cmp	r3, #0
 800a888:	bfb8      	it	lt
 800a88a:	18e4      	addlt	r4, r4, r3
 800a88c:	f000 fa36 	bl	800acfc <__malloc_lock>
 800a890:	4a1f      	ldr	r2, [pc, #124]	; (800a910 <_free_r+0x98>)
 800a892:	6813      	ldr	r3, [r2, #0]
 800a894:	4610      	mov	r0, r2
 800a896:	b933      	cbnz	r3, 800a8a6 <_free_r+0x2e>
 800a898:	6063      	str	r3, [r4, #4]
 800a89a:	6014      	str	r4, [r2, #0]
 800a89c:	4628      	mov	r0, r5
 800a89e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8a2:	f000 ba2c 	b.w	800acfe <__malloc_unlock>
 800a8a6:	42a3      	cmp	r3, r4
 800a8a8:	d90c      	bls.n	800a8c4 <_free_r+0x4c>
 800a8aa:	6821      	ldr	r1, [r4, #0]
 800a8ac:	1862      	adds	r2, r4, r1
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	bf04      	itt	eq
 800a8b2:	681a      	ldreq	r2, [r3, #0]
 800a8b4:	685b      	ldreq	r3, [r3, #4]
 800a8b6:	6063      	str	r3, [r4, #4]
 800a8b8:	bf04      	itt	eq
 800a8ba:	1852      	addeq	r2, r2, r1
 800a8bc:	6022      	streq	r2, [r4, #0]
 800a8be:	6004      	str	r4, [r0, #0]
 800a8c0:	e7ec      	b.n	800a89c <_free_r+0x24>
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	685a      	ldr	r2, [r3, #4]
 800a8c6:	b10a      	cbz	r2, 800a8cc <_free_r+0x54>
 800a8c8:	42a2      	cmp	r2, r4
 800a8ca:	d9fa      	bls.n	800a8c2 <_free_r+0x4a>
 800a8cc:	6819      	ldr	r1, [r3, #0]
 800a8ce:	1858      	adds	r0, r3, r1
 800a8d0:	42a0      	cmp	r0, r4
 800a8d2:	d10b      	bne.n	800a8ec <_free_r+0x74>
 800a8d4:	6820      	ldr	r0, [r4, #0]
 800a8d6:	4401      	add	r1, r0
 800a8d8:	1858      	adds	r0, r3, r1
 800a8da:	4282      	cmp	r2, r0
 800a8dc:	6019      	str	r1, [r3, #0]
 800a8de:	d1dd      	bne.n	800a89c <_free_r+0x24>
 800a8e0:	6810      	ldr	r0, [r2, #0]
 800a8e2:	6852      	ldr	r2, [r2, #4]
 800a8e4:	605a      	str	r2, [r3, #4]
 800a8e6:	4401      	add	r1, r0
 800a8e8:	6019      	str	r1, [r3, #0]
 800a8ea:	e7d7      	b.n	800a89c <_free_r+0x24>
 800a8ec:	d902      	bls.n	800a8f4 <_free_r+0x7c>
 800a8ee:	230c      	movs	r3, #12
 800a8f0:	602b      	str	r3, [r5, #0]
 800a8f2:	e7d3      	b.n	800a89c <_free_r+0x24>
 800a8f4:	6820      	ldr	r0, [r4, #0]
 800a8f6:	1821      	adds	r1, r4, r0
 800a8f8:	428a      	cmp	r2, r1
 800a8fa:	bf04      	itt	eq
 800a8fc:	6811      	ldreq	r1, [r2, #0]
 800a8fe:	6852      	ldreq	r2, [r2, #4]
 800a900:	6062      	str	r2, [r4, #4]
 800a902:	bf04      	itt	eq
 800a904:	1809      	addeq	r1, r1, r0
 800a906:	6021      	streq	r1, [r4, #0]
 800a908:	605c      	str	r4, [r3, #4]
 800a90a:	e7c7      	b.n	800a89c <_free_r+0x24>
 800a90c:	bd38      	pop	{r3, r4, r5, pc}
 800a90e:	bf00      	nop
 800a910:	200003fc 	.word	0x200003fc

0800a914 <_malloc_r>:
 800a914:	b570      	push	{r4, r5, r6, lr}
 800a916:	1ccd      	adds	r5, r1, #3
 800a918:	f025 0503 	bic.w	r5, r5, #3
 800a91c:	3508      	adds	r5, #8
 800a91e:	2d0c      	cmp	r5, #12
 800a920:	bf38      	it	cc
 800a922:	250c      	movcc	r5, #12
 800a924:	2d00      	cmp	r5, #0
 800a926:	4606      	mov	r6, r0
 800a928:	db01      	blt.n	800a92e <_malloc_r+0x1a>
 800a92a:	42a9      	cmp	r1, r5
 800a92c:	d903      	bls.n	800a936 <_malloc_r+0x22>
 800a92e:	230c      	movs	r3, #12
 800a930:	6033      	str	r3, [r6, #0]
 800a932:	2000      	movs	r0, #0
 800a934:	bd70      	pop	{r4, r5, r6, pc}
 800a936:	f000 f9e1 	bl	800acfc <__malloc_lock>
 800a93a:	4a21      	ldr	r2, [pc, #132]	; (800a9c0 <_malloc_r+0xac>)
 800a93c:	6814      	ldr	r4, [r2, #0]
 800a93e:	4621      	mov	r1, r4
 800a940:	b991      	cbnz	r1, 800a968 <_malloc_r+0x54>
 800a942:	4c20      	ldr	r4, [pc, #128]	; (800a9c4 <_malloc_r+0xb0>)
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	b91b      	cbnz	r3, 800a950 <_malloc_r+0x3c>
 800a948:	4630      	mov	r0, r6
 800a94a:	f000 f98f 	bl	800ac6c <_sbrk_r>
 800a94e:	6020      	str	r0, [r4, #0]
 800a950:	4629      	mov	r1, r5
 800a952:	4630      	mov	r0, r6
 800a954:	f000 f98a 	bl	800ac6c <_sbrk_r>
 800a958:	1c43      	adds	r3, r0, #1
 800a95a:	d124      	bne.n	800a9a6 <_malloc_r+0x92>
 800a95c:	230c      	movs	r3, #12
 800a95e:	6033      	str	r3, [r6, #0]
 800a960:	4630      	mov	r0, r6
 800a962:	f000 f9cc 	bl	800acfe <__malloc_unlock>
 800a966:	e7e4      	b.n	800a932 <_malloc_r+0x1e>
 800a968:	680b      	ldr	r3, [r1, #0]
 800a96a:	1b5b      	subs	r3, r3, r5
 800a96c:	d418      	bmi.n	800a9a0 <_malloc_r+0x8c>
 800a96e:	2b0b      	cmp	r3, #11
 800a970:	d90f      	bls.n	800a992 <_malloc_r+0x7e>
 800a972:	600b      	str	r3, [r1, #0]
 800a974:	50cd      	str	r5, [r1, r3]
 800a976:	18cc      	adds	r4, r1, r3
 800a978:	4630      	mov	r0, r6
 800a97a:	f000 f9c0 	bl	800acfe <__malloc_unlock>
 800a97e:	f104 000b 	add.w	r0, r4, #11
 800a982:	1d23      	adds	r3, r4, #4
 800a984:	f020 0007 	bic.w	r0, r0, #7
 800a988:	1ac3      	subs	r3, r0, r3
 800a98a:	d0d3      	beq.n	800a934 <_malloc_r+0x20>
 800a98c:	425a      	negs	r2, r3
 800a98e:	50e2      	str	r2, [r4, r3]
 800a990:	e7d0      	b.n	800a934 <_malloc_r+0x20>
 800a992:	428c      	cmp	r4, r1
 800a994:	684b      	ldr	r3, [r1, #4]
 800a996:	bf16      	itet	ne
 800a998:	6063      	strne	r3, [r4, #4]
 800a99a:	6013      	streq	r3, [r2, #0]
 800a99c:	460c      	movne	r4, r1
 800a99e:	e7eb      	b.n	800a978 <_malloc_r+0x64>
 800a9a0:	460c      	mov	r4, r1
 800a9a2:	6849      	ldr	r1, [r1, #4]
 800a9a4:	e7cc      	b.n	800a940 <_malloc_r+0x2c>
 800a9a6:	1cc4      	adds	r4, r0, #3
 800a9a8:	f024 0403 	bic.w	r4, r4, #3
 800a9ac:	42a0      	cmp	r0, r4
 800a9ae:	d005      	beq.n	800a9bc <_malloc_r+0xa8>
 800a9b0:	1a21      	subs	r1, r4, r0
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	f000 f95a 	bl	800ac6c <_sbrk_r>
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	d0cf      	beq.n	800a95c <_malloc_r+0x48>
 800a9bc:	6025      	str	r5, [r4, #0]
 800a9be:	e7db      	b.n	800a978 <_malloc_r+0x64>
 800a9c0:	200003fc 	.word	0x200003fc
 800a9c4:	20000400 	.word	0x20000400

0800a9c8 <__ssputs_r>:
 800a9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9cc:	688e      	ldr	r6, [r1, #8]
 800a9ce:	429e      	cmp	r6, r3
 800a9d0:	4682      	mov	sl, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	4690      	mov	r8, r2
 800a9d6:	4699      	mov	r9, r3
 800a9d8:	d837      	bhi.n	800aa4a <__ssputs_r+0x82>
 800a9da:	898a      	ldrh	r2, [r1, #12]
 800a9dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9e0:	d031      	beq.n	800aa46 <__ssputs_r+0x7e>
 800a9e2:	6825      	ldr	r5, [r4, #0]
 800a9e4:	6909      	ldr	r1, [r1, #16]
 800a9e6:	1a6f      	subs	r7, r5, r1
 800a9e8:	6965      	ldr	r5, [r4, #20]
 800a9ea:	2302      	movs	r3, #2
 800a9ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9f0:	fb95 f5f3 	sdiv	r5, r5, r3
 800a9f4:	f109 0301 	add.w	r3, r9, #1
 800a9f8:	443b      	add	r3, r7
 800a9fa:	429d      	cmp	r5, r3
 800a9fc:	bf38      	it	cc
 800a9fe:	461d      	movcc	r5, r3
 800aa00:	0553      	lsls	r3, r2, #21
 800aa02:	d530      	bpl.n	800aa66 <__ssputs_r+0x9e>
 800aa04:	4629      	mov	r1, r5
 800aa06:	f7ff ff85 	bl	800a914 <_malloc_r>
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	b950      	cbnz	r0, 800aa24 <__ssputs_r+0x5c>
 800aa0e:	230c      	movs	r3, #12
 800aa10:	f8ca 3000 	str.w	r3, [sl]
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa1a:	81a3      	strh	r3, [r4, #12]
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa24:	463a      	mov	r2, r7
 800aa26:	6921      	ldr	r1, [r4, #16]
 800aa28:	f7ff fb0e 	bl	800a048 <memcpy>
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa36:	81a3      	strh	r3, [r4, #12]
 800aa38:	6126      	str	r6, [r4, #16]
 800aa3a:	6165      	str	r5, [r4, #20]
 800aa3c:	443e      	add	r6, r7
 800aa3e:	1bed      	subs	r5, r5, r7
 800aa40:	6026      	str	r6, [r4, #0]
 800aa42:	60a5      	str	r5, [r4, #8]
 800aa44:	464e      	mov	r6, r9
 800aa46:	454e      	cmp	r6, r9
 800aa48:	d900      	bls.n	800aa4c <__ssputs_r+0x84>
 800aa4a:	464e      	mov	r6, r9
 800aa4c:	4632      	mov	r2, r6
 800aa4e:	4641      	mov	r1, r8
 800aa50:	6820      	ldr	r0, [r4, #0]
 800aa52:	f000 f93a 	bl	800acca <memmove>
 800aa56:	68a3      	ldr	r3, [r4, #8]
 800aa58:	1b9b      	subs	r3, r3, r6
 800aa5a:	60a3      	str	r3, [r4, #8]
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	441e      	add	r6, r3
 800aa60:	6026      	str	r6, [r4, #0]
 800aa62:	2000      	movs	r0, #0
 800aa64:	e7dc      	b.n	800aa20 <__ssputs_r+0x58>
 800aa66:	462a      	mov	r2, r5
 800aa68:	f000 f94a 	bl	800ad00 <_realloc_r>
 800aa6c:	4606      	mov	r6, r0
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d1e2      	bne.n	800aa38 <__ssputs_r+0x70>
 800aa72:	6921      	ldr	r1, [r4, #16]
 800aa74:	4650      	mov	r0, sl
 800aa76:	f7ff feff 	bl	800a878 <_free_r>
 800aa7a:	e7c8      	b.n	800aa0e <__ssputs_r+0x46>

0800aa7c <_svfiprintf_r>:
 800aa7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa80:	461d      	mov	r5, r3
 800aa82:	898b      	ldrh	r3, [r1, #12]
 800aa84:	061f      	lsls	r7, r3, #24
 800aa86:	b09d      	sub	sp, #116	; 0x74
 800aa88:	4680      	mov	r8, r0
 800aa8a:	460c      	mov	r4, r1
 800aa8c:	4616      	mov	r6, r2
 800aa8e:	d50f      	bpl.n	800aab0 <_svfiprintf_r+0x34>
 800aa90:	690b      	ldr	r3, [r1, #16]
 800aa92:	b96b      	cbnz	r3, 800aab0 <_svfiprintf_r+0x34>
 800aa94:	2140      	movs	r1, #64	; 0x40
 800aa96:	f7ff ff3d 	bl	800a914 <_malloc_r>
 800aa9a:	6020      	str	r0, [r4, #0]
 800aa9c:	6120      	str	r0, [r4, #16]
 800aa9e:	b928      	cbnz	r0, 800aaac <_svfiprintf_r+0x30>
 800aaa0:	230c      	movs	r3, #12
 800aaa2:	f8c8 3000 	str.w	r3, [r8]
 800aaa6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaaa:	e0c8      	b.n	800ac3e <_svfiprintf_r+0x1c2>
 800aaac:	2340      	movs	r3, #64	; 0x40
 800aaae:	6163      	str	r3, [r4, #20]
 800aab0:	2300      	movs	r3, #0
 800aab2:	9309      	str	r3, [sp, #36]	; 0x24
 800aab4:	2320      	movs	r3, #32
 800aab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aaba:	2330      	movs	r3, #48	; 0x30
 800aabc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aac0:	9503      	str	r5, [sp, #12]
 800aac2:	f04f 0b01 	mov.w	fp, #1
 800aac6:	4637      	mov	r7, r6
 800aac8:	463d      	mov	r5, r7
 800aaca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aace:	b10b      	cbz	r3, 800aad4 <_svfiprintf_r+0x58>
 800aad0:	2b25      	cmp	r3, #37	; 0x25
 800aad2:	d13e      	bne.n	800ab52 <_svfiprintf_r+0xd6>
 800aad4:	ebb7 0a06 	subs.w	sl, r7, r6
 800aad8:	d00b      	beq.n	800aaf2 <_svfiprintf_r+0x76>
 800aada:	4653      	mov	r3, sl
 800aadc:	4632      	mov	r2, r6
 800aade:	4621      	mov	r1, r4
 800aae0:	4640      	mov	r0, r8
 800aae2:	f7ff ff71 	bl	800a9c8 <__ssputs_r>
 800aae6:	3001      	adds	r0, #1
 800aae8:	f000 80a4 	beq.w	800ac34 <_svfiprintf_r+0x1b8>
 800aaec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaee:	4453      	add	r3, sl
 800aaf0:	9309      	str	r3, [sp, #36]	; 0x24
 800aaf2:	783b      	ldrb	r3, [r7, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 809d 	beq.w	800ac34 <_svfiprintf_r+0x1b8>
 800aafa:	2300      	movs	r3, #0
 800aafc:	f04f 32ff 	mov.w	r2, #4294967295
 800ab00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab04:	9304      	str	r3, [sp, #16]
 800ab06:	9307      	str	r3, [sp, #28]
 800ab08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab0c:	931a      	str	r3, [sp, #104]	; 0x68
 800ab0e:	462f      	mov	r7, r5
 800ab10:	2205      	movs	r2, #5
 800ab12:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ab16:	4850      	ldr	r0, [pc, #320]	; (800ac58 <_svfiprintf_r+0x1dc>)
 800ab18:	f7f5 fb72 	bl	8000200 <memchr>
 800ab1c:	9b04      	ldr	r3, [sp, #16]
 800ab1e:	b9d0      	cbnz	r0, 800ab56 <_svfiprintf_r+0xda>
 800ab20:	06d9      	lsls	r1, r3, #27
 800ab22:	bf44      	itt	mi
 800ab24:	2220      	movmi	r2, #32
 800ab26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ab2a:	071a      	lsls	r2, r3, #28
 800ab2c:	bf44      	itt	mi
 800ab2e:	222b      	movmi	r2, #43	; 0x2b
 800ab30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ab34:	782a      	ldrb	r2, [r5, #0]
 800ab36:	2a2a      	cmp	r2, #42	; 0x2a
 800ab38:	d015      	beq.n	800ab66 <_svfiprintf_r+0xea>
 800ab3a:	9a07      	ldr	r2, [sp, #28]
 800ab3c:	462f      	mov	r7, r5
 800ab3e:	2000      	movs	r0, #0
 800ab40:	250a      	movs	r5, #10
 800ab42:	4639      	mov	r1, r7
 800ab44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab48:	3b30      	subs	r3, #48	; 0x30
 800ab4a:	2b09      	cmp	r3, #9
 800ab4c:	d94d      	bls.n	800abea <_svfiprintf_r+0x16e>
 800ab4e:	b1b8      	cbz	r0, 800ab80 <_svfiprintf_r+0x104>
 800ab50:	e00f      	b.n	800ab72 <_svfiprintf_r+0xf6>
 800ab52:	462f      	mov	r7, r5
 800ab54:	e7b8      	b.n	800aac8 <_svfiprintf_r+0x4c>
 800ab56:	4a40      	ldr	r2, [pc, #256]	; (800ac58 <_svfiprintf_r+0x1dc>)
 800ab58:	1a80      	subs	r0, r0, r2
 800ab5a:	fa0b f000 	lsl.w	r0, fp, r0
 800ab5e:	4318      	orrs	r0, r3
 800ab60:	9004      	str	r0, [sp, #16]
 800ab62:	463d      	mov	r5, r7
 800ab64:	e7d3      	b.n	800ab0e <_svfiprintf_r+0x92>
 800ab66:	9a03      	ldr	r2, [sp, #12]
 800ab68:	1d11      	adds	r1, r2, #4
 800ab6a:	6812      	ldr	r2, [r2, #0]
 800ab6c:	9103      	str	r1, [sp, #12]
 800ab6e:	2a00      	cmp	r2, #0
 800ab70:	db01      	blt.n	800ab76 <_svfiprintf_r+0xfa>
 800ab72:	9207      	str	r2, [sp, #28]
 800ab74:	e004      	b.n	800ab80 <_svfiprintf_r+0x104>
 800ab76:	4252      	negs	r2, r2
 800ab78:	f043 0302 	orr.w	r3, r3, #2
 800ab7c:	9207      	str	r2, [sp, #28]
 800ab7e:	9304      	str	r3, [sp, #16]
 800ab80:	783b      	ldrb	r3, [r7, #0]
 800ab82:	2b2e      	cmp	r3, #46	; 0x2e
 800ab84:	d10c      	bne.n	800aba0 <_svfiprintf_r+0x124>
 800ab86:	787b      	ldrb	r3, [r7, #1]
 800ab88:	2b2a      	cmp	r3, #42	; 0x2a
 800ab8a:	d133      	bne.n	800abf4 <_svfiprintf_r+0x178>
 800ab8c:	9b03      	ldr	r3, [sp, #12]
 800ab8e:	1d1a      	adds	r2, r3, #4
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	9203      	str	r2, [sp, #12]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	bfb8      	it	lt
 800ab98:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab9c:	3702      	adds	r7, #2
 800ab9e:	9305      	str	r3, [sp, #20]
 800aba0:	4d2e      	ldr	r5, [pc, #184]	; (800ac5c <_svfiprintf_r+0x1e0>)
 800aba2:	7839      	ldrb	r1, [r7, #0]
 800aba4:	2203      	movs	r2, #3
 800aba6:	4628      	mov	r0, r5
 800aba8:	f7f5 fb2a 	bl	8000200 <memchr>
 800abac:	b138      	cbz	r0, 800abbe <_svfiprintf_r+0x142>
 800abae:	2340      	movs	r3, #64	; 0x40
 800abb0:	1b40      	subs	r0, r0, r5
 800abb2:	fa03 f000 	lsl.w	r0, r3, r0
 800abb6:	9b04      	ldr	r3, [sp, #16]
 800abb8:	4303      	orrs	r3, r0
 800abba:	3701      	adds	r7, #1
 800abbc:	9304      	str	r3, [sp, #16]
 800abbe:	7839      	ldrb	r1, [r7, #0]
 800abc0:	4827      	ldr	r0, [pc, #156]	; (800ac60 <_svfiprintf_r+0x1e4>)
 800abc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abc6:	2206      	movs	r2, #6
 800abc8:	1c7e      	adds	r6, r7, #1
 800abca:	f7f5 fb19 	bl	8000200 <memchr>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d038      	beq.n	800ac44 <_svfiprintf_r+0x1c8>
 800abd2:	4b24      	ldr	r3, [pc, #144]	; (800ac64 <_svfiprintf_r+0x1e8>)
 800abd4:	bb13      	cbnz	r3, 800ac1c <_svfiprintf_r+0x1a0>
 800abd6:	9b03      	ldr	r3, [sp, #12]
 800abd8:	3307      	adds	r3, #7
 800abda:	f023 0307 	bic.w	r3, r3, #7
 800abde:	3308      	adds	r3, #8
 800abe0:	9303      	str	r3, [sp, #12]
 800abe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe4:	444b      	add	r3, r9
 800abe6:	9309      	str	r3, [sp, #36]	; 0x24
 800abe8:	e76d      	b.n	800aac6 <_svfiprintf_r+0x4a>
 800abea:	fb05 3202 	mla	r2, r5, r2, r3
 800abee:	2001      	movs	r0, #1
 800abf0:	460f      	mov	r7, r1
 800abf2:	e7a6      	b.n	800ab42 <_svfiprintf_r+0xc6>
 800abf4:	2300      	movs	r3, #0
 800abf6:	3701      	adds	r7, #1
 800abf8:	9305      	str	r3, [sp, #20]
 800abfa:	4619      	mov	r1, r3
 800abfc:	250a      	movs	r5, #10
 800abfe:	4638      	mov	r0, r7
 800ac00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac04:	3a30      	subs	r2, #48	; 0x30
 800ac06:	2a09      	cmp	r2, #9
 800ac08:	d903      	bls.n	800ac12 <_svfiprintf_r+0x196>
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d0c8      	beq.n	800aba0 <_svfiprintf_r+0x124>
 800ac0e:	9105      	str	r1, [sp, #20]
 800ac10:	e7c6      	b.n	800aba0 <_svfiprintf_r+0x124>
 800ac12:	fb05 2101 	mla	r1, r5, r1, r2
 800ac16:	2301      	movs	r3, #1
 800ac18:	4607      	mov	r7, r0
 800ac1a:	e7f0      	b.n	800abfe <_svfiprintf_r+0x182>
 800ac1c:	ab03      	add	r3, sp, #12
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	4622      	mov	r2, r4
 800ac22:	4b11      	ldr	r3, [pc, #68]	; (800ac68 <_svfiprintf_r+0x1ec>)
 800ac24:	a904      	add	r1, sp, #16
 800ac26:	4640      	mov	r0, r8
 800ac28:	f7fc fbf6 	bl	8007418 <_printf_float>
 800ac2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ac30:	4681      	mov	r9, r0
 800ac32:	d1d6      	bne.n	800abe2 <_svfiprintf_r+0x166>
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	065b      	lsls	r3, r3, #25
 800ac38:	f53f af35 	bmi.w	800aaa6 <_svfiprintf_r+0x2a>
 800ac3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac3e:	b01d      	add	sp, #116	; 0x74
 800ac40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac44:	ab03      	add	r3, sp, #12
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	4622      	mov	r2, r4
 800ac4a:	4b07      	ldr	r3, [pc, #28]	; (800ac68 <_svfiprintf_r+0x1ec>)
 800ac4c:	a904      	add	r1, sp, #16
 800ac4e:	4640      	mov	r0, r8
 800ac50:	f7fc fe98 	bl	8007984 <_printf_i>
 800ac54:	e7ea      	b.n	800ac2c <_svfiprintf_r+0x1b0>
 800ac56:	bf00      	nop
 800ac58:	0800ca54 	.word	0x0800ca54
 800ac5c:	0800ca5a 	.word	0x0800ca5a
 800ac60:	0800ca5e 	.word	0x0800ca5e
 800ac64:	08007419 	.word	0x08007419
 800ac68:	0800a9c9 	.word	0x0800a9c9

0800ac6c <_sbrk_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4c06      	ldr	r4, [pc, #24]	; (800ac88 <_sbrk_r+0x1c>)
 800ac70:	2300      	movs	r3, #0
 800ac72:	4605      	mov	r5, r0
 800ac74:	4608      	mov	r0, r1
 800ac76:	6023      	str	r3, [r4, #0]
 800ac78:	f7fc fa7c 	bl	8007174 <_sbrk>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d102      	bne.n	800ac86 <_sbrk_r+0x1a>
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	b103      	cbz	r3, 800ac86 <_sbrk_r+0x1a>
 800ac84:	602b      	str	r3, [r5, #0]
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	200006bc 	.word	0x200006bc

0800ac8c <strncmp>:
 800ac8c:	b510      	push	{r4, lr}
 800ac8e:	b16a      	cbz	r2, 800acac <strncmp+0x20>
 800ac90:	3901      	subs	r1, #1
 800ac92:	1884      	adds	r4, r0, r2
 800ac94:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ac98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d103      	bne.n	800aca8 <strncmp+0x1c>
 800aca0:	42a0      	cmp	r0, r4
 800aca2:	d001      	beq.n	800aca8 <strncmp+0x1c>
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1f5      	bne.n	800ac94 <strncmp+0x8>
 800aca8:	1a98      	subs	r0, r3, r2
 800acaa:	bd10      	pop	{r4, pc}
 800acac:	4610      	mov	r0, r2
 800acae:	e7fc      	b.n	800acaa <strncmp+0x1e>

0800acb0 <__ascii_wctomb>:
 800acb0:	b149      	cbz	r1, 800acc6 <__ascii_wctomb+0x16>
 800acb2:	2aff      	cmp	r2, #255	; 0xff
 800acb4:	bf85      	ittet	hi
 800acb6:	238a      	movhi	r3, #138	; 0x8a
 800acb8:	6003      	strhi	r3, [r0, #0]
 800acba:	700a      	strbls	r2, [r1, #0]
 800acbc:	f04f 30ff 	movhi.w	r0, #4294967295
 800acc0:	bf98      	it	ls
 800acc2:	2001      	movls	r0, #1
 800acc4:	4770      	bx	lr
 800acc6:	4608      	mov	r0, r1
 800acc8:	4770      	bx	lr

0800acca <memmove>:
 800acca:	4288      	cmp	r0, r1
 800accc:	b510      	push	{r4, lr}
 800acce:	eb01 0302 	add.w	r3, r1, r2
 800acd2:	d807      	bhi.n	800ace4 <memmove+0x1a>
 800acd4:	1e42      	subs	r2, r0, #1
 800acd6:	4299      	cmp	r1, r3
 800acd8:	d00a      	beq.n	800acf0 <memmove+0x26>
 800acda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acde:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ace2:	e7f8      	b.n	800acd6 <memmove+0xc>
 800ace4:	4283      	cmp	r3, r0
 800ace6:	d9f5      	bls.n	800acd4 <memmove+0xa>
 800ace8:	1881      	adds	r1, r0, r2
 800acea:	1ad2      	subs	r2, r2, r3
 800acec:	42d3      	cmn	r3, r2
 800acee:	d100      	bne.n	800acf2 <memmove+0x28>
 800acf0:	bd10      	pop	{r4, pc}
 800acf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acf6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800acfa:	e7f7      	b.n	800acec <memmove+0x22>

0800acfc <__malloc_lock>:
 800acfc:	4770      	bx	lr

0800acfe <__malloc_unlock>:
 800acfe:	4770      	bx	lr

0800ad00 <_realloc_r>:
 800ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad02:	4607      	mov	r7, r0
 800ad04:	4614      	mov	r4, r2
 800ad06:	460e      	mov	r6, r1
 800ad08:	b921      	cbnz	r1, 800ad14 <_realloc_r+0x14>
 800ad0a:	4611      	mov	r1, r2
 800ad0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad10:	f7ff be00 	b.w	800a914 <_malloc_r>
 800ad14:	b922      	cbnz	r2, 800ad20 <_realloc_r+0x20>
 800ad16:	f7ff fdaf 	bl	800a878 <_free_r>
 800ad1a:	4625      	mov	r5, r4
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad20:	f000 f814 	bl	800ad4c <_malloc_usable_size_r>
 800ad24:	42a0      	cmp	r0, r4
 800ad26:	d20f      	bcs.n	800ad48 <_realloc_r+0x48>
 800ad28:	4621      	mov	r1, r4
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	f7ff fdf2 	bl	800a914 <_malloc_r>
 800ad30:	4605      	mov	r5, r0
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d0f2      	beq.n	800ad1c <_realloc_r+0x1c>
 800ad36:	4631      	mov	r1, r6
 800ad38:	4622      	mov	r2, r4
 800ad3a:	f7ff f985 	bl	800a048 <memcpy>
 800ad3e:	4631      	mov	r1, r6
 800ad40:	4638      	mov	r0, r7
 800ad42:	f7ff fd99 	bl	800a878 <_free_r>
 800ad46:	e7e9      	b.n	800ad1c <_realloc_r+0x1c>
 800ad48:	4635      	mov	r5, r6
 800ad4a:	e7e7      	b.n	800ad1c <_realloc_r+0x1c>

0800ad4c <_malloc_usable_size_r>:
 800ad4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad50:	1f18      	subs	r0, r3, #4
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	bfbc      	itt	lt
 800ad56:	580b      	ldrlt	r3, [r1, r0]
 800ad58:	18c0      	addlt	r0, r0, r3
 800ad5a:	4770      	bx	lr

0800ad5c <_init>:
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5e:	bf00      	nop
 800ad60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad62:	bc08      	pop	{r3}
 800ad64:	469e      	mov	lr, r3
 800ad66:	4770      	bx	lr

0800ad68 <_fini>:
 800ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6a:	bf00      	nop
 800ad6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad6e:	bc08      	pop	{r3}
 800ad70:	469e      	mov	lr, r3
 800ad72:	4770      	bx	lr
